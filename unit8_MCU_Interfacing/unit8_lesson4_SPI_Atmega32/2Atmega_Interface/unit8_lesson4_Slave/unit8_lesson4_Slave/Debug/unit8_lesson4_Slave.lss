
unit8_lesson4_Section_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a6f  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090c  00000000  00000000  00002263  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d29  00000000  00000000  00002b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00003898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000618  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d15  00000000  00000000  000040f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004e0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <main>
  64:	0c 94 04 03 	jmp	0x608	; 0x608 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setPinDirection>:
/* PINS APIS*/ 

void DIO_setPinDirection(u8 PortId, u8 PinId , u8 PinDirection ) 

{
 if ( (PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT ) || (PinDirection == DIO_PIN_INPUT)) )
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_setPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_setPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_setPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_setPinDirection+0xea>
  78:	42 30       	cpi	r20, 0x02	; 2
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_setPinDirection+0x12>
  7c:	6c c0       	rjmp	.+216    	; 0x156 <DIO_setPinDirection+0xea>
 { 
	switch (PortId)  // DIO PORTA
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	01 f1       	breq	.+64     	; 0xc2 <DIO_setPinDirection+0x56>
  82:	30 f0       	brcs	.+12     	; 0x90 <DIO_setPinDirection+0x24>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	b1 f1       	breq	.+108    	; 0xf4 <DIO_setPinDirection+0x88>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_setPinDirection+0x22>
  8c:	4c c0       	rjmp	.+152    	; 0x126 <DIO_setPinDirection+0xba>
  8e:	08 95       	ret
	{
		case 0 : 
		if (DIO_PIN_OUTPUT == PinDirection)
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	59 f4       	brne	.+22     	; 0xaa <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
  94:	2a b3       	in	r18, 0x1a	; 26
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_setPinDirection+0x34>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_setPinDirection+0x30>
  a4:	82 2b       	or	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,PinId);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x46>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
		}
		break ;
		
		case 1 : // DIO PORTB 
		if (DIO_PIN_OUTPUT == PinDirection)
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_setPinDirection+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_setPinDirection+0x62>
  d6:	82 2b       	or	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB,PinId);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x78>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
		}
		break ;
		
		case 2 : // DIO PORTC 
		if (DIO_PIN_OUTPUT == PinDirection)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
  f8:	24 b3       	in	r18, 0x14	; 20
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_setPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_setPinDirection+0x94>
 108:	82 2b       	or	r24, r18
 10a:	84 bb       	out	0x14, r24	; 20
 10c:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC,PinId);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0xaa>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
		}
		break ;
		
		case 3 : // DIO PORTD 
		if (DIO_PIN_OUTPUT == PinDirection)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 12a:	21 b3       	in	r18, 0x11	; 17
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_setPinDirection+0xca>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_setPinDirection+0xc6>
 13a:	82 2b       	or	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD,PinId);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_setPinValue>:
}

void DIO_setPinValue(u8 PortId, u8 PinId , u8 PinValue)

{
	 if ( (PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH ) || (PinValue == DIO_PIN_LOW)) )
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_setPinValue+0x6>
 15c:	72 c0       	rjmp	.+228    	; 0x242 <DIO_setPinValue+0xea>
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_setPinValue+0xc>
 162:	6f c0       	rjmp	.+222    	; 0x242 <DIO_setPinValue+0xea>
 164:	42 30       	cpi	r20, 0x02	; 2
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_setPinValue+0x12>
 168:	6c c0       	rjmp	.+216    	; 0x242 <DIO_setPinValue+0xea>
	 {
		 switch (PortId) 
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	01 f1       	breq	.+64     	; 0x1ae <DIO_setPinValue+0x56>
 16e:	30 f0       	brcs	.+12     	; 0x17c <DIO_setPinValue+0x24>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	b1 f1       	breq	.+108    	; 0x1e0 <DIO_setPinValue+0x88>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	09 f4       	brne	.+2      	; 0x17a <DIO_setPinValue+0x22>
 178:	4c c0       	rjmp	.+152    	; 0x212 <DIO_setPinValue+0xba>
 17a:	08 95       	ret
		 {
			 case 0 : // DIO_PORTA
			 if (DIO_PIN_HIGH==PinValue)
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	59 f4       	brne	.+22     	; 0x196 <DIO_setPinValue+0x3e>
			 {
			    SET_BIT(PORTA,PinId);
 180:	2b b3       	in	r18, 0x1b	; 27
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_setPinValue+0x34>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_setPinValue+0x30>
 190:	82 2b       	or	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
 194:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTA,PinId) ; 
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x4a>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x46>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
			 }
			 break ; 
			 
			 case 1 : // DIO_PORTB
			 if (DIO_PIN_HIGH==PinValue)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	59 f4       	brne	.+22     	; 0x1c8 <DIO_setPinValue+0x70>
			 {
			    SET_BIT(PORTB,PinId);
 1b2:	28 b3       	in	r18, 0x18	; 24
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_setPinValue+0x66>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_setPinValue+0x62>
 1c2:	82 2b       	or	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTB,PinId) ; 
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x7c>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x78>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	08 95       	ret
			 }
			 break ; 
			 
			 case 2 : // DIO_PORTC
			 if (DIO_PIN_HIGH==PinValue)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_setPinValue+0xa2>
			 {
			    SET_BIT(PORTC,PinId);
 1e4:	25 b3       	in	r18, 0x15	; 21
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_setPinValue+0x98>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_setPinValue+0x94>
 1f4:	82 2b       	or	r24, r18
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTC,PinId) ; 
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0xae>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0xaa>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
 210:	08 95       	ret
			 }
			 break ; 
			 
			 case 3 : // DIO_PORTD
			 if (DIO_PIN_HIGH==PinValue)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_setPinValue+0xd4>
			 {
			    SET_BIT(PORTD,PinId);
 216:	22 b3       	in	r18, 0x12	; 18
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_setPinValue+0xca>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_setPinValue+0xc6>
 226:	82 2b       	or	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTD,PinId) ; 
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xe0>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xdc>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <writeHalfPort>:
	
	else if (LineNumber==LCD_LINE_TWO)
	{
		if(Position<=15)
		{
			LCD_sendCmnd(0xc0 + Position);
 244:	cf 93       	push	r28
 246:	c8 2f       	mov	r28, r24
 248:	80 ff       	sbrs	r24, 0
 24a:	06 c0       	rjmp	.+12     	; 0x258 <writeHalfPort+0x14>
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	64 e0       	ldi	r22, 0x04	; 4
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 256:	05 c0       	rjmp	.+10     	; 0x262 <writeHalfPort+0x1e>
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	64 e0       	ldi	r22, 0x04	; 4
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 262:	c1 ff       	sbrs	r28, 1
 264:	06 c0       	rjmp	.+12     	; 0x272 <writeHalfPort+0x2e>
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	65 e0       	ldi	r22, 0x05	; 5
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 270:	05 c0       	rjmp	.+10     	; 0x27c <writeHalfPort+0x38>
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	65 e0       	ldi	r22, 0x05	; 5
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 27c:	c2 ff       	sbrs	r28, 2
 27e:	06 c0       	rjmp	.+12     	; 0x28c <writeHalfPort+0x48>
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	66 e0       	ldi	r22, 0x06	; 6
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 28a:	05 c0       	rjmp	.+10     	; 0x296 <writeHalfPort+0x52>
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	66 e0       	ldi	r22, 0x06	; 6
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 296:	c3 ff       	sbrs	r28, 3
 298:	06 c0       	rjmp	.+12     	; 0x2a6 <writeHalfPort+0x62>
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	67 e0       	ldi	r22, 0x07	; 7
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <writeHalfPort+0x6c>
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	67 e0       	ldi	r22, 0x07	; 7
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <LCD_sendCmnd>:
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2cc:	8c 2f       	mov	r24, r28
 2ce:	82 95       	swap	r24
 2d0:	8f 70       	andi	r24, 0x0F	; 15
 2d2:	0e 94 22 01 	call	0x244	; 0x244 <writeHalfPort>
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2e0:	8f e9       	ldi	r24, 0x9F	; 159
 2e2:	9f e0       	ldi	r25, 0x0F	; 15
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_sendCmnd+0x30>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_sendCmnd+0x36>
 2ea:	00 00       	nop
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2f6:	8c 2f       	mov	r24, r28
 2f8:	0e 94 22 01 	call	0x244	; 0x244 <writeHalfPort>
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	63 e0       	ldi	r22, 0x03	; 3
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 306:	8f e9       	ldi	r24, 0x9F	; 159
 308:	9f e0       	ldi	r25, 0x0F	; 15
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_sendCmnd+0x56>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_sendCmnd+0x5c>
 310:	00 00       	nop
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <LCD_init>:
 320:	2f e7       	ldi	r18, 0x7F	; 127
 322:	85 eb       	ldi	r24, 0xB5	; 181
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <LCD_init+0x6>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_init+0x10>
 330:	00 00       	nop
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	0e 94 22 01 	call	0x244	; 0x244 <writeHalfPort>
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	63 e0       	ldi	r22, 0x03	; 3
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 356:	8f e9       	ldi	r24, 0x9F	; 159
 358:	9f e0       	ldi	r25, 0x0F	; 15
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_init+0x3a>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_init+0x40>
 360:	00 00       	nop
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 36c:	88 e2       	ldi	r24, 0x28	; 40
 36e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_sendCmnd>
 372:	90 ef       	ldi	r25, 0xF0	; 240
 374:	9a 95       	dec	r25
 376:	f1 f7       	brne	.-4      	; 0x374 <LCD_init+0x54>
 378:	8d e0       	ldi	r24, 0x0D	; 13
 37a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_sendCmnd>
 37e:	20 ef       	ldi	r18, 0xF0	; 240
 380:	2a 95       	dec	r18
 382:	f1 f7       	brne	.-4      	; 0x380 <LCD_init+0x60>
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_sendCmnd>
 38a:	8f e3       	ldi	r24, 0x3F	; 63
 38c:	9f e1       	ldi	r25, 0x1F	; 31
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCD_init+0x6e>
 392:	00 c0       	rjmp	.+0      	; 0x394 <LCD_init+0x74>
 394:	00 00       	nop
 396:	86 e0       	ldi	r24, 0x06	; 6
 398:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_sendCmnd>
 39c:	08 95       	ret

0000039e <LCD_sendChar>:
 39e:	cf 93       	push	r28
 3a0:	c8 2f       	mov	r28, r24
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 3b6:	8c 2f       	mov	r24, r28
 3b8:	82 95       	swap	r24
 3ba:	8f 70       	andi	r24, 0x0F	; 15
 3bc:	0e 94 22 01 	call	0x244	; 0x244 <writeHalfPort>
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	63 e0       	ldi	r22, 0x03	; 3
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 3ca:	8f e9       	ldi	r24, 0x9F	; 159
 3cc:	9f e0       	ldi	r25, 0x0F	; 15
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <LCD_sendChar+0x30>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <LCD_sendChar+0x36>
 3d4:	00 00       	nop
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	63 e0       	ldi	r22, 0x03	; 3
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 3e0:	8c 2f       	mov	r24, r28
 3e2:	0e 94 22 01 	call	0x244	; 0x244 <writeHalfPort>
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	63 e0       	ldi	r22, 0x03	; 3
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 3f0:	8f e9       	ldi	r24, 0x9F	; 159
 3f2:	9f e0       	ldi	r25, 0x0F	; 15
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_sendChar+0x56>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_sendChar+0x5c>
 3fa:	00 00       	nop
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <LCD_clear>:
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_sendCmnd>
 410:	8f e3       	ldi	r24, 0x3F	; 63
 412:	9f e1       	ldi	r25, 0x1F	; 31
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <LCD_clear+0xa>
 418:	00 c0       	rjmp	.+0      	; 0x41a <LCD_clear+0x10>
 41a:	00 00       	nop
 41c:	08 95       	ret

0000041e <LCD_writeNumber>:
		}
	}
}

void LCD_writeNumber(u32 number)
{
 41e:	cf 92       	push	r12
 420:	df 92       	push	r13
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	8b 01       	movw	r16, r22
 42c:	9c 01       	movw	r18, r24
	u32 Local_reversed = 1;
	if (number == 0)
 42e:	67 2b       	or	r22, r23
 430:	68 2b       	or	r22, r24
 432:	69 2b       	or	r22, r25
 434:	49 f5       	brne	.+82     	; 0x488 <LCD_writeNumber+0x6a>
	{
		LCD_sendChar('0');
 436:	80 e3       	ldi	r24, 0x30	; 48
 438:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_sendChar>
 43c:	45 c0       	rjmp	.+138    	; 0x4c8 <LCD_writeNumber+0xaa>
	else
	{
		// Reverse Number
		while (number != 0)
		{
			Local_reversed = Local_reversed*10 + (number%10);
 43e:	dc 01       	movw	r26, r24
 440:	cb 01       	movw	r24, r22
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	aa 1f       	adc	r26, r26
 448:	bb 1f       	adc	r27, r27
 44a:	6c 01       	movw	r12, r24
 44c:	7d 01       	movw	r14, r26
 44e:	cc 0c       	add	r12, r12
 450:	dd 1c       	adc	r13, r13
 452:	ee 1c       	adc	r14, r14
 454:	ff 1c       	adc	r15, r15
 456:	cc 0c       	add	r12, r12
 458:	dd 1c       	adc	r13, r13
 45a:	ee 1c       	adc	r14, r14
 45c:	ff 1c       	adc	r15, r15
 45e:	c8 0e       	add	r12, r24
 460:	d9 1e       	adc	r13, r25
 462:	ea 1e       	adc	r14, r26
 464:	fb 1e       	adc	r15, r27
 466:	c9 01       	movw	r24, r18
 468:	b8 01       	movw	r22, r16
 46a:	2a e0       	ldi	r18, 0x0A	; 10
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__udivmodsi4>
 476:	6c 0d       	add	r22, r12
 478:	7d 1d       	adc	r23, r13
 47a:	8e 1d       	adc	r24, r14
 47c:	9f 1d       	adc	r25, r15
			number /= 10;
 47e:	02 2f       	mov	r16, r18
 480:	13 2f       	mov	r17, r19
 482:	24 2f       	mov	r18, r20
 484:	35 2f       	mov	r19, r21
 486:	04 c0       	rjmp	.+8      	; 0x490 <LCD_writeNumber+0x72>
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
		LCD_sendChar('0');
	}
	else
	{
		// Reverse Number
		while (number != 0)
 490:	01 15       	cp	r16, r1
 492:	11 05       	cpc	r17, r1
 494:	21 05       	cpc	r18, r1
 496:	31 05       	cpc	r19, r1
 498:	91 f6       	brne	.-92     	; 0x43e <LCD_writeNumber+0x20>
			number /= 10;
		}
		
		do
		{
			LCD_sendChar((Local_reversed%10)+'0');
 49a:	2a e0       	ldi	r18, 0x0A	; 10
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__udivmodsi4>
 4a6:	e2 2e       	mov	r14, r18
 4a8:	f3 2e       	mov	r15, r19
 4aa:	04 2f       	mov	r16, r20
 4ac:	15 2f       	mov	r17, r21
 4ae:	80 e3       	ldi	r24, 0x30	; 48
 4b0:	86 0f       	add	r24, r22
 4b2:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_sendChar>
			Local_reversed /= 10;
 4b6:	6e 2d       	mov	r22, r14
 4b8:	7f 2d       	mov	r23, r15
 4ba:	80 2f       	mov	r24, r16
 4bc:	91 2f       	mov	r25, r17
		}while (Local_reversed != 1);
 4be:	61 30       	cpi	r22, 0x01	; 1
 4c0:	71 05       	cpc	r23, r1
 4c2:	81 05       	cpc	r24, r1
 4c4:	91 05       	cpc	r25, r1
 4c6:	49 f7       	brne	.-46     	; 0x49a <LCD_writeNumber+0x7c>
	}
}
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	ff 90       	pop	r15
 4ce:	ef 90       	pop	r14
 4d0:	df 90       	pop	r13
 4d2:	cf 90       	pop	r12
 4d4:	08 95       	ret

000004d6 <main>:
#include   "LCD_interface.h"
#include   "LCD_config.h"


int main(void)
{
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	1f 92       	push	r1
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
	u8 i ;
	
	//LCD 
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	64 e0       	ldi	r22, 0x04	; 4
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	65 e0       	ldi	r22, 0x05	; 5
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	66 e0       	ldi	r22, 0x06	; 6
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	67 e0       	ldi	r22, 0x07	; 7
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 512:	41 e0       	ldi	r20, 0x01	; 1
 514:	62 e0       	ldi	r22, 0x02	; 2
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	63 e0       	ldi	r22, 0x03	; 3
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	
	
	DIO_setPinDirection(DIO_PORTB,DIO_PIN5,DIO_PIN_INPUT); // MOSI
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	65 e0       	ldi	r22, 0x05	; 5
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN6,DIO_PIN_OUTPUT);  // MISO
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	66 e0       	ldi	r22, 0x06	; 6
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN7,DIO_PIN_INPUT); //CLK
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	67 e0       	ldi	r22, 0x07	; 7
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN4,DIO_PIN_INPUT); //SS
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	64 e0       	ldi	r22, 0x04	; 4
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	
	
	LCD_init();
 54e:	0e 94 90 01 	call	0x320	; 0x320 <LCD_init>
	SPI_initSlave();
 552:	0e 94 c8 02 	call	0x590	; 0x590 <SPI_initSlave>
	u8 returnedData ;
	

	while (1)
	{
		for (i = 'A' ; i<= 'Z' ; i++)
 556:	11 e4       	ldi	r17, 0x41	; 65
 558:	18 c0       	rjmp	.+48     	; 0x58a <main+0xb4>
		{
			SPI_transieve(i,&returnedData);
 55a:	be 01       	movw	r22, r28
 55c:	6f 5f       	subi	r22, 0xFF	; 255
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	81 2f       	mov	r24, r17
 562:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <SPI_transieve>
			LCD_writeNumber(returnedData);
 566:	69 81       	ldd	r22, Y+1	; 0x01
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_writeNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 572:	2f ef       	ldi	r18, 0xFF	; 255
 574:	89 e6       	ldi	r24, 0x69	; 105
 576:	98 e1       	ldi	r25, 0x18	; 24
 578:	21 50       	subi	r18, 0x01	; 1
 57a:	80 40       	sbci	r24, 0x00	; 0
 57c:	90 40       	sbci	r25, 0x00	; 0
 57e:	e1 f7       	brne	.-8      	; 0x578 <main+0xa2>
 580:	00 c0       	rjmp	.+0      	; 0x582 <main+0xac>
 582:	00 00       	nop
			_delay_ms(500);
			LCD_clear();
 584:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_clear>
	u8 returnedData ;
	

	while (1)
	{
		for (i = 'A' ; i<= 'Z' ; i++)
 588:	1f 5f       	subi	r17, 0xFF	; 255
 58a:	1b 35       	cpi	r17, 0x5B	; 91
 58c:	30 f3       	brcs	.-52     	; 0x55a <main+0x84>
 58e:	e3 cf       	rjmp	.-58     	; 0x556 <main+0x80>

00000590 <SPI_initSlave>:
}

void SPI_initSlave(void)
{
	// Select Data Order LSB Transmited First
	SET_BIT(SPI->SPCR,5);
 590:	8d b1       	in	r24, 0x0d	; 13
 592:	80 62       	ori	r24, 0x20	; 32
 594:	8d b9       	out	0x0d, r24	; 13
	
	// Select Slave Mode
	CLR_BIT(SPI->SPCR,4);
 596:	8d b1       	in	r24, 0x0d	; 13
 598:	8f 7e       	andi	r24, 0xEF	; 239
 59a:	8d b9       	out	0x0d, r24	; 13
	
	// Select CLK Polarity Falling >> Rising ,Select CLK Phase Setup >> Sampling
	SET_BIT(SPI->SPCR,2);
 59c:	8d b1       	in	r24, 0x0d	; 13
 59e:	84 60       	ori	r24, 0x04	; 4
 5a0:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPI->SPCR,3);
 5a2:	8d b1       	in	r24, 0x0d	; 13
 5a4:	88 60       	ori	r24, 0x08	; 8
 5a6:	8d b9       	out	0x0d, r24	; 13
	
	
	// SPI Enable
	SET_BIT(SPI->SPCR,6);
 5a8:	8d b1       	in	r24, 0x0d	; 13
 5aa:	80 64       	ori	r24, 0x40	; 64
 5ac:	8d b9       	out	0x0d, r24	; 13
 5ae:	08 95       	ret

000005b0 <SPI_transieve>:
	
}

void SPI_transieve(u8 TxData,u8* RxData)
{
	if (RxData != NULL)
 5b0:	61 15       	cp	r22, r1
 5b2:	71 05       	cpc	r23, r1
 5b4:	31 f0       	breq	.+12     	; 0x5c2 <SPI_transieve+0x12>
	{
		SPI->SPDR = TxData;
 5b6:	8f b9       	out	0x0f, r24	; 15
		
		while(0 == GET_BIT(SPI->SPSR,7));
 5b8:	77 9b       	sbis	0x0e, 7	; 14
 5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <SPI_transieve+0x8>
		*RxData = SPI->SPDR; 
 5bc:	8f b1       	in	r24, 0x0f	; 15
 5be:	fb 01       	movw	r30, r22
 5c0:	80 83       	st	Z, r24
 5c2:	08 95       	ret

000005c4 <__udivmodsi4>:
 5c4:	a1 e2       	ldi	r26, 0x21	; 33
 5c6:	1a 2e       	mov	r1, r26
 5c8:	aa 1b       	sub	r26, r26
 5ca:	bb 1b       	sub	r27, r27
 5cc:	fd 01       	movw	r30, r26
 5ce:	0d c0       	rjmp	.+26     	; 0x5ea <__udivmodsi4_ep>

000005d0 <__udivmodsi4_loop>:
 5d0:	aa 1f       	adc	r26, r26
 5d2:	bb 1f       	adc	r27, r27
 5d4:	ee 1f       	adc	r30, r30
 5d6:	ff 1f       	adc	r31, r31
 5d8:	a2 17       	cp	r26, r18
 5da:	b3 07       	cpc	r27, r19
 5dc:	e4 07       	cpc	r30, r20
 5de:	f5 07       	cpc	r31, r21
 5e0:	20 f0       	brcs	.+8      	; 0x5ea <__udivmodsi4_ep>
 5e2:	a2 1b       	sub	r26, r18
 5e4:	b3 0b       	sbc	r27, r19
 5e6:	e4 0b       	sbc	r30, r20
 5e8:	f5 0b       	sbc	r31, r21

000005ea <__udivmodsi4_ep>:
 5ea:	66 1f       	adc	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	1a 94       	dec	r1
 5f4:	69 f7       	brne	.-38     	; 0x5d0 <__udivmodsi4_loop>
 5f6:	60 95       	com	r22
 5f8:	70 95       	com	r23
 5fa:	80 95       	com	r24
 5fc:	90 95       	com	r25
 5fe:	9b 01       	movw	r18, r22
 600:	ac 01       	movw	r20, r24
 602:	bd 01       	movw	r22, r26
 604:	cf 01       	movw	r24, r30
 606:	08 95       	ret

00000608 <_exit>:
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>
