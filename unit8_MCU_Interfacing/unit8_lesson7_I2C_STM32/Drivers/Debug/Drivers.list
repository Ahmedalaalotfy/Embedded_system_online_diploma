
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010a4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080011d4  080011d4  000111d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011f4  080011f4  000111fc  2**0
                  CONTENTS
  4 .ARM          00000000  080011f4  080011f4  000111fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011f4  080011fc  000111fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011f4  080011f4  000111f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011f8  080011f8  000111f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  080011fc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080011fc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006dcb  00000000  00000000  00011225  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001078  00000000  00000000  00017ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000140e  00000000  00000000  00019068  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000300  00000000  00000000  0001a478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000278  00000000  00000000  0001a778  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000031cb  00000000  00000000  0001a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003d3b  00000000  00000000  0001dbbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c304  00000000  00000000  000218f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002dbfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a14  00000000  00000000  0002dc78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080011bc 	.word	0x080011bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080011bc 	.word	0x080011bc

08000170 <clock_init>:
#include "I2C_Slave_EEPROM.h"

unsigned char ch ;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN() ;
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	//Enable clock GPIOB
	RCC_GPIOB_CLK_EN() ;
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

	//Enable clock AFIO
	AFIO_GPIOE_CLK_EN() ;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <main>:
	for (i= 0 ; i<x ; i++)
		for (j= 0 ; j<255 ; j++);
}

int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0

	clock_init();
 80001aa:	f7ff ffe1 	bl	8000170 <clock_init>

	//Test case 1
	uint8_t ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 80001ae:	4a1b      	ldr	r2, [pc, #108]	; (800021c <main+0x78>)
 80001b0:	f107 0308 	add.w	r3, r7, #8
 80001b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001b8:	6018      	str	r0, [r3, #0]
 80001ba:	3304      	adds	r3, #4
 80001bc:	8019      	strh	r1, [r3, #0]
 80001be:	3302      	adds	r3, #2
 80001c0:	0c0a      	lsrs	r2, r1, #16
 80001c2:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7] = {0};
 80001c4:	463b      	mov	r3, r7
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_Init();
 80001ce:	f000 f851 	bl	8000274 <EEPROM_Init>
	EEPROM_Write_Nbytes(0xAF, ch1, 7);
 80001d2:	f107 0308 	add.w	r3, r7, #8
 80001d6:	2207      	movs	r2, #7
 80001d8:	4619      	mov	r1, r3
 80001da:	20af      	movs	r0, #175	; 0xaf
 80001dc:	f000 f86a 	bl	80002b4 <EEPROM_Write_Nbytes>
	EEPROM_Read_byte(0xAF, ch2, 7);
 80001e0:	463b      	mov	r3, r7
 80001e2:	2207      	movs	r2, #7
 80001e4:	4619      	mov	r1, r3
 80001e6:	20af      	movs	r0, #175	; 0xaf
 80001e8:	f000 f8b6 	bl	8000358 <EEPROM_Read_byte>


	//Test case 2
	ch1[0] = 0xA;
 80001ec:	230a      	movs	r3, #10
 80001ee:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 80001f0:	230b      	movs	r3, #11
 80001f2:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 80001f4:	230c      	movs	r3, #12
 80001f6:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 80001f8:	230d      	movs	r3, #13
 80001fa:	72fb      	strb	r3, [r7, #11]

	EEPROM_Write_Nbytes(0xFFF,ch1, 4) ;
 80001fc:	f107 0308 	add.w	r3, r7, #8
 8000200:	2204      	movs	r2, #4
 8000202:	4619      	mov	r1, r3
 8000204:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000208:	f000 f854 	bl	80002b4 <EEPROM_Write_Nbytes>
	EEPROM_Read_byte(0xFFF, ch2, 4);
 800020c:	463b      	mov	r3, r7
 800020e:	2204      	movs	r2, #4
 8000210:	4619      	mov	r1, r3
 8000212:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000216:	f000 f89f 	bl	8000358 <EEPROM_Read_byte>

	while (1)
 800021a:	e7fe      	b.n	800021a <main+0x76>
 800021c:	080011d4 	.word	0x080011d4

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000224:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f000 ff91 	bl	8001174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f7ff ffa7 	bl	80001a4 <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000264:	080011fc 	.word	0x080011fc
  ldr r2, =_sbss
 8000268:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800026c:	200000ac 	.word	0x200000ac

08000270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_2_IRQHandler>
	...

08000274 <EEPROM_Init>:

#include "I2C_Slave_EEPROM.h"


void EEPROM_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b08a      	sub	sp, #40	; 0x28
 8000278:	af00      	add	r7, sp, #0

	I2C_Config_t I2C1CFG ;

	//I2C Controller act as Master

	I2C1CFG.General_Call_Adress_Detection = I2C_ENGC_Enable ;
 800027a:	2340      	movs	r3, #64	; 0x40
 800027c:	623b      	str	r3, [r7, #32]
	I2C1CFG.I2C_ACK_Control = I2C_ACK_Enable ;
 800027e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000282:	61fb      	str	r3, [r7, #28]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100K ;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <EEPROM_Init+0x38>)
 8000286:	607b      	str	r3, [r7, #4]
	I2C1CFG.I2C_Mode =I2C_Mode_I2C ;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
	I2C1CFG.P_Slave_Event_CallBack = NULL ;
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
	I2C1CFG.StrechMode = I2C_StretchMode_Enable ;
 8000290:	2300      	movs	r3, #0
 8000292:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000294:	4806      	ldr	r0, [pc, #24]	; (80002b0 <EEPROM_Init+0x3c>)
 8000296:	f000 fd09 	bl	8000cac <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	4804      	ldr	r0, [pc, #16]	; (80002b0 <EEPROM_Init+0x3c>)
 80002a0:	f000 fbf4 	bl	8000a8c <MCAL_I2C_Init>

}
 80002a4:	bf00      	nop
 80002a6:	3728      	adds	r7, #40	; 0x28
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	000186a0 	.word	0x000186a0
 80002b0:	40005400 	.word	0x40005400

080002b4 <EEPROM_Write_Nbytes>:

uint8_t EEPROM_Write_Nbytes(uint32_t Memory_Address , uint8_t* bytes , uint8_t Data_Length)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b0c8      	sub	sp, #288	; 0x120
 80002b8:	af02      	add	r7, sp, #8
 80002ba:	f107 030c 	add.w	r3, r7, #12
 80002be:	6018      	str	r0, [r3, #0]
 80002c0:	f107 0308 	add.w	r3, r7, #8
 80002c4:	6019      	str	r1, [r3, #0]
 80002c6:	1dfb      	adds	r3, r7, #7
 80002c8:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//MISRA C++ 2008 --> Dynamic heap memory allocation shall not be used
	//Violate MISRA Rule
	//(uint8_t*)malloc(Data_Length+2) ;
	uint8_t buffer[256];

	buffer[0] = (uint8_t)(Memory_Address>>8); // Upper Byte Memory Address
 80002d0:	f107 030c 	add.w	r3, r7, #12
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	0a1b      	lsrs	r3, r3, #8
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	f107 0314 	add.w	r3, r7, #20
 80002de:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_Address);	   // Lower Byte Memory Address
 80002e0:	f107 030c 	add.w	r3, r7, #12
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	705a      	strb	r2, [r3, #1]

	for(i=2 ; i< (Data_Length+2) ; i++)
 80002ee:	2302      	movs	r3, #2
 80002f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80002f4:	e011      	b.n	800031a <EEPROM_Write_Nbytes+0x66>
	{buffer[i] = bytes[i-2];}
 80002f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80002fa:	3b02      	subs	r3, #2
 80002fc:	f107 0208 	add.w	r2, r7, #8
 8000300:	6812      	ldr	r2, [r2, #0]
 8000302:	441a      	add	r2, r3
 8000304:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000308:	7811      	ldrb	r1, [r2, #0]
 800030a:	f107 0214 	add.w	r2, r7, #20
 800030e:	54d1      	strb	r1, [r2, r3]
	for(i=2 ; i< (Data_Length+2) ; i++)
 8000310:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000314:	3301      	adds	r3, #1
 8000316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800031a:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	3302      	adds	r3, #2
 8000324:	429a      	cmp	r2, r3
 8000326:	dbe6      	blt.n	80002f6 <EEPROM_Write_Nbytes+0x42>

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, (Data_Length+2), WithStop, Start);// Write the data at the Slave address
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	3302      	adds	r3, #2
 800032e:	4619      	mov	r1, r3
 8000330:	f107 0214 	add.w	r2, r7, #20
 8000334:	2300      	movs	r3, #0
 8000336:	9301      	str	r3, [sp, #4]
 8000338:	2300      	movs	r3, #0
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	460b      	mov	r3, r1
 800033e:	212a      	movs	r1, #42	; 0x2a
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <EEPROM_Write_Nbytes+0xa0>)
 8000342:	f000 fcfd 	bl	8000d40 <MCAL_I2C_Master_TX>

	return 0;
 8000346:	2300      	movs	r3, #0
}
 8000348:	4618      	mov	r0, r3
 800034a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40005400 	.word	0x40005400

08000358 <EEPROM_Read_byte>:
uint8_t EEPROM_Read_byte(uint32_t Address , uint8_t* dataOut , uint8_t Data_Length)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af02      	add	r7, sp, #8
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	4613      	mov	r3, r2
 8000364:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];
	buffer[0] = (uint8_t)(Address>>8); // Upper Byte Memory Address
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	0a1b      	lsrs	r3, r3, #8
 800036a:	b2db      	uxtb	r3, r3
 800036c:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)Address;	   // Lower Byte Memory Address
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, 2 , WithoutStop, Start);// Send The address
 8000374:	f107 0214 	add.w	r2, r7, #20
 8000378:	2300      	movs	r3, #0
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	2301      	movs	r3, #1
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	2302      	movs	r3, #2
 8000382:	212a      	movs	r1, #42	; 0x2a
 8000384:	4809      	ldr	r0, [pc, #36]	; (80003ac <EEPROM_Read_byte+0x54>)
 8000386:	f000 fcdb 	bl	8000d40 <MCAL_I2C_Master_TX>
	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_Address, dataOut, Data_Length , WithStop, RepeatedStart);// Read the data at the address
 800038a:	79fa      	ldrb	r2, [r7, #7]
 800038c:	2301      	movs	r3, #1
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	2300      	movs	r3, #0
 8000392:	9300      	str	r3, [sp, #0]
 8000394:	4613      	mov	r3, r2
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	212a      	movs	r1, #42	; 0x2a
 800039a:	4804      	ldr	r0, [pc, #16]	; (80003ac <EEPROM_Read_byte+0x54>)
 800039c:	f000 fd2e 	bl	8000dfc <MCAL_I2C_Master_RX>

	return 0;
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3718      	adds	r7, #24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40005400 	.word	0x40005400

080003b0 <EXTI0_IRQHandler>:
 * =====================================================================================
 */


void EXTI0_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <EXTI0_IRQHandler+0x1c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <EXTI0_IRQHandler+0x1c>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <EXTI0_IRQHandler+0x20>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4798      	blx	r3
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40010400 	.word	0x40010400
 80003d0:	2000001c 	.word	0x2000001c

080003d4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <EXTI1_IRQHandler+0x1c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <EXTI1_IRQHandler+0x1c>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <EXTI1_IRQHandler+0x20>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4798      	blx	r3
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010400 	.word	0x40010400
 80003f4:	2000001c 	.word	0x2000001c

080003f8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <EXTI2_IRQHandler+0x1c>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <EXTI2_IRQHandler+0x1c>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <EXTI2_IRQHandler+0x20>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	4798      	blx	r3
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40010400 	.word	0x40010400
 8000418:	2000001c 	.word	0x2000001c

0800041c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI3_IRQHandler+0x1c>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI3_IRQHandler+0x1c>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI3_IRQHandler+0x20>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4798      	blx	r3
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010400 	.word	0x40010400
 800043c:	2000001c 	.word	0x2000001c

08000440 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <EXTI4_IRQHandler+0x1c>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <EXTI4_IRQHandler+0x1c>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <EXTI4_IRQHandler+0x20>)
 8000452:	691b      	ldr	r3, [r3, #16]
 8000454:	4798      	blx	r3
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	2000001c 	.word	0x2000001c

08000464 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 8000468:	4b26      	ldr	r3, [pc, #152]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	2b00      	cmp	r3, #0
 8000472:	d008      	beq.n	8000486 <EXTI9_5_IRQHandler+0x22>
 8000474:	4b23      	ldr	r3, [pc, #140]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	4a22      	ldr	r2, [pc, #136]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6153      	str	r3, [r2, #20]
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800048e:	2b00      	cmp	r3, #0
 8000490:	d008      	beq.n	80004a4 <EXTI9_5_IRQHandler+0x40>
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d008      	beq.n	80004c2 <EXTI9_5_IRQHandler+0x5e>
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a13      	ldr	r2, [pc, #76]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ba:	6153      	str	r3, [r2, #20]
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d008      	beq.n	80004e0 <EXTI9_5_IRQHandler+0x7c>
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004dc:	6a1b      	ldr	r3, [r3, #32]
 80004de:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d008      	beq.n	80004fe <EXTI9_5_IRQHandler+0x9a>
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6153      	str	r3, [r2, #20]
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fc:	4798      	blx	r3
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40010400 	.word	0x40010400
 8000508:	2000001c 	.word	0x2000001c

0800050c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000518:	2b00      	cmp	r3, #0
 800051a:	d008      	beq.n	800052e <EXTI15_10_IRQHandler+0x22>
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000526:	6153      	str	r3, [r2, #20]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 800052a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800052c:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000536:	2b00      	cmp	r3, #0
 8000538:	d008      	beq.n	800054c <EXTI15_10_IRQHandler+0x40>
 800053a:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 8000548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054a:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000554:	2b00      	cmp	r3, #0
 8000556:	d008      	beq.n	800056a <EXTI15_10_IRQHandler+0x5e>
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a1a      	ldr	r2, [pc, #104]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800055e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000562:	6153      	str	r3, [r2, #20]
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000572:	2b00      	cmp	r3, #0
 8000574:	d008      	beq.n	8000588 <EXTI15_10_IRQHandler+0x7c>
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800057c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 8000584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000586:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <EXTI15_10_IRQHandler+0x9a>
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6153      	str	r3, [r2, #20]
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 80005a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005a4:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <EXTI15_10_IRQHandler+0xb8>
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 80005b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b03      	ldr	r3, [pc, #12]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 80005c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005c2:	4798      	blx	r3
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40010400 	.word	0x40010400
 80005cc:	2000001c 	.word	0x2000001c

080005d0 <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	2b80      	cmp	r3, #128	; 0x80
 80005de:	d042      	beq.n	8000666 <Get_CRLH_Position+0x96>
 80005e0:	2b80      	cmp	r3, #128	; 0x80
 80005e2:	dc11      	bgt.n	8000608 <Get_CRLH_Position+0x38>
 80005e4:	2b08      	cmp	r3, #8
 80005e6:	d036      	beq.n	8000656 <Get_CRLH_Position+0x86>
 80005e8:	2b08      	cmp	r3, #8
 80005ea:	dc06      	bgt.n	80005fa <Get_CRLH_Position+0x2a>
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d02e      	beq.n	800064e <Get_CRLH_Position+0x7e>
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d02e      	beq.n	8000652 <Get_CRLH_Position+0x82>
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d028      	beq.n	800064a <Get_CRLH_Position+0x7a>
 80005f8:	e047      	b.n	800068a <Get_CRLH_Position+0xba>
 80005fa:	2b20      	cmp	r3, #32
 80005fc:	d02f      	beq.n	800065e <Get_CRLH_Position+0x8e>
 80005fe:	2b40      	cmp	r3, #64	; 0x40
 8000600:	d02f      	beq.n	8000662 <Get_CRLH_Position+0x92>
 8000602:	2b10      	cmp	r3, #16
 8000604:	d029      	beq.n	800065a <Get_CRLH_Position+0x8a>
 8000606:	e040      	b.n	800068a <Get_CRLH_Position+0xba>
 8000608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800060c:	d033      	beq.n	8000676 <Get_CRLH_Position+0xa6>
 800060e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000612:	dc09      	bgt.n	8000628 <Get_CRLH_Position+0x58>
 8000614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000618:	d029      	beq.n	800066e <Get_CRLH_Position+0x9e>
 800061a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800061e:	d028      	beq.n	8000672 <Get_CRLH_Position+0xa2>
 8000620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000624:	d021      	beq.n	800066a <Get_CRLH_Position+0x9a>
 8000626:	e030      	b.n	800068a <Get_CRLH_Position+0xba>
 8000628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800062c:	d027      	beq.n	800067e <Get_CRLH_Position+0xae>
 800062e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000632:	dc03      	bgt.n	800063c <Get_CRLH_Position+0x6c>
 8000634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000638:	d01f      	beq.n	800067a <Get_CRLH_Position+0xaa>
 800063a:	e026      	b.n	800068a <Get_CRLH_Position+0xba>
 800063c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000640:	d01f      	beq.n	8000682 <Get_CRLH_Position+0xb2>
 8000642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000646:	d01e      	beq.n	8000686 <Get_CRLH_Position+0xb6>
 8000648:	e01f      	b.n	800068a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800064a:	2300      	movs	r3, #0
 800064c:	e01e      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 800064e:	2304      	movs	r3, #4
 8000650:	e01c      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000652:	2308      	movs	r3, #8
 8000654:	e01a      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000656:	230c      	movs	r3, #12
 8000658:	e018      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 800065a:	2310      	movs	r3, #16
 800065c:	e016      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 800065e:	2314      	movs	r3, #20
 8000660:	e014      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8000662:	2318      	movs	r3, #24
 8000664:	e012      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8000666:	231c      	movs	r3, #28
 8000668:	e010      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 800066a:	2300      	movs	r3, #0
 800066c:	e00e      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 800066e:	2304      	movs	r3, #4
 8000670:	e00c      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000672:	2308      	movs	r3, #8
 8000674:	e00a      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000676:	230c      	movs	r3, #12
 8000678:	e008      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 800067a:	2310      	movs	r3, #16
 800067c:	e006      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 800067e:	2314      	movs	r3, #20
 8000680:	e004      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000682:	2318      	movs	r3, #24
 8000684:	e002      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000686:	231c      	movs	r3, #28
 8000688:	e000      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;

	default:
		return 0;
 800068a:	2300      	movs	r3, #0
		break;
	}
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <MCAL_GPIO_Init>:
 * @retval			- none
 * Note				- stm32F103c6 MCU has GPIO A,B,C,D,E Modules
 * 					  But LQFP48 package has only GPIO A,B,Part of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000696:	b590      	push	{r4, r7, lr}
 8000698:	b085      	sub	sp, #20
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	6039      	str	r1, [r7, #0]
	// Port configuration register low  (GPIOx_CRL) configure PINS from 0 ==> 7
	// Port configuration register high (GPIOx_CRH) configure PINS from 8 ==> 15

	volatile uint32_t* configregister = NULL ;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG = 0 ;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOx->CRL : &GPIOx->CRH ;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	2bff      	cmp	r3, #255	; 0xff
 80006ae:	d801      	bhi.n	80006b4 <MCAL_GPIO_Init+0x1e>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	e001      	b.n	80006b8 <MCAL_GPIO_Init+0x22>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3304      	adds	r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]

	//clear CNF MODE
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff86 	bl	80005d0 <Get_CRLH_Position>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	230f      	movs	r3, #15
 80006ca:	4093      	lsls	r3, r2
 80006cc:	43da      	mvns	r2, r3
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	401a      	ands	r2, r3
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	601a      	str	r2, [r3, #0]

	//if PIN is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)|| (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d00b      	beq.n	80006f8 <MCAL_GPIO_Init+0x62>
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	789b      	ldrb	r3, [r3, #2]
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d007      	beq.n	80006f8 <MCAL_GPIO_Init+0x62>
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	789b      	ldrb	r3, [r3, #2]
 80006ec:	2b05      	cmp	r3, #5
 80006ee:	d003      	beq.n	80006f8 <MCAL_GPIO_Init+0x62>
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	789b      	ldrb	r3, [r3, #2]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d10e      	bne.n	8000716 <MCAL_GPIO_Init+0x80>
	{
		//Set CNF MODE
		PIN_CONFIG = ( (((PinConfig->GPIO_MODE -4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f) ;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	3b04      	subs	r3, #4
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	b25a      	sxtb	r2, r3
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	78db      	ldrb	r3, [r3, #3]
 8000706:	b25b      	sxtb	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b25b      	sxtb	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	e02c      	b.n	8000770 <MCAL_GPIO_Init+0xda>
	}

	else
	{
		if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog) )
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	789b      	ldrb	r3, [r3, #2]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d003      	beq.n	8000726 <MCAL_GPIO_Init+0x90>
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	789b      	ldrb	r3, [r3, #2]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d107      	bne.n	8000736 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF
			PIN_CONFIG = ( (((PinConfig->GPIO_MODE ) << 2) | (0x00)) & 0x0f) ;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	e01c      	b.n	8000770 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF ) //Consider it as input floating
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	2b08      	cmp	r3, #8
 800073c:	d102      	bne.n	8000744 <MCAL_GPIO_Init+0xae>
		{
			PIN_CONFIG = ( (((GPIO_MODE_INPUT_FLO) << 2) | (0x00)) & 0x0f) ;
 800073e:	2304      	movs	r3, #4
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	e015      	b.n	8000770 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD
		{
			PIN_CONFIG = ( (((GPIO_MODE_INPUT_PU) << 2) | (0x00)) & 0x0f) ;
 8000744:	2308      	movs	r3, #8
 8000746:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	789b      	ldrb	r3, [r3, #2]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d107      	bne.n	8000760 <MCAL_GPIO_Init+0xca>
			{
				// PXODR = 1 Input pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	8812      	ldrh	r2, [r2, #0]
 8000758:	431a      	orrs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	e007      	b.n	8000770 <MCAL_GPIO_Init+0xda>
			}

			else
			{
				// PXODR = 0 Input pull down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	8812      	ldrh	r2, [r2, #0]
 8000768:	43d2      	mvns	r2, r2
 800076a:	401a      	ands	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*configregister) |= ( (PIN_CONFIG) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000770:	7bfc      	ldrb	r4, [r7, #15]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff2a 	bl	80005d0 <Get_CRLH_Position>
 800077c:	4603      	mov	r3, r0
 800077e:	fa04 f203 	lsl.w	r2, r4, r3
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	431a      	orrs	r2, r3
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	601a      	str	r2, [r3, #0]


}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}

08000794 <I2C_GetFlagSTATUS>:
 * 							Generic Functions
 * =====================================================================================
 */

FlagSTATUS I2C_GetFlagSTATUS(I2C_TypeDef *I2Cx, Status Flag)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead;
	uint32_t flag1 = 0 ,flag2 = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
	uint32_t lastevent = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
	FlagSTATUS bitstatus = RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	77fb      	strb	r3, [r7, #31]

	switch(Flag)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d06b      	beq.n	800088c <I2C_GetFlagSTATUS+0xf8>
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d804      	bhi.n	80007c2 <I2C_GetFlagSTATUS+0x2e>
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d016      	beq.n	80007ea <I2C_GetFlagSTATUS+0x56>
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d820      	bhi.n	8000802 <I2C_GetFlagSTATUS+0x6e>
 80007c0:	e007      	b.n	80007d2 <I2C_GetFlagSTATUS+0x3e>
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d050      	beq.n	8000868 <I2C_GetFlagSTATUS+0xd4>
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d342      	bcc.n	8000850 <I2C_GetFlagSTATUS+0xbc>
 80007ca:	4a39      	ldr	r2, [pc, #228]	; (80008b0 <I2C_GetFlagSTATUS+0x11c>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d024      	beq.n	800081a <I2C_GetFlagSTATUS+0x86>
 80007d0:	e068      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0).
		if((I2Cx->SR2) & (I2C_SR2_BUSY))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <I2C_GetFlagSTATUS+0x50>
			bitstatus = SET ;
 80007de:	2301      	movs	r3, #1
 80007e0:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 80007e2:	e05f      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
			bitstatus = RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	77fb      	strb	r3, [r7, #31]
		break;
 80007e8:	e05c      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if((I2Cx->SR1) & (I2C_SR1_SB))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <I2C_GetFlagSTATUS+0x68>
			bitstatus = SET ;
 80007f6:	2301      	movs	r3, #1
 80007f8:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 80007fa:	e053      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
			bitstatus = RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	77fb      	strb	r3, [r7, #31]
		break;
 8000800:	e050      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
		//		This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
		//		when PE=0.
		//		Address matched (Slave)
		//		0: Address mismatched or not received.
		//		1: Received address matched
		if( (I2Cx->SR1) & (I2C_SR1_ADDR))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <I2C_GetFlagSTATUS+0x80>
			bitstatus = SET ;
 800080e:	2301      	movs	r3, #1
 8000810:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8000812:	e047      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
			bitstatus = RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	77fb      	strb	r3, [r7, #31]
		break;
 8000818:	e044      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		// Read I2C Status Register
		flag1 = I2Cx->SR1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	041b      	lsls	r3, r3, #16
 800082a:	617b      	str	r3, [r7, #20]
		// Get the last event value from I2C Status Register
		lastevent = ((flag2 | flag1) & (uint32_t)0x00FFFFFF);
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	4313      	orrs	r3, r2
 8000832:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000836:	613b      	str	r3, [r7, #16]
		//Check whether the last event contains the I2C_EVENT
		if( (lastevent & MASTER_BYTE_TRANSMITTING) == MASTER_BYTE_TRANSMITTING)
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <I2C_GetFlagSTATUS+0x11c>)
 800083c:	4013      	ands	r3, r2
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <I2C_GetFlagSTATUS+0x11c>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d102      	bne.n	800084a <I2C_GetFlagSTATUS+0xb6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET ;
 8000844:	2301      	movs	r3, #1
 8000846:	77fb      	strb	r3, [r7, #31]
		else
		{
			/* ERROR: last event is different from I2C_EVENT */
			bitstatus = RESET;
		}
		break;
 8000848:	e02c      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
			bitstatus = RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	77fb      	strb	r3, [r7, #31]
		break;
 800084e:	e029      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
	case EV8://EV8: TxE=1, shift register not empty, d. ata register empty, cleared by writing DR register
	{
		//		Bit 7 TxE: Data register empty (transmitters)
		//		0: Data register not empty
		//		1: Data register empty
		if(I2Cx->SR1 & (I2C_SR1_TXE))
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <I2C_GetFlagSTATUS+0xce>
		{
			bitstatus = SET ;
 800085c:	2301      	movs	r3, #1
 800085e:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8000860:	e020      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
			bitstatus = RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	77fb      	strb	r3, [r7, #31]
		break;
 8000866:	e01d      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
		//		1: Data register empty
		//----------------------------------------------
		//		Bit 2 BTF: Byte transfer finished
		//		0: Data byte transfer not done
		//		1: Data byte transfer succeeded
		if( (I2Cx->SR1 & (I2C_SR1_TXE))  &&  (I2Cx->SR1 & (I2C_SR1_BTF)))
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000870:	2b00      	cmp	r3, #0
 8000872:	d008      	beq.n	8000886 <I2C_GetFlagSTATUS+0xf2>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <I2C_GetFlagSTATUS+0xf2>
		{
			bitstatus = SET ;
 8000880:	2301      	movs	r3, #1
 8000882:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8000884:	e00e      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
			bitstatus = RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	77fb      	strb	r3, [r7, #31]
		break;
 800088a:	e00b      	b.n	80008a4 <I2C_GetFlagSTATUS+0x110>
	case EV7://EV5: RxNE = 1 Cleared by Reading DR Register
	{
		//		Bit 6 RxNE: Data register not empty (receivers)
		//		0: Data register empty
		//		1: Data register not empty
		if(I2Cx->SR1 & (I2C_SR1_RXNE))
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000894:	2b00      	cmp	r3, #0
 8000896:	d002      	beq.n	800089e <I2C_GetFlagSTATUS+0x10a>
		{
			bitstatus = SET ;
 8000898:	2301      	movs	r3, #1
 800089a:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 800089c:	e001      	b.n	80008a2 <I2C_GetFlagSTATUS+0x10e>
			bitstatus = RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	77fb      	strb	r3, [r7, #31]
		break;
 80008a2:	bf00      	nop
	}
	}
	return bitstatus;
 80008a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	; 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	00070080 	.word	0x00070080

080008b4 <I2C_AcknowledgeConfig>:

//supported only 7 bit mode
void I2C_AcknowledgeConfig(I2C_TypeDef *I2Cx, Fuctional_State NewState)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]
	if(NewState == ENABLE)
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d106      	bne.n	80008d4 <I2C_AcknowledgeConfig+0x20>
	{
		/* Enable the Acknowledgment */
		I2Cx->CR1 |= I2C_CR1_ACK;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the Acknowledgment */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 80008d2:	e005      	b.n	80008e0 <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <I2C_GenerateSTART>:

void I2C_GenerateSTART(I2C_TypeDef *I2Cx, Fuctional_State NewState, Repeated_Start Start)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70fb      	strb	r3, [r7, #3]
 80008f6:	4613      	mov	r3, r2
 80008f8:	70bb      	strb	r3, [r7, #2]
	if(Start != RepeatedStart)
 80008fa:	78bb      	ldrb	r3, [r7, #2]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d007      	beq.n	8000910 <I2C_GenerateSTART+0x26>
	{
		//Check if bus is idle
		while(I2C_GetFlagSTATUS(I2Cx, I2C_BUS_BUSY));
 8000900:	bf00      	nop
 8000902:	2100      	movs	r1, #0
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ff45 	bl	8000794 <I2C_GetFlagSTATUS>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f8      	bne.n	8000902 <I2C_GenerateSTART+0x18>
	//	0: No Start generation
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free
	if(NewState == ENABLE)
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d106      	bne.n	8000924 <I2C_GenerateSTART+0x3a>
	{
		/*Generate a START Condition*/
		I2Cx->CR1 |= I2C_CR1_START;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	601a      	str	r2, [r3, #0]
	else
	{
		/*Disable The START Condition Generation*/
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}
}
 8000922:	e005      	b.n	8000930 <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, Fuctional_State NewState)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
	if(NewState == ENABLE)
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d106      	bne.n	8000958 <I2C_GenerateSTOP+0x20>
	{
		/*Generate a START Condition*/
		I2Cx->CR1 |= I2C_CR1_STOP;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
	else
	{
		/*Disable The START Condition Generation*/
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000956:	e005      	b.n	8000964 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	601a      	str	r2, [r3, #0]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef *I2Cx, uint16_t Address, I2C_Direction Direction)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	460b      	mov	r3, r1
 8000978:	807b      	strh	r3, [r7, #2]
 800097a:	4613      	mov	r3, r2
 800097c:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	807b      	strh	r3, [r7, #2]

	if(Direction == I2C_Direction_Transmitter)
 8000984:	787b      	ldrb	r3, [r7, #1]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d104      	bne.n	8000994 <I2C_SendAddress+0x26>
	{
		/*Reset the address bit0 for write*/
		Address &= ~(1<<0);
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	f023 0301 	bic.w	r3, r3, #1
 8000990:	807b      	strh	r3, [r7, #2]
 8000992:	e003      	b.n	800099c <I2C_SendAddress+0x2e>
	}
	else  //I2C_Direction_Receiver
	{
		/*Set the address bit0 for Read*/
		Address |= (1<<0);
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	807b      	strh	r3, [r7, #2]
	}
	/*Send The Address*/
	I2Cx->DR = Address ;
 800099c:	887a      	ldrh	r2, [r7, #2]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	611a      	str	r2, [r3, #16]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <Slave_States>:

void Slave_States(I2C_TypeDef *I2Cx,Slave_State State)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a32      	ldr	r2, [pc, #200]	; (8000a84 <Slave_States+0xd8>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	73fb      	strb	r3, [r7, #15]

	switch(State)
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d856      	bhi.n	8000a7c <Slave_States+0xd0>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <Slave_States+0x28>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	080009ef 	.word	0x080009ef
 80009d8:	080009e9 	.word	0x080009e9
 80009dc:	08000a13 	.word	0x08000a13
 80009e0:	08000a2b 	.word	0x08000a2b
 80009e4:	08000a4f 	.word	0x08000a4f
	{
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 80009ec:	e046      	b.n	8000a7c <Slave_States+0xd0>

	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d03b      	beq.n	8000a72 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 80009fa:	7bfa      	ldrb	r2, [r7, #15]
 80009fc:	4922      	ldr	r1, [pc, #136]	; (8000a88 <Slave_States+0xdc>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	3320      	adds	r3, #32
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	4798      	blx	r3
		}
		break;
 8000a10:	e02f      	b.n	8000a72 <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 8000a12:	7bfa      	ldrb	r2, [r7, #15]
 8000a14:	491c      	ldr	r1, [pc, #112]	; (8000a88 <Slave_States+0xdc>)
 8000a16:	4613      	mov	r3, r2
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	4413      	add	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	440b      	add	r3, r1
 8000a20:	3320      	adds	r3, #32
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2002      	movs	r0, #2
 8000a26:	4798      	blx	r3
		break;
 8000a28:	e028      	b.n	8000a7c <Slave_States+0xd0>

	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d01f      	beq.n	8000a76 <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_SlaveSendData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 8000a36:	7bfa      	ldrb	r2, [r7, #15]
 8000a38:	4913      	ldr	r1, [pc, #76]	; (8000a88 <Slave_States+0xdc>)
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4413      	add	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	440b      	add	r3, r1
 8000a44:	3320      	adds	r3, #32
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2003      	movs	r0, #3
 8000a4a:	4798      	blx	r3
		}

		break;
 8000a4c:	e013      	b.n	8000a76 <Slave_States+0xca>

	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10f      	bne.n	8000a7a <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_SlaveReceiveData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 8000a5a:	7bfa      	ldrb	r2, [r7, #15]
 8000a5c:	490a      	ldr	r1, [pc, #40]	; (8000a88 <Slave_States+0xdc>)
 8000a5e:	4613      	mov	r3, r2
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	3320      	adds	r3, #32
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2004      	movs	r0, #4
 8000a6e:	4798      	blx	r3
		}

		break;
 8000a70:	e003      	b.n	8000a7a <Slave_States+0xce>
		break;
 8000a72:	bf00      	nop
 8000a74:	e002      	b.n	8000a7c <Slave_States+0xd0>
		break;
 8000a76:	bf00      	nop
 8000a78:	e000      	b.n	8000a7c <Slave_States+0xd0>
		break;
 8000a7a:	bf00      	nop
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40005400 	.word	0x40005400
 8000a88:	20000058 	.word	0x20000058

08000a8c <MCAL_I2C_Init>:
 * Retval            -None.
 * Note              -Supported for I2C SM mode only.
 * 					-Support only 7-bit address mode.
 */
void MCAL_I2C_Init(I2C_TypeDef *I2Cx , I2C_Config_t *I2C_Config)
{
 8000a8c:	b5b0      	push	{r4, r5, r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	uint16_t tempreg = 0  , freqrange = 0 ;
 8000a96:	2300      	movs	r3, #0
 8000a98:	82fb      	strh	r3, [r7, #22]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000 ;
 8000a9e:	4b7a      	ldr	r3, [pc, #488]	; (8000c88 <MCAL_I2C_Init+0x1fc>)
 8000aa0:	613b      	str	r3, [r7, #16]
	uint16_t result = 0 ;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	81fb      	strh	r3, [r7, #14]

	//Enable RCC Clock

	if (I2Cx == I2C1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a78      	ldr	r2, [pc, #480]	; (8000c8c <MCAL_I2C_Init+0x200>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d110      	bne.n	8000ad0 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_Config;
 8000aae:	4a78      	ldr	r2, [pc, #480]	; (8000c90 <MCAL_I2C_Init+0x204>)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	4614      	mov	r4, r2
 8000ab4:	461d      	mov	r5, r3
 8000ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000abe:	682b      	ldr	r3, [r5, #0]
 8000ac0:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN() ;
 8000ac2:	4b74      	ldr	r3, [pc, #464]	; (8000c94 <MCAL_I2C_Init+0x208>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4a73      	ldr	r2, [pc, #460]	; (8000c94 <MCAL_I2C_Init+0x208>)
 8000ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000acc:	61d3      	str	r3, [r2, #28]
 8000ace:	e010      	b.n	8000af2 <MCAL_I2C_Init+0x66>
	}
	else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_Config;
 8000ad0:	4b6f      	ldr	r3, [pc, #444]	; (8000c90 <MCAL_I2C_Init+0x204>)
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000ad8:	4615      	mov	r5, r2
 8000ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae2:	682b      	ldr	r3, [r5, #0]
 8000ae4:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN() ;
 8000ae6:	4b6b      	ldr	r3, [pc, #428]	; (8000c94 <MCAL_I2C_Init+0x208>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	4a6a      	ldr	r2, [pc, #424]	; (8000c94 <MCAL_I2C_Init+0x208>)
 8000aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af0:	61d3      	str	r3, [r2, #28]
	}


	if(I2C_Config->I2C_Mode == I2C_Mode_I2C)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d17f      	bne.n	8000bfa <MCAL_I2C_Init+0x16e>
	{
		/*----------------- INIT Timing --------------------*/

		//--I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		//get I2C_CR2 Register value
		tempreg = I2Cx->CR2 ;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	82fb      	strh	r3, [r7, #22]
		// clear Frequency FREQ[5:0] bits
		tempreg &= ~(I2C_CR2_FREQ_Msk);
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b06:	82fb      	strh	r3, [r7, #22]
		//get pclk1 frequency value
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 8000b08:	f000 faa6 	bl	8001058 <MCAL_RCC_GetPCLK1Freq>
 8000b0c:	6138      	str	r0, [r7, #16]
		//set frequency bits depending on pclk1 value
		freqrange = (uint16_t)(pclk1/1000000);
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4a61      	ldr	r2, [pc, #388]	; (8000c98 <MCAL_I2C_Init+0x20c>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	0c9b      	lsrs	r3, r3, #18
 8000b18:	82bb      	strh	r3, [r7, #20]

		tempreg |= freqrange ;
 8000b1a:	8afa      	ldrh	r2, [r7, #22]
 8000b1c:	8abb      	ldrh	r3, [r7, #20]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	82fb      	strh	r3, [r7, #22]
		//Write to I2Cx->CR2
		I2Cx->CR2 = tempreg;
 8000b22:	8afa      	ldrh	r2, [r7, #22]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers I2Cx->CCR

		// Disable the selected I2C peripheral to configure Time
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f023 0201 	bic.w	r2, r3, #1
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	601a      	str	r2, [r3, #0]

		tempreg = 0	;
 8000b34:	2300      	movs	r3, #0
 8000b36:	82fb      	strh	r3, [r7, #22]

		if (I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_50K || I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_100K)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d004      	beq.n	8000b4e <MCAL_I2C_Init+0xc2>
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a54      	ldr	r2, [pc, #336]	; (8000c9c <MCAL_I2C_Init+0x210>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d112      	bne.n	8000b74 <MCAL_I2C_Init+0xe8>
			// Thigh = CCR * TPCLK1
			// Thigh = Tclk /2
			// CCR = Tclk / (2 * TPCLK1)
			// CCR = Fpclk1 / (2 * I2C_Clock_Frequency)

			result = (uint16_t)(pclk1 / (I2C_Config->I2C_ClockSpeed <<1 )) ;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	81fb      	strh	r3, [r7, #14]

			tempreg |= result ;
 8000b5c:	8afa      	ldrh	r2, [r7, #22]
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	82fb      	strh	r3, [r7, #22]


			// Write To I2Cx CCR

			I2Cx->CCR = tempreg ;
 8000b64:	8afa      	ldrh	r2, [r7, #22]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	61da      	str	r2, [r3, #28]
			/*--------------I2C_TRISE Configuration--------------*/
			//For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//therefore the TRISE[5:0] bits must be programmed with 09h
			//(1000 ns / 125 ns = 8 + 1)
			I2Cx->TRISE = freqrange + 1 ;
 8000b6a:	8abb      	ldrh	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	461a      	mov	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	621a      	str	r2, [r3, #32]
		{
			// Fast Mode Not Supported
		}

		//Get I2Cx->CR1 value
		tempreg = I2Cx->CR1 ;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	82fb      	strh	r3, [r7, #22]

		tempreg |= (uint16_t)(I2C_Config->I2C_ACK_Control | I2C_Config->StrechMode | I2C_Config->General_Call_Adress_Detection | I2C_Config->I2C_Mode);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	8afb      	ldrh	r3, [r7, #22]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	82fb      	strh	r3, [r7, #22]


		//Write to I2Cx->CR1
		I2Cx->CR1 = tempreg ;
 8000ba4:	8afa      	ldrh	r2, [r7, #22]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]

		/*--------------I2C_OAR1 & I2C_OAR2 Configuration--------------*/
		tempreg = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	82fb      	strh	r3, [r7, #22]

		if(I2C_Config->I2C_Slave_Address.Enable_Dual_ADD == 1)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	899b      	ldrh	r3, [r3, #12]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d10d      	bne.n	8000bd2 <MCAL_I2C_Init+0x146>
		{
			tempreg = I2C_OAR2_ENDUAL ;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	82fb      	strh	r3, [r7, #22]
			tempreg |= I2C_Config->I2C_Slave_Address.secondary_slave_address << I2C_OAR2_ADD2_Pos;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	8a1b      	ldrh	r3, [r3, #16]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tempreg ;
 8000bcc:	8afa      	ldrh	r2, [r7, #22]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60da      	str	r2, [r3, #12]
		}

		tempreg = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_Config->I2C_Slave_Address.primary_slave_address << 1;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	89db      	ldrh	r3, [r3, #14]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_Config->I2C_Slave_Address.I2C_Addressing_Slave_Mode ;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	8afb      	ldrh	r3, [r7, #22]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tempreg ;
 8000bf4:	8afa      	ldrh	r2, [r7, #22]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
	{
		// I2C Mode SMBUS is not spported yet
	}

	// Interrupt Mode (Slave Mode) //check callback pointer != NULL
	if( I2C_Config->P_Slave_Event_CallBack != NULL) // that enable IRQ States Mode
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	6a1b      	ldr	r3, [r3, #32]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d038      	beq.n	8000c74 <MCAL_I2C_Init+0x1e8>
	{
		//Enable IRQ
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <MCAL_I2C_Init+0x200>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10c      	bne.n	8000c48 <MCAL_I2C_Init+0x1bc>
		{
			NVIC_IQR31_I2C1_EV_Enable();
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MCAL_I2C_Init+0x214>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <MCAL_I2C_Init+0x214>)
 8000c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c38:	6013      	str	r3, [r2, #0]
			NVIC_IQR32_I2C1_ER_Enable();
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MCAL_I2C_Init+0x218>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <MCAL_I2C_Init+0x218>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e00f      	b.n	8000c68 <MCAL_I2C_Init+0x1dc>
		}
		else if(I2Cx == I2C2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <MCAL_I2C_Init+0x21c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d10b      	bne.n	8000c68 <MCAL_I2C_Init+0x1dc>
		{
			NVIC_IQR33_I2C2_EV_Enable();
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MCAL_I2C_Init+0x218>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <MCAL_I2C_Init+0x218>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	6013      	str	r3, [r2, #0]
			NVIC_IQR34_I2C2_ER_Enable();
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MCAL_I2C_Init+0x218>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <MCAL_I2C_Init+0x218>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6013      	str	r3, [r2, #0]
		}
		I2Cx->SR1 = 0;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
	}
	// Enable The selecte I2C Peripheral
	I2Cx->CR1 |= I2C_CR1_PE ;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f043 0201 	orr.w	r2, r3, #1
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	601a      	str	r2, [r3, #0]

}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bdb0      	pop	{r4, r5, r7, pc}
 8000c88:	007a1200 	.word	0x007a1200
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	20000058 	.word	0x20000058
 8000c94:	40021000 	.word	0x40021000
 8000c98:	431bde83 	.word	0x431bde83
 8000c9c:	000186a0 	.word	0x000186a0
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000e104 	.word	0xe000e104
 8000ca8:	40005800 	.word	0x40005800

08000cac <MCAL_I2C_GPIO_Set_Pins>:
 * @retval 			- None
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for I2C SM MODE only
 */
void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef *I2Cx)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(I2Cx == I2C1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d118      	bne.n	8000cee <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		// PB6: I2C1_SCL --> Open drain
		// PB7: I2C1_SDA --> Open drain

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481a      	ldr	r0, [pc, #104]	; (8000d38 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000cd0:	f7ff fce1 	bl	8000696 <MCAL_GPIO_Init>


		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4814      	ldr	r0, [pc, #80]	; (8000d38 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000ce8:	f7ff fcd5 	bl	8000696 <MCAL_GPIO_Init>
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

	}

}
 8000cec:	e01d      	b.n	8000d2a <MCAL_I2C_GPIO_Set_Pins+0x7e>
	}else if(I2Cx == I2C2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MCAL_I2C_GPIO_Set_Pins+0x90>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d119      	bne.n	8000d2a <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	; (8000d38 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000d0c:	f7ff fcc3 	bl	8000696 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000d10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d14:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000d16:	2307      	movs	r3, #7
 8000d18:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000d26:	f7ff fcb6 	bl	8000696 <MCAL_GPIO_Init>
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40005400 	.word	0x40005400
 8000d38:	40010c00 	.word	0x40010c00
 8000d3c:	40005800 	.word	0x40005800

08000d40 <MCAL_I2C_Master_TX>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_Master_TX(I2C_TypeDef *I2Cx, uint16_t DevAddr ,uint8_t* dataOut , uint32_t datalen , Stop_Condition Stop , Repeated_Start Start)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
	//todo: support timeout(configure timer working for specific duration rise interrupt
	//timer_interrupt(){ flag = 1 }
	//so any code exist in while(check flag || any polling conditions)

	//1. Set The START bit in the I2C_CR1 register to generate a start condition
	I2C_GenerateSTART(I2Cx, ENABLE, Start);
 8000d54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f7ff fdc4 	bl	80008ea <I2C_GenerateSTART>

	//2. Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_GetFlagSTATUS(I2Cx, EV5));
 8000d62:	bf00      	nop
 8000d64:	2101      	movs	r1, #1
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f7ff fd14 	bl	8000794 <I2C_GetFlagSTATUS>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f8      	beq.n	8000d64 <MCAL_I2C_Master_TX+0x24>

	//3. Send Address
	I2C_SendAddress(I2Cx, DevAddr, I2C_Direction_Transmitter);
 8000d72:	897b      	ldrh	r3, [r7, #10]
 8000d74:	2200      	movs	r2, #0
 8000d76:	4619      	mov	r1, r3
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f7ff fdf8 	bl	800096e <I2C_SendAddress>

	//4. Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagSTATUS(I2Cx, EV6));
 8000d7e:	bf00      	nop
 8000d80:	2102      	movs	r1, #2
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f7ff fd06 	bl	8000794 <I2C_GetFlagSTATUS>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f8      	beq.n	8000d80 <MCAL_I2C_Master_TX+0x40>

	//5. /* TRA(Transmit/Receive) ,BUSY ,MSL(Master/Receive) , TXE Flags(Transmit is empty) */
	while(!I2C_GetFlagSTATUS(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000d8e:	bf00      	nop
 8000d90:	4919      	ldr	r1, [pc, #100]	; (8000df8 <MCAL_I2C_Master_TX+0xb8>)
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f7ff fcfe 	bl	8000794 <I2C_GetFlagSTATUS>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f8      	beq.n	8000d90 <MCAL_I2C_Master_TX+0x50>

	for(i=0;i<datalen;i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e011      	b.n	8000dc8 <MCAL_I2C_Master_TX+0x88>
	{
		/* Write on the Data Register the data to be sent */
		I2Cx->DR = dataOut[i];
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	611a      	str	r2, [r3, #16]
		//6. Wait for EV8
		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(!I2C_GetFlagSTATUS(I2Cx, EV8));
 8000db2:	bf00      	nop
 8000db4:	2104      	movs	r1, #4
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f7ff fcec 	bl	8000794 <I2C_GetFlagSTATUS>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f8      	beq.n	8000db4 <MCAL_I2C_Master_TX+0x74>
	for(i=0;i<datalen;i++)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8e9      	bhi.n	8000da4 <MCAL_I2C_Master_TX+0x64>
	}

	//7. Wait for EV8_2
	//EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	while(!I2C_GetFlagSTATUS(I2Cx, EV8_2));
 8000dd0:	bf00      	nop
 8000dd2:	2106      	movs	r1, #6
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f7ff fcdd 	bl	8000794 <I2C_GetFlagSTATUS>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f8      	beq.n	8000dd2 <MCAL_I2C_Master_TX+0x92>

	if(Stop == WithStop)
 8000de0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d103      	bne.n	8000df0 <MCAL_I2C_Master_TX+0xb0>
	{
		//8. Send Stop Condition
		I2C_GenerateSTOP(I2Cx,ENABLE);
 8000de8:	2101      	movs	r1, #1
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f7ff fda4 	bl	8000938 <I2C_GenerateSTOP>
	}

}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	00070080 	.word	0x00070080

08000dfc <MCAL_I2C_Master_RX>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_Master_RX(I2C_TypeDef *I2Cx, uint16_t DevAddr ,uint8_t* dataOut , uint32_t datalen , Stop_Condition Stop , Repeated_Start Start)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4a34      	ldr	r2, [pc, #208]	; (8000ee4 <MCAL_I2C_Master_RX+0xe8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	bf14      	ite	ne
 8000e18:	2301      	movne	r3, #1
 8000e1a:	2300      	moveq	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	74fb      	strb	r3, [r7, #19]

	//1. Set The START bit in the I2C_CR1 register to generate a start condition
	I2C_GenerateSTART(I2Cx, ENABLE, Start);
 8000e20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e24:	461a      	mov	r2, r3
 8000e26:	2101      	movs	r1, #1
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f7ff fd5e 	bl	80008ea <I2C_GenerateSTART>

	//2. Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_GetFlagSTATUS(I2Cx, EV5));
 8000e2e:	bf00      	nop
 8000e30:	2101      	movs	r1, #1
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f7ff fcae 	bl	8000794 <I2C_GetFlagSTATUS>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f8      	beq.n	8000e30 <MCAL_I2C_Master_RX+0x34>

	//3. Send Address
	I2C_SendAddress(I2Cx, DevAddr, I2C_Direction_Receiver);
 8000e3e:	897b      	ldrh	r3, [r7, #10]
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	68f8      	ldr	r0, [r7, #12]
 8000e46:	f7ff fd92 	bl	800096e <I2C_SendAddress>

	//4. Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagSTATUS(I2Cx, EV6));
 8000e4a:	bf00      	nop
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f7ff fca0 	bl	8000794 <I2C_GetFlagSTATUS>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f8      	beq.n	8000e4c <MCAL_I2C_Master_RX+0x50>

	I2C_AcknowledgeConfig(I2Cx , ENABLE);
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fd29 	bl	80008b4 <I2C_AcknowledgeConfig>

	if(datalen)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d01c      	beq.n	8000ea2 <MCAL_I2C_Master_RX+0xa6>
	{
		//Read Until Data Length become Zero
		for(i = datalen ; i > 1 ; i--)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e012      	b.n	8000e94 <MCAL_I2C_Master_RX+0x98>
		{
			//5. Wait Until RxNE become 1
			//EV5: RxNE = 1 Cleared by Reading DR Register
			while(!I2C_GetFlagSTATUS(I2Cx, EV7));
 8000e6e:	bf00      	nop
 8000e70:	2103      	movs	r1, #3
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f7ff fc8e 	bl	8000794 <I2C_GetFlagSTATUS>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f8      	beq.n	8000e70 <MCAL_I2C_Master_RX+0x74>
			//read the data from data register
			*dataOut = I2Cx->DR ;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			dataOut++;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	607b      	str	r3, [r7, #4]
		for(i = datalen ; i > 1 ; i--)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	dce9      	bgt.n	8000e6e <MCAL_I2C_Master_RX+0x72>
		}
		I2C_AcknowledgeConfig(I2Cx , DISABLE);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	f7ff fd09 	bl	80008b4 <I2C_AcknowledgeConfig>
	}

	if(Stop == WithStop)
 8000ea2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d103      	bne.n	8000eb2 <MCAL_I2C_Master_RX+0xb6>
	{
		//6. Send Stop Condition
		I2C_GenerateSTOP(I2Cx,ENABLE);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f7ff fd43 	bl	8000938 <I2C_GenerateSTOP>
	}

	//7. re-enable The Acknowledging
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_ACK_Enable)
 8000eb2:	7cfa      	ldrb	r2, [r7, #19]
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <MCAL_I2C_Master_RX+0xec>)
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3318      	adds	r3, #24
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec8:	d104      	bne.n	8000ed4 <MCAL_I2C_Master_RX+0xd8>
	{
		I2C_AcknowledgeConfig(I2Cx , ENABLE);
 8000eca:	2101      	movs	r1, #1
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff fcf1 	bl	80008b4 <I2C_AcknowledgeConfig>
	}
	else
	{
		I2C_AcknowledgeConfig(I2Cx , DISABLE);
	}
}
 8000ed2:	e003      	b.n	8000edc <MCAL_I2C_Master_RX+0xe0>
		I2C_AcknowledgeConfig(I2Cx , DISABLE);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f7ff fcec 	bl	80008b4 <I2C_AcknowledgeConfig>
}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	20000058 	.word	0x20000058

08000eec <I2C1_EV_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void I2C1_EV_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx =I2C1 ;
 8000ef6:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <I2C1_EV_IRQHandler+0xe0>)
 8000ef8:	617b      	str	r3, [r7, #20]
	//Interrupt Handler for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f02:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f0c:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00c      	beq.n	8000f38 <I2C1_EV_IRQHandler+0x4c>
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d009      	beq.n	8000f38 <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummyRead = I2Cx->SR1;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000f30:	2100      	movs	r1, #0
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff fd3a 	bl	80009ac <Slave_States>
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d012      	beq.n	8000f6e <I2C1_EV_IRQHandler+0x82>
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00f      	beq.n	8000f6e <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d109      	bne.n	8000f6e <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummyRead = I2Cx->SR1;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000f66:	2102      	movs	r1, #2
 8000f68:	6978      	ldr	r0, [r7, #20]
 8000f6a:	f7ff fd1f 	bl	80009ac <Slave_States>
		}
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00c      	beq.n	8000f98 <I2C1_EV_IRQHandler+0xac>
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d009      	beq.n	8000f98 <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000f90:	2103      	movs	r1, #3
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff fd0a 	bl	80009ac <Slave_States>
		}
	}
	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa0:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00c      	beq.n	8000fc2 <I2C1_EV_IRQHandler+0xd6>
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d009      	beq.n	8000fc2 <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d103      	bne.n	8000fc2 <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000fba:	2104      	movs	r1, #4
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f7ff fcf5 	bl	80009ac <Slave_States>
		}
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40005400 	.word	0x40005400

08000fd0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
//			//Slave mode
//			Slave_States(I2Cx,I2C_EV_DATA_RCV);
//		}
//	}

}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d006      	beq.n	8001014 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8001006:	2b01      	cmp	r3, #1
 8001008:	d302      	bcc.n	8001010 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 800100a:	2b02      	cmp	r3, #2
 800100c:	d004      	beq.n	8001018 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 800100e:	e005      	b.n	800101c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8001012:	e003      	b.n	800101c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8001016:	e001      	b.n	800101c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800101a:	e7ff      	b.n	800101c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000
 8001028:	007a1200 	.word	0x007a1200
 800102c:	00f42400 	.word	0x00f42400

08001030 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 8001034:	f7ff ffde 	bl	8000ff4 <MCAL_RCC_GetSYS_CLCKFreq>
 8001038:	4601      	mov	r1, r0
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <MCAL_RCC_GetHCLKFreq+0x20>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	4a03      	ldr	r2, [pc, #12]	; (8001054 <MCAL_RCC_GetHCLKFreq+0x24>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	080011e4 	.word	0x080011e4

08001058 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 800105c:	f7ff ffe8 	bl	8001030 <MCAL_RCC_GetHCLKFreq>
 8001060:	4601      	mov	r1, r0
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	4a03      	ldr	r2, [pc, #12]	; (800107c <MCAL_RCC_GetPCLK1Freq+0x24>)
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	080011dc 	.word	0x080011dc

08001080 <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <SPI1_IRQHandler+0x54>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	085b      	lsrs	r3, r3, #1
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	793b      	ldrb	r3, [r7, #4]
 8001094:	f362 0300 	bfi	r3, r2, #0, #1
 8001098:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <SPI1_IRQHandler+0x54>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	793b      	ldrb	r3, [r7, #4]
 80010a6:	f362 0341 	bfi	r3, r2, #1, #1
 80010aa:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <SPI1_IRQHandler+0x54>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	793b      	ldrb	r3, [r7, #4]
 80010ba:	f362 0382 	bfi	r3, r2, #2, #1
 80010be:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SPI1_IRQHandler+0x58>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	7938      	ldrb	r0, [r7, #4]
 80010c8:	4798      	blx	r3
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40013000 	.word	0x40013000
 80010d8:	200000a0 	.word	0x200000a0

080010dc <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <SPI2_IRQHandler+0x54>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	793b      	ldrb	r3, [r7, #4]
 80010f0:	f362 0300 	bfi	r3, r2, #0, #1
 80010f4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <SPI2_IRQHandler+0x54>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	793b      	ldrb	r3, [r7, #4]
 8001102:	f362 0341 	bfi	r3, r2, #1, #1
 8001106:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <SPI2_IRQHandler+0x54>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	793b      	ldrb	r3, [r7, #4]
 8001116:	f362 0382 	bfi	r3, r2, #2, #1
 800111a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SPI2_IRQHandler+0x58>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	7938      	ldrb	r0, [r7, #4]
 8001124:	4798      	blx	r3
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40013000 	.word	0x40013000
 8001134:	200000a0 	.word	0x200000a0

08001138 <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler (void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <USART1_IRQHandler+0x10>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4798      	blx	r3
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000a8 	.word	0x200000a8

0800114c <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <USART2_IRQHandler+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	4798      	blx	r3
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200000a8 	.word	0x200000a8

08001160 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <USART3_IRQHandler+0x10>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4798      	blx	r3
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200000a8 	.word	0x200000a8

08001174 <__libc_init_array>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	2500      	movs	r5, #0
 8001178:	4e0c      	ldr	r6, [pc, #48]	; (80011ac <__libc_init_array+0x38>)
 800117a:	4c0d      	ldr	r4, [pc, #52]	; (80011b0 <__libc_init_array+0x3c>)
 800117c:	1ba4      	subs	r4, r4, r6
 800117e:	10a4      	asrs	r4, r4, #2
 8001180:	42a5      	cmp	r5, r4
 8001182:	d109      	bne.n	8001198 <__libc_init_array+0x24>
 8001184:	f000 f81a 	bl	80011bc <_init>
 8001188:	2500      	movs	r5, #0
 800118a:	4e0a      	ldr	r6, [pc, #40]	; (80011b4 <__libc_init_array+0x40>)
 800118c:	4c0a      	ldr	r4, [pc, #40]	; (80011b8 <__libc_init_array+0x44>)
 800118e:	1ba4      	subs	r4, r4, r6
 8001190:	10a4      	asrs	r4, r4, #2
 8001192:	42a5      	cmp	r5, r4
 8001194:	d105      	bne.n	80011a2 <__libc_init_array+0x2e>
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800119c:	4798      	blx	r3
 800119e:	3501      	adds	r5, #1
 80011a0:	e7ee      	b.n	8001180 <__libc_init_array+0xc>
 80011a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011a6:	4798      	blx	r3
 80011a8:	3501      	adds	r5, #1
 80011aa:	e7f2      	b.n	8001192 <__libc_init_array+0x1e>
 80011ac:	080011f4 	.word	0x080011f4
 80011b0:	080011f4 	.word	0x080011f4
 80011b4:	080011f4 	.word	0x080011f4
 80011b8:	080011f8 	.word	0x080011f8

080011bc <_init>:
 80011bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011be:	bf00      	nop
 80011c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011c2:	bc08      	pop	{r3}
 80011c4:	469e      	mov	lr, r3
 80011c6:	4770      	bx	lr

080011c8 <_fini>:
 80011c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ca:	bf00      	nop
 80011cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ce:	bc08      	pop	{r3}
 80011d0:	469e      	mov	lr, r3
 80011d2:	4770      	bx	lr
