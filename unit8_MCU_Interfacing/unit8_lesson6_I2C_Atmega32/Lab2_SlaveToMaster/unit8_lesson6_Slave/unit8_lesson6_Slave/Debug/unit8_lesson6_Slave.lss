
unit8_lesson6_I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081b  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000622  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000447  00000000  00000000  00001051  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042f  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000130  00000000  00000000  000019af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	u8 ch = 0 ;
	TWI_initSlave(0b01010000); 
  6c:	80 e5       	ldi	r24, 0x50	; 80
  6e:	0e 94 44 00 	call	0x88	; 0x88 <TWI_initSlave>
#include "DIO_interface.h"


int main(void)
{
	u8 ch = 0 ;
  72:	c0 e0       	ldi	r28, 0x00	; 0
	TWI_initSlave(0b01010000); 
    while (1) 
    {
	   TWI_Slave_Read(1) ;  
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	0e 94 52 00 	call	0xa4	; 0xa4 <TWI_Slave_Read>
	   TWI_Slave_Write(ch++) ;
  7a:	d1 e0       	ldi	r29, 0x01	; 1
  7c:	dc 0f       	add	r29, r28
  7e:	8c 2f       	mov	r24, r28
  80:	0e 94 58 00 	call	0xb0	; 0xb0 <TWI_Slave_Write>
  84:	cd 2f       	mov	r28, r29
  86:	f6 cf       	rjmp	.-20     	; 0x74 <main+0x8>

00000088 <TWI_initSlave>:
	
	// Check ACK == Master Receiced Data ACK
	while((TWSR & 0xF8) != 0x50);
	
	// Read Data From Data Register
	*returnedData = TWDR ; 
  88:	88 23       	and	r24, r24
  8a:	5c f0       	brlt	.+22     	; 0xa2 <TWI_initSlave+0x1a>
  8c:	88 0f       	add	r24, r24
  8e:	82 b9       	out	0x02, r24	; 2
  90:	82 b1       	in	r24, 0x02	; 2
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	82 b9       	out	0x02, r24	; 2
  96:	86 b7       	in	r24, 0x36	; 54
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	86 bf       	out	0x36, r24	; 54
  9c:	86 b7       	in	r24, 0x36	; 54
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	86 bf       	out	0x36, r24	; 54
  a2:	08 95       	ret

000000a4 <TWI_Slave_Read>:
}

unsigned char TWI_Slave_Read(unsigned char ack)
{
	unsigned char x=0;
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  a4:	84 ec       	ldi	r24, 0xC4	; 196
  a6:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 0x80) == 0);
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <TWI_Slave_Read+0x4>
	
}
  ae:	08 95       	ret

000000b0 <TWI_Slave_Write>:
 
 void TWI_Slave_Write(unsigned char cByte)
 {
	 TWDR = cByte;
  b0:	83 b9       	out	0x03, r24	; 3
	 TWCR = (1<<TWINT)|(1<<TWEN);
  b2:	84 e8       	ldi	r24, 0x84	; 132
  b4:	86 bf       	out	0x36, r24	; 54
	 while ((TWCR & 0x80)==0);
  b6:	06 b6       	in	r0, 0x36	; 54
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <TWI_Slave_Write+0x6>
  bc:	08 95       	ret

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
