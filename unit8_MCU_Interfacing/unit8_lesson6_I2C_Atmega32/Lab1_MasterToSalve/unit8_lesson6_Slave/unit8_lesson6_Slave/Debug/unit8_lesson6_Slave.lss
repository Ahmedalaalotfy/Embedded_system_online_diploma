
unit8_lesson6_I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a9c  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000853  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000058c  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setPortDirection>:

/* PORTS APIS*/ 
void DIO_setPortDirection(u8 PortId , u8 PortDirection ) 

{
	if ( (PortId<=3) && ( (DIO_PORT_INPUT == PortDirection) || (DIO_PORT_OUTPUT == PortDirection) ) ) 
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	38 f5       	brcc	.+78     	; 0xbe <DIO_setPortDirection+0x52>
  70:	9f ef       	ldi	r25, 0xFF	; 255
  72:	96 0f       	add	r25, r22
  74:	9e 3f       	cpi	r25, 0xFE	; 254
  76:	18 f1       	brcs	.+70     	; 0xbe <DIO_setPortDirection+0x52>
	{
		switch (PortId) 
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	69 f0       	breq	.+26     	; 0x96 <DIO_setPortDirection+0x2a>
  7c:	28 f0       	brcs	.+10     	; 0x88 <DIO_setPortDirection+0x1c>
  7e:	82 30       	cpi	r24, 0x02	; 2
  80:	89 f0       	breq	.+34     	; 0xa4 <DIO_setPortDirection+0x38>
  82:	83 30       	cpi	r24, 0x03	; 3
  84:	b1 f0       	breq	.+44     	; 0xb2 <DIO_setPortDirection+0x46>
  86:	08 95       	ret
		{
			case 0 : // PORTA 
			if (DIO_PORT_OUTPUT == PortDirection)
  88:	6f 3f       	cpi	r22, 0xFF	; 255
  8a:	19 f4       	brne	.+6      	; 0x92 <DIO_setPortDirection+0x26>
			{
				DDRA = 0xff ; 
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	8a bb       	out	0x1a, r24	; 26
  90:	08 95       	ret
			}
			else 
			{
				DDRA = 0x00 ; 
  92:	1a ba       	out	0x1a, r1	; 26
  94:	08 95       	ret
			}
			break ;
			
			case 1: // PORTB
			if (DIO_PORT_OUTPUT == PortDirection)
  96:	6f 3f       	cpi	r22, 0xFF	; 255
  98:	19 f4       	brne	.+6      	; 0xa0 <DIO_setPortDirection+0x34>
			{
				DDRB= 0xff ; 
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	87 bb       	out	0x17, r24	; 23
  9e:	08 95       	ret
			}
			else 
			{
				DDRB = 0x00 ; 
  a0:	17 ba       	out	0x17, r1	; 23
  a2:	08 95       	ret
			}
			break ;
			
			case 2 : // PORTC 
			if (DIO_PORT_OUTPUT == PortDirection)
  a4:	6f 3f       	cpi	r22, 0xFF	; 255
  a6:	19 f4       	brne	.+6      	; 0xae <DIO_setPortDirection+0x42>
			{
				DDRC = 0xff ; 
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
  ac:	08 95       	ret
			}
			else 
			{
				DDRC = 0x00 ; 
  ae:	14 ba       	out	0x14, r1	; 20
  b0:	08 95       	ret
			}
			break ;
			
			case 3 : // PORTD 
			if (DIO_PORT_OUTPUT == PortDirection)
  b2:	6f 3f       	cpi	r22, 0xFF	; 255
  b4:	19 f4       	brne	.+6      	; 0xbc <DIO_setPortDirection+0x50>
			{
				DDRD = 0xff ; 
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	81 bb       	out	0x11, r24	; 17
  ba:	08 95       	ret
			}
			else 
			{
				DDRD = 0x00 ; 
  bc:	11 ba       	out	0x11, r1	; 17
  be:	08 95       	ret

000000c0 <main>:


int main(void)
{
	//u8 Data ;
	DIO_setPortDirection(PORTA,DIO_PORT_OUTPUT); 
  c0:	8b b3       	in	r24, 0x1b	; 27
  c2:	6f ef       	ldi	r22, 0xFF	; 255
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPortDirection>
	TWI_initSlave(0b01010000); 
  c8:	80 e5       	ldi	r24, 0x50	; 80
  ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <TWI_initSlave>
    
    while (1) 
    {
		PORTA = TWI_Slave_Read(1) ;  
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 7a 00 	call	0xf4	; 0xf4 <TWI_Slave_Read>
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	fb cf       	rjmp	.-10     	; 0xce <main+0xe>

000000d8 <TWI_initSlave>:
	
	// Check ACK == Master Receiced Data ACK
	while((TWSR & 0xF8) != 0x50);
	
	// Read Data From Data Register
	*returnedData = TWDR ; 
  d8:	88 23       	and	r24, r24
  da:	5c f0       	brlt	.+22     	; 0xf2 <TWI_initSlave+0x1a>
  dc:	88 0f       	add	r24, r24
  de:	82 b9       	out	0x02, r24	; 2
  e0:	82 b1       	in	r24, 0x02	; 2
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	82 b9       	out	0x02, r24	; 2
  e6:	86 b7       	in	r24, 0x36	; 54
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	86 bf       	out	0x36, r24	; 54
  ec:	86 b7       	in	r24, 0x36	; 54
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	86 bf       	out	0x36, r24	; 54
  f2:	08 95       	ret

000000f4 <TWI_Slave_Read>:
}

unsigned char TWI_Slave_Read(unsigned char ack)
 {
 	unsigned char x=0;
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  f4:	84 ec       	ldi	r24, 0xC4	; 196
  f6:	86 bf       	out	0x36, r24	; 54
 	while ((TWCR & 1<<7) == 0);
  f8:	06 b6       	in	r0, 0x36	; 54
  fa:	07 fe       	sbrs	r0, 7
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <TWI_Slave_Read+0x4>
  fe:	01 c0       	rjmp	.+2      	; 0x102 <TWI_Slave_Read+0xe>
 	while ((TWSR) != 0x60) x = TWSR;             // own SLA+W(0) has been transmitted and ACK has been returned
 100:	81 b1       	in	r24, 0x01	; 1
 102:	81 b1       	in	r24, 0x01	; 1
 104:	80 36       	cpi	r24, 0x60	; 96
 106:	e1 f7       	brne	.-8      	; 0x100 <TWI_Slave_Read+0xc>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 108:	84 ec       	ldi	r24, 0xC4	; 196
 10a:	86 bf       	out	0x36, r24	; 54
 	while ((TWCR & 1<<7) == 0);
 10c:	06 b6       	in	r0, 0x36	; 54
 10e:	07 fe       	sbrs	r0, 7
 110:	fd cf       	rjmp	.-6      	; 0x10c <TWI_Slave_Read+0x18>
 112:	01 c0       	rjmp	.+2      	; 0x116 <TWI_Slave_Read+0x22>
	while ((TWSR) != 0x80) x = TWSR;          // Data has been transmitted and ACK has been returned
 114:	81 b1       	in	r24, 0x01	; 1
 116:	81 b1       	in	r24, 0x01	; 1
 118:	80 38       	cpi	r24, 0x80	; 128
 11a:	e1 f7       	brne	.-8      	; 0x114 <TWI_Slave_Read+0x20>
	return TWDR;
 11c:	83 b1       	in	r24, 0x03	; 3
 11e:	08 95       	ret

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
