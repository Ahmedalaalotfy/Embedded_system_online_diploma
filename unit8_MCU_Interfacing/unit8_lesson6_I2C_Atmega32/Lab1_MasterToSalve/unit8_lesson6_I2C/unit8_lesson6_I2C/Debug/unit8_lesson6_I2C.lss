
unit8_lesson6_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000839  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062d  00000000  00000000  00000ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000467  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000135  00000000  00000000  00001a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001bd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "DIO_interface.h"


int main(void)
{
    TWI_initMaster(); 
  6c:	0e 94 55 00 	call	0xaa	; 0xaa <TWI_initMaster>
	
   unsigned char ch = 0  ;
  70:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	2f e3       	ldi	r18, 0x3F	; 63
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	93 e0       	ldi	r25, 0x03	; 3
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	80 40       	sbci	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <main+0xc>
  80:	00 c0       	rjmp	.+0      	; 0x82 <main+0x16>
  82:	00 00       	nop
   
   while (1)
   {
	 _delay_ms(1000);
	 TWI_sendStartCondition();
  84:	0e 94 64 00 	call	0xc8	; 0xc8 <TWI_sendStartCondition>
	 TWI_sendSlaveAddWithWrite(0b01010000);
  88:	80 e5       	ldi	r24, 0x50	; 80
  8a:	0e 94 79 00 	call	0xf2	; 0xf2 <TWI_sendSlaveAddWithWrite>
    // for (ch = 0 ; ch < 100 ; ch ++)
	 while((TWSR & 0xF8) != 0x28)	
  8e:	06 c0       	rjmp	.+12     	; 0x9c <main+0x30>
	 {
		 TWI_sendMasterDataByte(ch++);
  90:	d1 e0       	ldi	r29, 0x01	; 1
  92:	dc 0f       	add	r29, r28
  94:	8c 2f       	mov	r24, r28
  96:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_sendMasterDataByte>
  9a:	cd 2f       	mov	r28, r29
   {
	 _delay_ms(1000);
	 TWI_sendStartCondition();
	 TWI_sendSlaveAddWithWrite(0b01010000);
    // for (ch = 0 ; ch < 100 ; ch ++)
	 while((TWSR & 0xF8) != 0x28)	
  9c:	81 b1       	in	r24, 0x01	; 1
  9e:	88 7f       	andi	r24, 0xF8	; 248
  a0:	88 32       	cpi	r24, 0x28	; 40
  a2:	b1 f7       	brne	.-20     	; 0x90 <main+0x24>
	 {
		 TWI_sendMasterDataByte(ch++);
	 } 
	 
	            	 
	 TWI_sendStopCondition();
  a4:	0e 94 72 00 	call	0xe4	; 0xe4 <TWI_sendStopCondition>
    }
  a8:	e4 cf       	rjmp	.-56     	; 0x72 <main+0x6>

000000aa <TWI_initMaster>:
   	
   	// Wait For Flag
   	while (0==GET_BIT(TWCR,7));
   	
   	// Check ACK == Master Transmit (Slave Address + Read Request) ACK
   	while((TWSR & 0xF8) != 0x40);
  aa:	81 b1       	in	r24, 0x01	; 1
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	81 b9       	out	0x01, r24	; 1
  b0:	81 b1       	in	r24, 0x01	; 1
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	81 b9       	out	0x01, r24	; 1
  b6:	88 e4       	ldi	r24, 0x48	; 72
  b8:	80 b9       	out	0x00, r24	; 0
  ba:	86 b7       	in	r24, 0x36	; 54
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	86 bf       	out	0x36, r24	; 54
  c0:	86 b7       	in	r24, 0x36	; 54
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	86 bf       	out	0x36, r24	; 54
  c6:	08 95       	ret

000000c8 <TWI_sendStartCondition>:
  c8:	86 b7       	in	r24, 0x36	; 54
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	86 bf       	out	0x36, r24	; 54
  ce:	86 b7       	in	r24, 0x36	; 54
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	86 bf       	out	0x36, r24	; 54
  d4:	06 b6       	in	r0, 0x36	; 54
  d6:	07 fe       	sbrs	r0, 7
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <TWI_sendStartCondition+0xc>
  da:	81 b1       	in	r24, 0x01	; 1
  dc:	88 7f       	andi	r24, 0xF8	; 248
  de:	88 30       	cpi	r24, 0x08	; 8
  e0:	e1 f7       	brne	.-8      	; 0xda <TWI_sendStartCondition+0x12>
  e2:	08 95       	ret

000000e4 <TWI_sendStopCondition>:
  e4:	86 b7       	in	r24, 0x36	; 54
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	86 bf       	out	0x36, r24	; 54
  ea:	86 b7       	in	r24, 0x36	; 54
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	86 bf       	out	0x36, r24	; 54
  f0:	08 95       	ret

000000f2 <TWI_sendSlaveAddWithWrite>:
  f2:	88 23       	and	r24, r24
  f4:	94 f0       	brlt	.+36     	; 0x11a <TWI_sendSlaveAddWithWrite+0x28>
  f6:	88 0f       	add	r24, r24
  f8:	83 b9       	out	0x03, r24	; 3
  fa:	83 b1       	in	r24, 0x03	; 3
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	83 b9       	out	0x03, r24	; 3
 100:	86 b7       	in	r24, 0x36	; 54
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	86 bf       	out	0x36, r24	; 54
 106:	86 b7       	in	r24, 0x36	; 54
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	86 bf       	out	0x36, r24	; 54
 10c:	06 b6       	in	r0, 0x36	; 54
 10e:	07 fe       	sbrs	r0, 7
 110:	fd cf       	rjmp	.-6      	; 0x10c <TWI_sendSlaveAddWithWrite+0x1a>
 112:	81 b1       	in	r24, 0x01	; 1
 114:	88 7f       	andi	r24, 0xF8	; 248
 116:	88 31       	cpi	r24, 0x18	; 24
 118:	e1 f7       	brne	.-8      	; 0x112 <TWI_sendSlaveAddWithWrite+0x20>
 11a:	08 95       	ret

0000011c <TWI_sendMasterDataByte>:
}

void TWI_sendMasterDataByte(u8 data)
{
	// Write Data Into Data Register 
	TWDR = data ; 
 11c:	83 b9       	out	0x03, r24	; 3
	
	// Clear Flag To Start Current Job
	SET_BIT(TWCR,7);
 11e:	86 b7       	in	r24, 0x36	; 54
 120:	80 68       	ori	r24, 0x80	; 128
 122:	86 bf       	out	0x36, r24	; 54
	
	// Wait For Flag
	while (0==GET_BIT(TWCR,7));
 124:	06 b6       	in	r0, 0x36	; 54
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <TWI_sendMasterDataByte+0x8>
	
	// Check ACK == Master Transmit Data ACK
	while((TWSR & 0xF8) != 0x28);
 12a:	81 b1       	in	r24, 0x01	; 1
 12c:	88 7f       	andi	r24, 0xF8	; 248
 12e:	88 32       	cpi	r24, 0x28	; 40
 130:	e1 f7       	brne	.-8      	; 0x12a <TWI_sendMasterDataByte+0xe>
	
}
 132:	08 95       	ret

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
