<<<<<<< HEAD

unit8_lesson2_Section.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000574  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000574  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b1c  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090c  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d02  00000000  00000000  00002bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c8  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000626  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eaf  00000000  00000000  000041be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  0000506d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 26 02 	call	0x44c	; 0x44c <main>
  7a:	0c 94 b8 02 	jmp	0x570	; 0x570 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_setPinDirection>:
/* PINS APIS*/ 

void DIO_setPinDirection(u8 PortId, u8 PinId , u8 PinDirection ) 

{
 if ( (PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT ) || (PinDirection == DIO_PIN_INPUT)) )
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0x6>
  86:	72 c0       	rjmp	.+228    	; 0x16c <DIO_setPinDirection+0xea>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0xc>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_setPinDirection+0xea>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_setPinDirection+0x12>
  92:	6c c0       	rjmp	.+216    	; 0x16c <DIO_setPinDirection+0xea>
 { 
	switch (PortId)  // DIO PORTA
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	01 f1       	breq	.+64     	; 0xd8 <DIO_setPinDirection+0x56>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_setPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b1 f1       	breq	.+108    	; 0x10a <DIO_setPinDirection+0x88>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_setPinDirection+0x22>
  a2:	4c c0       	rjmp	.+152    	; 0x13c <DIO_setPinDirection+0xba>
  a4:	08 95       	ret
	{
		case 0 : 
		if (DIO_PIN_OUTPUT == PinDirection)
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	59 f4       	brne	.+22     	; 0xc0 <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x30>
  ba:	82 2b       	or	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,PinId);
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_setPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_setPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
		}
		break ;
		
		case 1 : // DIO PORTB 
		if (DIO_PIN_OUTPUT == PinDirection)
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x66>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x62>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB,PinId);
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_setPinDirection+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_setPinDirection+0x78>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
		}
		break ;
		
		case 2 : // DIO PORTC 
		if (DIO_PIN_OUTPUT == PinDirection)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0x94>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC,PinId);
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDirection+0xaa>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
		}
		break ;
		
		case 3 : // DIO PORTD 
		if (DIO_PIN_OUTPUT == PinDirection)
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xc6>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD,PinId);
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_setPinValue>:
}

void DIO_setPinValue(u8 PortId, u8 PinId , u8 PinValue)

{
	 if ( (PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH ) || (PinValue == DIO_PIN_LOW)) )
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_setPinValue+0x6>
 172:	72 c0       	rjmp	.+228    	; 0x258 <DIO_setPinValue+0xea>
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_setPinValue+0xc>
 178:	6f c0       	rjmp	.+222    	; 0x258 <DIO_setPinValue+0xea>
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	08 f0       	brcs	.+2      	; 0x180 <DIO_setPinValue+0x12>
 17e:	6c c0       	rjmp	.+216    	; 0x258 <DIO_setPinValue+0xea>
	 {
		 switch (PortId) 
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <DIO_setPinValue+0x56>
 184:	30 f0       	brcs	.+12     	; 0x192 <DIO_setPinValue+0x24>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <DIO_setPinValue+0x88>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_setPinValue+0x22>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <DIO_setPinValue+0xba>
 190:	08 95       	ret
		 {
			 case 0 : // DIO_PORTA
			 if (DIO_PIN_HIGH==PinValue)
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_setPinValue+0x3e>
			 {
			    SET_BIT(PORTA,PinId);
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x34>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x30>
 1a6:	82 2b       	or	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTA,PinId) ; 
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinValue+0x4a>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinValue+0x46>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
			 }
			 break ; 
			 
			 case 1 : // DIO_PORTB
			 if (DIO_PIN_HIGH==PinValue)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_setPinValue+0x70>
			 {
			    SET_BIT(PORTB,PinId);
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x66>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x62>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTB,PinId) ; 
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x7c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x78>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
			 }
			 break ; 
			 
			 case 2 : // DIO_PORTC
			 if (DIO_PIN_HIGH==PinValue)
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <DIO_setPinValue+0xa2>
			 {
			    SET_BIT(PORTC,PinId);
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0x98>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0x94>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTC,PinId) ; 
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinValue+0xae>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinValue+0xaa>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
			 }
			 break ; 
			 
			 case 3 : // DIO_PORTD
			 if (DIO_PIN_HIGH==PinValue)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_setPinValue+0xd4>
			 {
			    SET_BIT(PORTD,PinId);
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xca>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xc6>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTD,PinId) ; 
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_setPinValue+0xe0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_setPinValue+0xdc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <writeHalfPort>:
	
	#endif
}

static void writeHalfPort(u8 Value)
{
 25a:	cf 93       	push	r28
 25c:	c8 2f       	mov	r28, r24
	if (1==GET_BIT(Value,0))
 25e:	80 ff       	sbrs	r24, 0
 260:	06 c0       	rjmp	.+12     	; 0x26e <writeHalfPort+0x14>
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_HIGH);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 26c:	05 c0       	rjmp	.+10     	; 0x278 <writeHalfPort+0x1e>
	}
	else 
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,1))
 278:	c1 ff       	sbrs	r28, 1
 27a:	06 c0       	rjmp	.+12     	; 0x288 <writeHalfPort+0x2e>
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_HIGH);
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	65 e0       	ldi	r22, 0x05	; 5
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 286:	05 c0       	rjmp	.+10     	; 0x292 <writeHalfPort+0x38>
	}
	else
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_LOW);
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	65 e0       	ldi	r22, 0x05	; 5
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,2))
 292:	c2 ff       	sbrs	r28, 2
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <writeHalfPort+0x48>
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_HIGH);
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	66 e0       	ldi	r22, 0x06	; 6
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <writeHalfPort+0x52>
	}
	else
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_LOW);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	66 e0       	ldi	r22, 0x06	; 6
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,3))
 2ac:	c3 ff       	sbrs	r28, 3
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <writeHalfPort+0x62>
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_HIGH);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	67 e0       	ldi	r22, 0x07	; 7
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <writeHalfPort+0x6c>
	}
	else
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_LOW);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	67 e0       	ldi	r22, 0x07	; 7
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
}
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_sendCmnd>:
	
}

void LCD_sendCmnd(u8 Cmnd)

{
 2ca:	cf 93       	push	r28
 2cc:	c8 2f       	mov	r28, r24
	// set RS pin = 0 ( write command) 
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	
	// Write the most 4-bit command on data pins
	writeHalfPort(Cmnd>>4);
 2e2:	8c 2f       	mov	r24, r28
 2e4:	82 95       	swap	r24
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_sendCmnd+0x30>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_sendCmnd+0x36>
 300:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	63 e0       	ldi	r22, 0x03	; 3
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// Write the Least 4-bit command on data pins
	writeHalfPort(Cmnd);
 30c:	8c 2f       	mov	r24, r28
 30e:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 31c:	8f e9       	ldi	r24, 0x9F	; 159
 31e:	9f e0       	ldi	r25, 0x0F	; 15
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_sendCmnd+0x56>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_sendCmnd+0x5c>
 326:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	63 e0       	ldi	r22, 0x03	; 3
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	#endif 
	
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <LCD_init>:
 336:	2f e7       	ldi	r18, 0x7F	; 127
 338:	85 eb       	ldi	r24, 0xB5	; 181
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <LCD_init+0x6>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_init+0x10>
 346:	00 00       	nop
	#if LCD_MODE == LCD_8_BIT_MODE
	LCD_sendCmnd(0b00111000); // Function Set command 2*16 LCD
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	// set RS pin = 0 ( write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	writeHalfPort(0b0010);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
	
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 36c:	8f e9       	ldi	r24, 0x9F	; 159
 36e:	9f e0       	ldi	r25, 0x0F	; 15
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_init+0x3a>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_init+0x40>
 376:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	63 e0       	ldi	r22, 0x03	; 3
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	LCD_sendCmnd(0b00101000);
 382:	88 e2       	ldi	r24, 0x28	; 40
 384:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 388:	90 ef       	ldi	r25, 0xF0	; 240
 38a:	9a 95       	dec	r25
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_init+0x54>
	#endif
	
	_delay_us(45);
	
	// display on , cursor off , blink on 
	LCD_sendCmnd(0b00001101);
 38e:	8d e0       	ldi	r24, 0x0D	; 13
 390:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_sendCmnd>
 394:	20 ef       	ldi	r18, 0xF0	; 240
 396:	2a 95       	dec	r18
 398:	f1 f7       	brne	.-4      	; 0x396 <LCD_init+0x60>
	_delay_us(45);
	
	// clear display 
	LCD_sendCmnd(0b00000001);
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	8f e3       	ldi	r24, 0x3F	; 63
 3a2:	9f e1       	ldi	r25, 0x1F	; 31
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_init+0x6e>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCD_init+0x74>
 3aa:	00 00       	nop
	_delay_ms(2);
	
	// set entry mode 
	LCD_sendCmnd(0b00000110);
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_sendCmnd>
 3b2:	08 95       	ret

000003b4 <LCD_sendChar>:
	
}

void LCD_sendChar(u8 Data)

{
 3b4:	cf 93       	push	r28
 3b6:	c8 2f       	mov	r28, r24
	// set RS pin = 1 ( write Data)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	
	// Write the most 4-bit Data on data pins
	writeHalfPort(Data>>4);
 3cc:	8c 2f       	mov	r24, r28
 3ce:	82 95       	swap	r24
 3d0:	8f 70       	andi	r24, 0x0F	; 15
 3d2:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
	
	 /* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	63 e0       	ldi	r22, 0x03	; 3
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3e0:	8f e9       	ldi	r24, 0x9F	; 159
 3e2:	9f e0       	ldi	r25, 0x0F	; 15
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <LCD_sendChar+0x30>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <LCD_sendChar+0x36>
 3ea:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	63 e0       	ldi	r22, 0x03	; 3
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// Write the Least 4-bit Data on data pins
	writeHalfPort(Data);
 3f6:	8c 2f       	mov	r24, r28
 3f8:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
	
	 /* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 406:	8f e9       	ldi	r24, 0x9F	; 159
 408:	9f e0       	ldi	r25, 0x0F	; 15
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	63 e0       	ldi	r22, 0x03	; 3
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	#endif
}
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <LCD_sendString>:
	}
}

void LCD_sendString(u8 *String)

{
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
	if(String != NULL)
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	29 f4       	brne	.+10     	; 0x434 <LCD_sendString+0x14>
 42a:	0c c0       	rjmp	.+24     	; 0x444 <LCD_sendString+0x24>
	{
		u8 stringLength = 0;
		while(String[stringLength] != '\0')
		{
			LCD_sendChar(String[stringLength]);
 42c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_sendChar>
			++stringLength;
 430:	cf 5f       	subi	r28, 0xFF	; 255
 432:	02 c0       	rjmp	.+4      	; 0x438 <LCD_sendString+0x18>
 434:	8c 01       	movw	r16, r24
 436:	c0 e0       	ldi	r28, 0x00	; 0

{
	if(String != NULL)
	{
		u8 stringLength = 0;
		while(String[stringLength] != '\0')
 438:	f8 01       	movw	r30, r16
 43a:	ec 0f       	add	r30, r28
 43c:	f1 1d       	adc	r31, r1
 43e:	80 81       	ld	r24, Z
 440:	81 11       	cpse	r24, r1
 442:	f4 cf       	rjmp	.-24     	; 0x42c <LCD_sendString+0xc>
		{
			LCD_sendChar(String[stringLength]);
			++stringLength;
		}
	}
}
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	08 95       	ret

0000044c <main>:
#include   "LCD_config.h"



int main(void)
{
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	c4 56       	subi	r28, 0x64	; 100
 456:	d1 09       	sbc	r29, r1
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
	u8 str[100] ; 
	
    DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	64 e0       	ldi	r22, 0x04	; 4
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	65 e0       	ldi	r22, 0x05	; 5
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	66 e0       	ldi	r22, 0x06	; 6
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	67 e0       	ldi	r22, 0x07	; 7
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    
    DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	
	DIO_setPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT); // Rx
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT); //Tx
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	LCD_init();
 4bc:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_init>
	UART_init();
 4c0:	0e 94 6f 02 	call	0x4de	; 0x4de <UART_init>
	
	UART_TxString("AHMED");
 4c4:	80 e6       	ldi	r24, 0x60	; 96
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 89 02 	call	0x512	; 0x512 <UART_TxString>
		
    while (1) 
    {  
	UART_RxString(str);
 4cc:	ce 01       	movw	r24, r28
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	0e 94 9f 02 	call	0x53e	; 0x53e <UART_RxString>
	LCD_sendString(str);
 4d4:	ce 01       	movw	r24, r28
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	0e 94 10 02 	call	0x420	; 0x420 <LCD_sendString>
 4dc:	f7 cf       	rjmp	.-18     	; 0x4cc <main+0x80>

000004de <UART_init>:
#include   "UART_interface.h"

void UART_init(void)
{
    // writing the UCSRC, // Select UART mode = Asynchronous , // configure no parity .... 
	UCSRC = 0X86 ; // 0b1000110
 4de:	86 e8       	ldi	r24, 0x86	; 134
 4e0:	80 bd       	out	0x20, r24	; 32
    CLR_BIT(UCSRB,2); 
 4e2:	8a b1       	in	r24, 0x0a	; 10
 4e4:	8b 7f       	andi	r24, 0xFB	; 251
 4e6:	8a b9       	out	0x0a, r24	; 10
	
	// Set buad rate = 9600 ;
	UBRRL = 103 ;
 4e8:	87 e6       	ldi	r24, 0x67	; 103
 4ea:	89 b9       	out	0x09, r24	; 9

    // Enable Tx
	SET_BIT(UCSRB,3);
 4ec:	8a b1       	in	r24, 0x0a	; 10
 4ee:	88 60       	ori	r24, 0x08	; 8
 4f0:	8a b9       	out	0x0a, r24	; 10
    // Enable Rx
	SET_BIT(UCSRB,4);
 4f2:	8a b1       	in	r24, 0x0a	; 10
 4f4:	80 61       	ori	r24, 0x10	; 16
 4f6:	8a b9       	out	0x0a, r24	; 10
 4f8:	08 95       	ret

000004fa <UART_TxChar>:
}
 
void UART_TxChar(u8 data)
{
    UDR = data ;
 4fa:	8c b9       	out	0x0c, r24	; 12
	while (0== GET_BIT(UCSRA,5)); 	
 4fc:	5d 9b       	sbis	0x0b, 5	; 11
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <UART_TxChar+0x2>
}
 500:	08 95       	ret

00000502 <UART_RxChar>:

void UART_RxChar(u8* returnedData)
{
	 if (returnedData != NULL)
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	29 f0       	breq	.+10     	; 0x510 <UART_RxChar+0xe>
	 {
		 while (0== GET_BIT(UCSRA,7)); 
 506:	5f 9b       	sbis	0x0b, 7	; 11
 508:	fe cf       	rjmp	.-4      	; 0x506 <UART_RxChar+0x4>
		 *returnedData = UDR ; 
 50a:	2c b1       	in	r18, 0x0c	; 12
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
 510:	08 95       	ret

00000512 <UART_TxString>:
	 }
}

void UART_TxString(u8* string)
{
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	cf 93       	push	r28
 518:	8c 01       	movw	r16, r24
	u8 i ; 
	for (i = 0 ; i<string[i] ; i++)
 51a:	c0 e0       	ldi	r28, 0x00	; 0
 51c:	03 c0       	rjmp	.+6      	; 0x524 <UART_TxString+0x12>
	{
		UART_TxChar(string[i]);
 51e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <UART_TxChar>
}

void UART_TxString(u8* string)
{
	u8 i ; 
	for (i = 0 ; i<string[i] ; i++)
 522:	cf 5f       	subi	r28, 0xFF	; 255
 524:	f8 01       	movw	r30, r16
 526:	ec 0f       	add	r30, r28
 528:	f1 1d       	adc	r31, r1
 52a:	80 81       	ld	r24, Z
 52c:	c8 17       	cp	r28, r24
 52e:	b8 f3       	brcs	.-18     	; 0x51e <UART_TxString+0xc>
	{
		UART_TxChar(string[i]);
	}
	
	UART_TxChar('\r');
 530:	8d e0       	ldi	r24, 0x0D	; 13
 532:	0e 94 7d 02 	call	0x4fa	; 0x4fa <UART_TxChar>
}
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	08 95       	ret

0000053e <UART_RxString>:


void UART_RxString(u8 *string)
{
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	8c 01       	movw	r16, r24

    u8 i = 0; 
	UART_RxChar(&string[i]);  
 546:	0e 94 81 02 	call	0x502	; 0x502 <UART_RxChar>


void UART_RxString(u8 *string)
{

    u8 i = 0; 
 54a:	c0 e0       	ldi	r28, 0x00	; 0
	UART_RxChar(&string[i]);  
	while(string[i] != '\r' )
 54c:	06 c0       	rjmp	.+12     	; 0x55a <UART_RxString+0x1c>
	{ // when press enter stop recieve 
		i++;
 54e:	cf 5f       	subi	r28, 0xFF	; 255
		UART_RxChar(&string[i]);
 550:	c8 01       	movw	r24, r16
 552:	8c 0f       	add	r24, r28
 554:	91 1d       	adc	r25, r1
 556:	0e 94 81 02 	call	0x502	; 0x502 <UART_RxChar>
void UART_RxString(u8 *string)
{

    u8 i = 0; 
	UART_RxChar(&string[i]);  
	while(string[i] != '\r' )
 55a:	f8 01       	movw	r30, r16
 55c:	ec 0f       	add	r30, r28
 55e:	f1 1d       	adc	r31, r1
 560:	80 81       	ld	r24, Z
 562:	8d 30       	cpi	r24, 0x0D	; 13
 564:	a1 f7       	brne	.-24     	; 0x54e <UART_RxString+0x10>
	{ // when press enter stop recieve 
		i++;
		UART_RxChar(&string[i]);
	}
	
	string[i] = '\0' ; 
 566:	10 82       	st	Z, r1
} 
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	08 95       	ret

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>
=======

unit8_lesson2_Section.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000574  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000574  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b1c  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090c  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d02  00000000  00000000  00002bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c8  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000626  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eaf  00000000  00000000  000041be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  0000506d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 26 02 	call	0x44c	; 0x44c <main>
  7a:	0c 94 b8 02 	jmp	0x570	; 0x570 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_setPinDirection>:
/* PINS APIS*/ 

void DIO_setPinDirection(u8 PortId, u8 PinId , u8 PinDirection ) 

{
 if ( (PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT ) || (PinDirection == DIO_PIN_INPUT)) )
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0x6>
  86:	72 c0       	rjmp	.+228    	; 0x16c <DIO_setPinDirection+0xea>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0xc>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_setPinDirection+0xea>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_setPinDirection+0x12>
  92:	6c c0       	rjmp	.+216    	; 0x16c <DIO_setPinDirection+0xea>
 { 
	switch (PortId)  // DIO PORTA
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	01 f1       	breq	.+64     	; 0xd8 <DIO_setPinDirection+0x56>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_setPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b1 f1       	breq	.+108    	; 0x10a <DIO_setPinDirection+0x88>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_setPinDirection+0x22>
  a2:	4c c0       	rjmp	.+152    	; 0x13c <DIO_setPinDirection+0xba>
  a4:	08 95       	ret
	{
		case 0 : 
		if (DIO_PIN_OUTPUT == PinDirection)
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	59 f4       	brne	.+22     	; 0xc0 <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x30>
  ba:	82 2b       	or	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,PinId);
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_setPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_setPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
		}
		break ;
		
		case 1 : // DIO PORTB 
		if (DIO_PIN_OUTPUT == PinDirection)
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x66>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x62>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB,PinId);
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_setPinDirection+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_setPinDirection+0x78>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
		}
		break ;
		
		case 2 : // DIO PORTC 
		if (DIO_PIN_OUTPUT == PinDirection)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0x94>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC,PinId);
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDirection+0xaa>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
		}
		break ;
		
		case 3 : // DIO PORTD 
		if (DIO_PIN_OUTPUT == PinDirection)
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xc6>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD,PinId);
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_setPinValue>:
}

void DIO_setPinValue(u8 PortId, u8 PinId , u8 PinValue)

{
	 if ( (PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH ) || (PinValue == DIO_PIN_LOW)) )
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_setPinValue+0x6>
 172:	72 c0       	rjmp	.+228    	; 0x258 <DIO_setPinValue+0xea>
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_setPinValue+0xc>
 178:	6f c0       	rjmp	.+222    	; 0x258 <DIO_setPinValue+0xea>
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	08 f0       	brcs	.+2      	; 0x180 <DIO_setPinValue+0x12>
 17e:	6c c0       	rjmp	.+216    	; 0x258 <DIO_setPinValue+0xea>
	 {
		 switch (PortId) 
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <DIO_setPinValue+0x56>
 184:	30 f0       	brcs	.+12     	; 0x192 <DIO_setPinValue+0x24>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <DIO_setPinValue+0x88>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_setPinValue+0x22>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <DIO_setPinValue+0xba>
 190:	08 95       	ret
		 {
			 case 0 : // DIO_PORTA
			 if (DIO_PIN_HIGH==PinValue)
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_setPinValue+0x3e>
			 {
			    SET_BIT(PORTA,PinId);
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x34>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x30>
 1a6:	82 2b       	or	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTA,PinId) ; 
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinValue+0x4a>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinValue+0x46>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
			 }
			 break ; 
			 
			 case 1 : // DIO_PORTB
			 if (DIO_PIN_HIGH==PinValue)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_setPinValue+0x70>
			 {
			    SET_BIT(PORTB,PinId);
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x66>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x62>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTB,PinId) ; 
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x7c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x78>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
			 }
			 break ; 
			 
			 case 2 : // DIO_PORTC
			 if (DIO_PIN_HIGH==PinValue)
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <DIO_setPinValue+0xa2>
			 {
			    SET_BIT(PORTC,PinId);
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0x98>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0x94>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTC,PinId) ; 
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinValue+0xae>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinValue+0xaa>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
			 }
			 break ; 
			 
			 case 3 : // DIO_PORTD
			 if (DIO_PIN_HIGH==PinValue)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_setPinValue+0xd4>
			 {
			    SET_BIT(PORTD,PinId);
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xca>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xc6>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTD,PinId) ; 
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_setPinValue+0xe0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_setPinValue+0xdc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <writeHalfPort>:
	
	#endif
}

static void writeHalfPort(u8 Value)
{
 25a:	cf 93       	push	r28
 25c:	c8 2f       	mov	r28, r24
	if (1==GET_BIT(Value,0))
 25e:	80 ff       	sbrs	r24, 0
 260:	06 c0       	rjmp	.+12     	; 0x26e <writeHalfPort+0x14>
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_HIGH);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 26c:	05 c0       	rjmp	.+10     	; 0x278 <writeHalfPort+0x1e>
	}
	else 
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,1))
 278:	c1 ff       	sbrs	r28, 1
 27a:	06 c0       	rjmp	.+12     	; 0x288 <writeHalfPort+0x2e>
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_HIGH);
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	65 e0       	ldi	r22, 0x05	; 5
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 286:	05 c0       	rjmp	.+10     	; 0x292 <writeHalfPort+0x38>
	}
	else
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_LOW);
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	65 e0       	ldi	r22, 0x05	; 5
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,2))
 292:	c2 ff       	sbrs	r28, 2
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <writeHalfPort+0x48>
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_HIGH);
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	66 e0       	ldi	r22, 0x06	; 6
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <writeHalfPort+0x52>
	}
	else
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_LOW);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	66 e0       	ldi	r22, 0x06	; 6
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,3))
 2ac:	c3 ff       	sbrs	r28, 3
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <writeHalfPort+0x62>
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_HIGH);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	67 e0       	ldi	r22, 0x07	; 7
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <writeHalfPort+0x6c>
	}
	else
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_LOW);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	67 e0       	ldi	r22, 0x07	; 7
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
}
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_sendCmnd>:
	
}

void LCD_sendCmnd(u8 Cmnd)

{
 2ca:	cf 93       	push	r28
 2cc:	c8 2f       	mov	r28, r24
	// set RS pin = 0 ( write command) 
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	
	// Write the most 4-bit command on data pins
	writeHalfPort(Cmnd>>4);
 2e2:	8c 2f       	mov	r24, r28
 2e4:	82 95       	swap	r24
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_sendCmnd+0x30>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_sendCmnd+0x36>
 300:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	63 e0       	ldi	r22, 0x03	; 3
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// Write the Least 4-bit command on data pins
	writeHalfPort(Cmnd);
 30c:	8c 2f       	mov	r24, r28
 30e:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 31c:	8f e9       	ldi	r24, 0x9F	; 159
 31e:	9f e0       	ldi	r25, 0x0F	; 15
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_sendCmnd+0x56>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_sendCmnd+0x5c>
 326:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	63 e0       	ldi	r22, 0x03	; 3
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	#endif 
	
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <LCD_init>:
 336:	2f e7       	ldi	r18, 0x7F	; 127
 338:	85 eb       	ldi	r24, 0xB5	; 181
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <LCD_init+0x6>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_init+0x10>
 346:	00 00       	nop
	#if LCD_MODE == LCD_8_BIT_MODE
	LCD_sendCmnd(0b00111000); // Function Set command 2*16 LCD
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	// set RS pin = 0 ( write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	writeHalfPort(0b0010);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
	
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 36c:	8f e9       	ldi	r24, 0x9F	; 159
 36e:	9f e0       	ldi	r25, 0x0F	; 15
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_init+0x3a>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_init+0x40>
 376:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	63 e0       	ldi	r22, 0x03	; 3
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	LCD_sendCmnd(0b00101000);
 382:	88 e2       	ldi	r24, 0x28	; 40
 384:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 388:	90 ef       	ldi	r25, 0xF0	; 240
 38a:	9a 95       	dec	r25
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_init+0x54>
	#endif
	
	_delay_us(45);
	
	// display on , cursor off , blink on 
	LCD_sendCmnd(0b00001101);
 38e:	8d e0       	ldi	r24, 0x0D	; 13
 390:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_sendCmnd>
 394:	20 ef       	ldi	r18, 0xF0	; 240
 396:	2a 95       	dec	r18
 398:	f1 f7       	brne	.-4      	; 0x396 <LCD_init+0x60>
	_delay_us(45);
	
	// clear display 
	LCD_sendCmnd(0b00000001);
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	8f e3       	ldi	r24, 0x3F	; 63
 3a2:	9f e1       	ldi	r25, 0x1F	; 31
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_init+0x6e>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCD_init+0x74>
 3aa:	00 00       	nop
	_delay_ms(2);
	
	// set entry mode 
	LCD_sendCmnd(0b00000110);
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_sendCmnd>
 3b2:	08 95       	ret

000003b4 <LCD_sendChar>:
	
}

void LCD_sendChar(u8 Data)

{
 3b4:	cf 93       	push	r28
 3b6:	c8 2f       	mov	r28, r24
	// set RS pin = 1 ( write Data)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	
	// Write the most 4-bit Data on data pins
	writeHalfPort(Data>>4);
 3cc:	8c 2f       	mov	r24, r28
 3ce:	82 95       	swap	r24
 3d0:	8f 70       	andi	r24, 0x0F	; 15
 3d2:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
	
	 /* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	63 e0       	ldi	r22, 0x03	; 3
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3e0:	8f e9       	ldi	r24, 0x9F	; 159
 3e2:	9f e0       	ldi	r25, 0x0F	; 15
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <LCD_sendChar+0x30>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <LCD_sendChar+0x36>
 3ea:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	63 e0       	ldi	r22, 0x03	; 3
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// Write the Least 4-bit Data on data pins
	writeHalfPort(Data);
 3f6:	8c 2f       	mov	r24, r28
 3f8:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
	
	 /* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 406:	8f e9       	ldi	r24, 0x9F	; 159
 408:	9f e0       	ldi	r25, 0x0F	; 15
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	63 e0       	ldi	r22, 0x03	; 3
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	#endif
}
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <LCD_sendString>:
	}
}

void LCD_sendString(u8 *String)

{
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
	if(String != NULL)
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	29 f4       	brne	.+10     	; 0x434 <LCD_sendString+0x14>
 42a:	0c c0       	rjmp	.+24     	; 0x444 <LCD_sendString+0x24>
	{
		u8 stringLength = 0;
		while(String[stringLength] != '\0')
		{
			LCD_sendChar(String[stringLength]);
 42c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_sendChar>
			++stringLength;
 430:	cf 5f       	subi	r28, 0xFF	; 255
 432:	02 c0       	rjmp	.+4      	; 0x438 <LCD_sendString+0x18>
 434:	8c 01       	movw	r16, r24
 436:	c0 e0       	ldi	r28, 0x00	; 0

{
	if(String != NULL)
	{
		u8 stringLength = 0;
		while(String[stringLength] != '\0')
 438:	f8 01       	movw	r30, r16
 43a:	ec 0f       	add	r30, r28
 43c:	f1 1d       	adc	r31, r1
 43e:	80 81       	ld	r24, Z
 440:	81 11       	cpse	r24, r1
 442:	f4 cf       	rjmp	.-24     	; 0x42c <LCD_sendString+0xc>
		{
			LCD_sendChar(String[stringLength]);
			++stringLength;
		}
	}
}
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	08 95       	ret

0000044c <main>:
#include   "LCD_config.h"



int main(void)
{
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	c4 56       	subi	r28, 0x64	; 100
 456:	d1 09       	sbc	r29, r1
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
	u8 str[100] ; 
	
    DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	64 e0       	ldi	r22, 0x04	; 4
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	65 e0       	ldi	r22, 0x05	; 5
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	66 e0       	ldi	r22, 0x06	; 6
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	67 e0       	ldi	r22, 0x07	; 7
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    
    DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	
	DIO_setPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT); // Rx
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT); //Tx
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	LCD_init();
 4bc:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_init>
	UART_init();
 4c0:	0e 94 6f 02 	call	0x4de	; 0x4de <UART_init>
	
	UART_TxString("AHMED");
 4c4:	80 e6       	ldi	r24, 0x60	; 96
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 89 02 	call	0x512	; 0x512 <UART_TxString>
		
    while (1) 
    {  
	UART_RxString(str);
 4cc:	ce 01       	movw	r24, r28
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	0e 94 9f 02 	call	0x53e	; 0x53e <UART_RxString>
	LCD_sendString(str);
 4d4:	ce 01       	movw	r24, r28
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	0e 94 10 02 	call	0x420	; 0x420 <LCD_sendString>
 4dc:	f7 cf       	rjmp	.-18     	; 0x4cc <main+0x80>

000004de <UART_init>:
#include   "UART_interface.h"

void UART_init(void)
{
    // writing the UCSRC, // Select UART mode = Asynchronous , // configure no parity .... 
	UCSRC = 0X86 ; // 0b1000110
 4de:	86 e8       	ldi	r24, 0x86	; 134
 4e0:	80 bd       	out	0x20, r24	; 32
    CLR_BIT(UCSRB,2); 
 4e2:	8a b1       	in	r24, 0x0a	; 10
 4e4:	8b 7f       	andi	r24, 0xFB	; 251
 4e6:	8a b9       	out	0x0a, r24	; 10
	
	// Set buad rate = 9600 ;
	UBRRL = 103 ;
 4e8:	87 e6       	ldi	r24, 0x67	; 103
 4ea:	89 b9       	out	0x09, r24	; 9

    // Enable Tx
	SET_BIT(UCSRB,3);
 4ec:	8a b1       	in	r24, 0x0a	; 10
 4ee:	88 60       	ori	r24, 0x08	; 8
 4f0:	8a b9       	out	0x0a, r24	; 10
    // Enable Rx
	SET_BIT(UCSRB,4);
 4f2:	8a b1       	in	r24, 0x0a	; 10
 4f4:	80 61       	ori	r24, 0x10	; 16
 4f6:	8a b9       	out	0x0a, r24	; 10
 4f8:	08 95       	ret

000004fa <UART_TxChar>:
}
 
void UART_TxChar(u8 data)
{
    UDR = data ;
 4fa:	8c b9       	out	0x0c, r24	; 12
	while (0== GET_BIT(UCSRA,5)); 	
 4fc:	5d 9b       	sbis	0x0b, 5	; 11
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <UART_TxChar+0x2>
}
 500:	08 95       	ret

00000502 <UART_RxChar>:

void UART_RxChar(u8* returnedData)
{
	 if (returnedData != NULL)
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	29 f0       	breq	.+10     	; 0x510 <UART_RxChar+0xe>
	 {
		 while (0== GET_BIT(UCSRA,7)); 
 506:	5f 9b       	sbis	0x0b, 7	; 11
 508:	fe cf       	rjmp	.-4      	; 0x506 <UART_RxChar+0x4>
		 *returnedData = UDR ; 
 50a:	2c b1       	in	r18, 0x0c	; 12
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
 510:	08 95       	ret

00000512 <UART_TxString>:
	 }
}

void UART_TxString(u8* string)
{
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	cf 93       	push	r28
 518:	8c 01       	movw	r16, r24
	u8 i ; 
	for (i = 0 ; i<string[i] ; i++)
 51a:	c0 e0       	ldi	r28, 0x00	; 0
 51c:	03 c0       	rjmp	.+6      	; 0x524 <UART_TxString+0x12>
	{
		UART_TxChar(string[i]);
 51e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <UART_TxChar>
}

void UART_TxString(u8* string)
{
	u8 i ; 
	for (i = 0 ; i<string[i] ; i++)
 522:	cf 5f       	subi	r28, 0xFF	; 255
 524:	f8 01       	movw	r30, r16
 526:	ec 0f       	add	r30, r28
 528:	f1 1d       	adc	r31, r1
 52a:	80 81       	ld	r24, Z
 52c:	c8 17       	cp	r28, r24
 52e:	b8 f3       	brcs	.-18     	; 0x51e <UART_TxString+0xc>
	{
		UART_TxChar(string[i]);
	}
	
	UART_TxChar('\r');
 530:	8d e0       	ldi	r24, 0x0D	; 13
 532:	0e 94 7d 02 	call	0x4fa	; 0x4fa <UART_TxChar>
}
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	08 95       	ret

0000053e <UART_RxString>:


void UART_RxString(u8 *string)
{
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	8c 01       	movw	r16, r24

    u8 i = 0; 
	UART_RxChar(&string[i]);  
 546:	0e 94 81 02 	call	0x502	; 0x502 <UART_RxChar>


void UART_RxString(u8 *string)
{

    u8 i = 0; 
 54a:	c0 e0       	ldi	r28, 0x00	; 0
	UART_RxChar(&string[i]);  
	while(string[i] != '\r' )
 54c:	06 c0       	rjmp	.+12     	; 0x55a <UART_RxString+0x1c>
	{ // when press enter stop recieve 
		i++;
 54e:	cf 5f       	subi	r28, 0xFF	; 255
		UART_RxChar(&string[i]);
 550:	c8 01       	movw	r24, r16
 552:	8c 0f       	add	r24, r28
 554:	91 1d       	adc	r25, r1
 556:	0e 94 81 02 	call	0x502	; 0x502 <UART_RxChar>
void UART_RxString(u8 *string)
{

    u8 i = 0; 
	UART_RxChar(&string[i]);  
	while(string[i] != '\r' )
 55a:	f8 01       	movw	r30, r16
 55c:	ec 0f       	add	r30, r28
 55e:	f1 1d       	adc	r31, r1
 560:	80 81       	ld	r24, Z
 562:	8d 30       	cpi	r24, 0x0D	; 13
 564:	a1 f7       	brne	.-24     	; 0x54e <UART_RxString+0x10>
	{ // when press enter stop recieve 
		i++;
		UART_RxChar(&string[i]);
	}
	
	string[i] = '\0' ; 
 566:	10 82       	st	Z, r1
} 
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	08 95       	ret

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>
>>>>>>> bd560d5b990063eaea5362409ab455504410aa69
