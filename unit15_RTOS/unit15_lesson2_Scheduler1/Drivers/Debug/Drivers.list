
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000948  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000a78  08000a78  00010a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a9c  08000a9c  00010aa4  2**0
                  CONTENTS
  4 .ARM          00000000  08000a9c  08000a9c  00010aa4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a9c  08000aa4  00010aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a9c  08000a9c  00010a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aa0  08000aa0  00010aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000000  08000aa4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08000aa4  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010aa4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006587  00000000  00000000  00010acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fb4  00000000  00000000  00017054  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013d4  00000000  00000000  00018008  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000318  00000000  00000000  000193e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000290  00000000  00000000  000196f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00004cfc  00000000  00000000  00019988  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003bba  00000000  00000000  0001e684  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00013170  00000000  00000000  0002223e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000353ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a10  00000000  00000000  0003542c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a60 	.word	0x08000a60

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a60 	.word	0x08000a60

08000170 <HardFault_Handler>:
#include "CortexMX_OS_porting.h"



void HardFault_Handler (void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	while (1) ;
 8000174:	e7fe      	b.n	8000174 <HardFault_Handler+0x4>

08000176 <MemManage_Handler>:
}
void MemManage_Handler (void)
{
 8000176:	b480      	push	{r7}
 8000178:	af00      	add	r7, sp, #0
	while (1) ;
 800017a:	e7fe      	b.n	800017a <MemManage_Handler+0x4>

0800017c <BusFault_Handler>:
}
void BusFault_Handler (void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	while (1) ;
 8000180:	e7fe      	b.n	8000180 <BusFault_Handler+0x4>

08000182 <UsageFault_Handler>:
}
void UsageFault_Handler (void)
{
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0
	while (1) ;
 8000186:	e7fe      	b.n	8000186 <UsageFault_Handler+0x4>

08000188 <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler()
{
	__asm("tst lr,#4       \n\t"
 8000188:	f01e 0f04 	tst.w	lr, #4
 800018c:	bf0c      	ite	eq
 800018e:	f3ef 8008 	mrseq	r0, MSP
 8000192:	f3ef 8008 	mrsne	r0, MSP
 8000196:	f000 b829 	b.w	80001ec <OS_SVC_Services>
			"ITE EQ        \n\t"
			"mrseq r0,MSP  \n\t"
			"mrsne r0,MSP  \n\t"
			"B OS_SVC_Services");
}
 800019a:	bf00      	nop

0800019c <HW_Init>:

void HW_Init ()
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	  // RCC Default Values Makes CPU Clock & SysTick Timer Clock = 8 Mhz
	  // 8Mhz
	  // 1 Count -> 0.125
	  // X Count -> 1 ms
	  // X = 800 Count
}
 80001a0:	bf00      	nop
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <FIFO_init>:
 */


#include"MYRTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]

	if(!buff )
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d101      	bne.n	80001be <FIFO_init+0x16>
		return FIFO_NULL;
 80001ba:	2303      	movs	r3, #3
 80001bc:	e011      	b.n	80001e2 <FIFO_init+0x3a>

	fifo->base = buff ;
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	68ba      	ldr	r2, [r7, #8]
 80001c2:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	68da      	ldr	r2, [r3, #12]
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	68da      	ldr	r2, [r3, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80001e0:	2300      	movs	r3, #0

}
 80001e2:	4618      	mov	r0, r3
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <OS_SVC_Services>:
Task_ref* Ready_QUEUE_FIFO[100];
Task_ref MYRTOS_idleTask ;


void OS_SVC_Services(int* StackFramePointer)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set stack start found in -> r0 , r0 is pointed by StackFramePointer
	//OS_SVC_Set stack : r0,r1,r2,r12,LR,PC,XPSR

	unsigned char SVC_number ;

	SVC_number = *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2)) ;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3318      	adds	r3, #24
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	3b02      	subs	r3, #2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	73fb      	strb	r3, [r7, #15]

	switch(SVC_number)
 8000200:	7bfb      	ldrb	r3, [r7, #15]
 8000202:	2b03      	cmp	r3, #3
 8000204:	d80b      	bhi.n	800021e <OS_SVC_Services+0x32>
 8000206:	a201      	add	r2, pc, #4	; (adr r2, 800020c <OS_SVC_Services+0x20>)
 8000208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020c:	0800021d 	.word	0x0800021d
 8000210:	0800021d 	.word	0x0800021d
 8000214:	0800021d 	.word	0x0800021d
 8000218:	0800021d 	.word	0x0800021d
	{
	case 0 : //Activate Task

		break;
 800021c:	bf00      	nop
	case 3 : //

		break;
	}

}
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <PendSV_Handler>:

void PendSV_Handler()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	//PendSV_HandlerB
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <MYRTOS_IdleTask>:
	}

}

void MYRTOS_IdleTask()
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	while (1)
	{
		__asm("NOP") ;
 8000238:	bf00      	nop
 800023a:	e7fd      	b.n	8000238 <MYRTOS_IdleTask+0x4>

0800023c <MYRTOS_Create_MainStack>:
	}
}


void MYRTOS_Create_MainStack()
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack ;
 8000240:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <MYRTOS_Create_MainStack+0x34>)
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MYRTOS_Create_MainStack+0x38>)
 8000244:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

	//Aligned 8 Bytes spaces between Main Task and PSP tasks
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize ;
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <MYRTOS_Create_MainStack+0x38>)
 800024a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800024e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000252:	4a08      	ldr	r2, [pc, #32]	; (8000274 <MYRTOS_Create_MainStack+0x38>)
 8000254:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MYRTOS_Create_MainStack+0x38>)
 800025a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800025e:	3b08      	subs	r3, #8
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <MYRTOS_Create_MainStack+0x38>)
 8000262:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	// if (_E_MSP_Task < _&eheap) Error : Exceeded the available stack size
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	20002800 	.word	0x20002800
 8000274:	200000ac 	.word	0x200000ac

08000278 <MYRTOS_Init>:



MYRTOS_ErrorID MYRTOS_Init()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
	MYRTOS_ErrorID error = NoError ;
 800027e:	2300      	movs	r3, #0
 8000280:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OS Suspend)
	OS_Control.OSmodeID = OSsuspend ;
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <MYRTOS_Init+0x64>)
 8000284:	2200      	movs	r2, #0
 8000286:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the Main Stack For OS
	MYRTOS_Create_MainStack();
 800028a:	f7ff ffd7 	bl	800023c <MYRTOS_Create_MainStack>

	//Create OS Ready Queue
	if (FIFO_init(&Ready_QUEUE,Ready_QUEUE_FIFO, 100) != FIFO_NO_ERROR )
 800028e:	2264      	movs	r2, #100	; 0x64
 8000290:	4913      	ldr	r1, [pc, #76]	; (80002e0 <MYRTOS_Init+0x68>)
 8000292:	4814      	ldr	r0, [pc, #80]	; (80002e4 <MYRTOS_Init+0x6c>)
 8000294:	f7ff ff88 	bl	80001a8 <FIFO_init>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MYRTOS_Init+0x2a>
	{
		error = Ready_Queue_init_error ;
 800029e:	2301      	movs	r3, #1
 80002a0:	71fb      	strb	r3, [r7, #7]
	}

	//Configure Idle Task
	strcpy(MYRTOS_idleTask.TaskName,"IdleTask");
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MYRTOS_Init+0x70>)
 80002a4:	4a11      	ldr	r2, [pc, #68]	; (80002ec <MYRTOS_Init+0x74>)
 80002a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002a8:	c303      	stmia	r3!, {r0, r1}
 80002aa:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 255 ;
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <MYRTOS_Init+0x78>)
 80002ae:	22ff      	movs	r2, #255	; 0xff
 80002b0:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_IdleTask ;
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MYRTOS_Init+0x78>)
 80002b4:	4a0f      	ldr	r2, [pc, #60]	; (80002f4 <MYRTOS_Init+0x7c>)
 80002b6:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300 ;
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <MYRTOS_Init+0x78>)
 80002ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002be:	601a      	str	r2, [r3, #0]


	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <MYRTOS_Init+0x78>)
 80002c2:	f000 f857 	bl	8000374 <MYRTOS_CreateTask>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	4413      	add	r3, r2
 80002ce:	71fb      	strb	r3, [r7, #7]

	return error ;
 80002d0:	79fb      	ldrb	r3, [r7, #7]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200000ac 	.word	0x200000ac
 80002e0:	200002b0 	.word	0x200002b0
 80002e4:	20000258 	.word	0x20000258
 80002e8:	20000288 	.word	0x20000288
 80002ec:	08000a78 	.word	0x08000a78
 80002f0:	2000026c 	.word	0x2000026c
 80002f4:	08000235 	.word	0x08000235

080002f8 <MYRTOS_Create_Task_Stack>:




void MYRTOS_Create_Task_Stack(Task_ref* Tref)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	 * r0
	 *====
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */

	Tref->Current_PSP = Tref->_S_PSP_Task ;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	691b      	ldr	r3, [r3, #16]
 8000304:	461a      	mov	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP-- ;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	1f1a      	subs	r2, r3, #4
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000;         //DUMMY_XPSR should T =1 to avoid BUS fault;//0x01000000
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800031c:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	1f1a      	subs	r2, r3, #4
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	689a      	ldr	r2, [r3, #8]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ; //LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	1f1a      	subs	r2, r3, #4
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP)  = 0xFFFFFFFD ;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f06f 0202 	mvn.w	r2, #2
 8000344:	601a      	str	r2, [r3, #0]

	for (int  j=0 ; j< 13 ; j++ )
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00b      	b.n	8000364 <MYRTOS_Create_Task_Stack+0x6c>
	{
		Tref->Current_PSP-- ;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	1f1a      	subs	r2, r3, #4
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP)  = 0 ;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3301      	adds	r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2b0c      	cmp	r3, #12
 8000368:	ddf0      	ble.n	800034c <MYRTOS_Create_Task_Stack+0x54>

	}

}
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <MYRTOS_CreateTask>:

MYRTOS_ErrorID MYRTOS_CreateTask(Task_ref* Tref )
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	MYRTOS_ErrorID error = NoError ;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]

	//Create Its OWN PSP stack
	//Check task size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator ;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MYRTOS_CreateTask+0x58>)
 8000382:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size ;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691a      	ldr	r2, [r3, #16]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	1ad2      	subs	r2, r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	615a      	str	r2, [r3, #20]
	//	-				-
	//	- _eheap		-
	//	-				-
	//

	if (Tref->_E_PSP_Task < (unsigned int)(&(_eheap)))
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <MYRTOS_CreateTask+0x5c>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d201      	bcs.n	80003a6 <MYRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize ;
 80003a2:	2302      	movs	r3, #2
 80003a4:	e00d      	b.n	80003c2 <MYRTOS_CreateTask+0x4e>
	}

	//Aligned 8 Bytes spaces between Task PSP and Other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8) ;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	3b08      	subs	r3, #8
 80003ac:	4a07      	ldr	r2, [pc, #28]	; (80003cc <MYRTOS_CreateTask+0x58>)
 80003ae:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MYRTOS_Create_Task_Stack(Tref);
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f7ff ffa0 	bl	80002f8 <MYRTOS_Create_Task_Stack>

	//Task State Update -> Suspend
	Tref->TaskState = Suspend ;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2200      	movs	r2, #0
 80003bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200000ac 	.word	0x200000ac
 80003d0:	20000b10 	.word	0x20000b10

080003d4 <task1>:
#include "Scheduler.h"

Task_ref Task1, Task2 , Task3 ;

void task1 ()
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	while(1)
 80003d8:	e7fe      	b.n	80003d8 <task1+0x4>

080003da <task2>:
		//Task1 Code
	}
}

void task2 ()
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
	while(1)
 80003de:	e7fe      	b.n	80003de <task2+0x4>

080003e0 <task3>:
		//Task2 Code
	}
}

void task3 ()
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	while(1)
 80003e4:	e7fe      	b.n	80003e4 <task3+0x4>
	...

080003e8 <main>:
		//Task3 Code
	}
}

int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
	MYRTOS_ErrorID error ;
	//HW_Init (Initialize Clock tree , Reset Controller)
	HW_Init();
 80003ee:	f7ff fed5 	bl	800019c <HW_Init>

	if ( MYRTOS_Init() != NoError )
 80003f2:	f7ff ff41 	bl	8000278 <MYRTOS_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d000      	beq.n	80003fe <main+0x16>
		while(1) ;
 80003fc:	e7fe      	b.n	80003fc <main+0x14>


	Task1.Stack_Size = 1024 ;
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <main+0xb0>)
 8000400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000404:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = task1 ;
 8000406:	4b24      	ldr	r3, [pc, #144]	; (8000498 <main+0xb0>)
 8000408:	4a24      	ldr	r2, [pc, #144]	; (800049c <main+0xb4>)
 800040a:	609a      	str	r2, [r3, #8]
	Task1.priority = 3 ;
 800040c:	4b22      	ldr	r3, [pc, #136]	; (8000498 <main+0xb0>)
 800040e:	2203      	movs	r2, #3
 8000410:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName ,"task1");
 8000412:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <main+0xb8>)
 8000414:	4a23      	ldr	r2, [pc, #140]	; (80004a4 <main+0xbc>)
 8000416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800041a:	6018      	str	r0, [r3, #0]
 800041c:	3304      	adds	r3, #4
 800041e:	8019      	strh	r1, [r3, #0]

	Task2.Stack_Size = 1024 ;
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <main+0xc0>)
 8000422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000426:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = task2 ;
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <main+0xc0>)
 800042a:	4a20      	ldr	r2, [pc, #128]	; (80004ac <main+0xc4>)
 800042c:	609a      	str	r2, [r3, #8]
	Task2.priority = 3 ;
 800042e:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <main+0xc0>)
 8000430:	2203      	movs	r2, #3
 8000432:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName ,"task2");
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <main+0xc8>)
 8000436:	4a1f      	ldr	r2, [pc, #124]	; (80004b4 <main+0xcc>)
 8000438:	e892 0003 	ldmia.w	r2, {r0, r1}
 800043c:	6018      	str	r0, [r3, #0]
 800043e:	3304      	adds	r3, #4
 8000440:	8019      	strh	r1, [r3, #0]


	Task3.Stack_Size = 1024 ;
 8000442:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <main+0xd0>)
 8000444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000448:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = task3 ;
 800044a:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <main+0xd0>)
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <main+0xd4>)
 800044e:	609a      	str	r2, [r3, #8]
	Task3.priority = 3 ;
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <main+0xd0>)
 8000452:	2203      	movs	r2, #3
 8000454:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName ,"task3");
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <main+0xd8>)
 8000458:	4a1a      	ldr	r2, [pc, #104]	; (80004c4 <main+0xdc>)
 800045a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800045e:	6018      	str	r0, [r3, #0]
 8000460:	3304      	adds	r3, #4
 8000462:	8019      	strh	r1, [r3, #0]

	error += MYRTOS_CreateTask(&Task1);
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <main+0xb0>)
 8000466:	f7ff ff85 	bl	8000374 <MYRTOS_CreateTask>
 800046a:	4603      	mov	r3, r0
 800046c:	461a      	mov	r2, r3
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4413      	add	r3, r2
 8000472:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2);
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <main+0xc0>)
 8000476:	f7ff ff7d 	bl	8000374 <MYRTOS_CreateTask>
 800047a:	4603      	mov	r3, r0
 800047c:	461a      	mov	r2, r3
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	4413      	add	r3, r2
 8000482:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task3);
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <main+0xd0>)
 8000486:	f7ff ff75 	bl	8000374 <MYRTOS_CreateTask>
 800048a:	4603      	mov	r3, r0
 800048c:	461a      	mov	r2, r3
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	4413      	add	r3, r2
 8000492:	71fb      	strb	r3, [r7, #7]

	while (1)
 8000494:	e7fe      	b.n	8000494 <main+0xac>
 8000496:	bf00      	nop
 8000498:	20000440 	.word	0x20000440
 800049c:	080003d5 	.word	0x080003d5
 80004a0:	2000045c 	.word	0x2000045c
 80004a4:	08000a84 	.word	0x08000a84
 80004a8:	200004c8 	.word	0x200004c8
 80004ac:	080003db 	.word	0x080003db
 80004b0:	200004e4 	.word	0x200004e4
 80004b4:	08000a8c 	.word	0x08000a8c
 80004b8:	20000484 	.word	0x20000484
 80004bc:	080003e1 	.word	0x080003e1
 80004c0:	200004a0 	.word	0x200004a0
 80004c4:	08000a94 	.word	0x08000a94

080004c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c8:	480d      	ldr	r0, [pc, #52]	; (8000500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <LoopForever+0x6>)
  ldr r1, =_edata
 80004d2:	490d      	ldr	r1, [pc, #52]	; (8000508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <LoopForever+0xe>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e8:	4c0a      	ldr	r4, [pc, #40]	; (8000514 <LoopForever+0x16>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f6:	f000 fa8f 	bl	8000a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fa:	f7ff ff75 	bl	80003e8 <main>

080004fe <LoopForever>:

LoopForever:
    b LoopForever
 80004fe:	e7fe      	b.n	80004fe <LoopForever>
  ldr   r0, =_estack
 8000500:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800050c:	08000aa4 	.word	0x08000aa4
  ldr r2, =_sbss
 8000510:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000514:	2000050c 	.word	0x2000050c

08000518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_2_IRQHandler>
	...

0800051c <EXTI0_IRQHandler>:
 * =====================================================================================
 */


void EXTI0_IRQHandler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <EXTI0_IRQHandler+0x1c>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <EXTI0_IRQHandler+0x1c>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <EXTI0_IRQHandler+0x20>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4798      	blx	r3
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010400 	.word	0x40010400
 800053c:	2000001c 	.word	0x2000001c

08000540 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <EXTI1_IRQHandler+0x1c>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <EXTI1_IRQHandler+0x1c>)
 800054a:	f043 0302 	orr.w	r3, r3, #2
 800054e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <EXTI1_IRQHandler+0x20>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	4798      	blx	r3
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010400 	.word	0x40010400
 8000560:	2000001c 	.word	0x2000001c

08000564 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <EXTI2_IRQHandler+0x1c>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <EXTI2_IRQHandler+0x1c>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <EXTI2_IRQHandler+0x20>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	4798      	blx	r3
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40010400 	.word	0x40010400
 8000584:	2000001c 	.word	0x2000001c

08000588 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <EXTI3_IRQHandler+0x1c>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <EXTI3_IRQHandler+0x1c>)
 8000592:	f043 0308 	orr.w	r3, r3, #8
 8000596:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <EXTI3_IRQHandler+0x20>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4798      	blx	r3
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40010400 	.word	0x40010400
 80005a8:	2000001c 	.word	0x2000001c

080005ac <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <EXTI4_IRQHandler+0x1c>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <EXTI4_IRQHandler+0x1c>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <EXTI4_IRQHandler+0x20>)
 80005be:	691b      	ldr	r3, [r3, #16]
 80005c0:	4798      	blx	r3
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40010400 	.word	0x40010400
 80005cc:	2000001c 	.word	0x2000001c

080005d0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d008      	beq.n	80005f2 <EXTI9_5_IRQHandler+0x22>
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a22      	ldr	r2, [pc, #136]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 80005e6:	f043 0320 	orr.w	r3, r3, #32
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <EXTI9_5_IRQHandler+0xa4>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 80005f2:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <EXTI9_5_IRQHandler+0x40>
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 8000604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <EXTI9_5_IRQHandler+0xa4>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000618:	2b00      	cmp	r3, #0
 800061a:	d008      	beq.n	800062e <EXTI9_5_IRQHandler+0x5e>
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 8000622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000626:	6153      	str	r3, [r2, #20]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <EXTI9_5_IRQHandler+0xa4>)
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000636:	2b00      	cmp	r3, #0
 8000638:	d008      	beq.n	800064c <EXTI9_5_IRQHandler+0x7c>
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <EXTI9_5_IRQHandler+0xa4>)
 8000648:	6a1b      	ldr	r3, [r3, #32]
 800064a:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000654:	2b00      	cmp	r3, #0
 8000656:	d008      	beq.n	800066a <EXTI9_5_IRQHandler+0x9a>
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <EXTI9_5_IRQHandler+0xa0>)
 800065e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000662:	6153      	str	r3, [r2, #20]
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <EXTI9_5_IRQHandler+0xa4>)
 8000666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000668:	4798      	blx	r3
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40010400 	.word	0x40010400
 8000674:	2000001c 	.word	0x2000001c

08000678 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000684:	2b00      	cmp	r3, #0
 8000686:	d008      	beq.n	800069a <EXTI15_10_IRQHandler+0x22>
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4a29      	ldr	r2, [pc, #164]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 800068e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000692:	6153      	str	r3, [r2, #20]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <EXTI15_10_IRQHandler+0xc0>)
 8000696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000698:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d008      	beq.n	80006b8 <EXTI15_10_IRQHandler+0x40>
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a22      	ldr	r2, [pc, #136]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 80006ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <EXTI15_10_IRQHandler+0xc0>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d008      	beq.n	80006d6 <EXTI15_10_IRQHandler+0x5e>
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a1a      	ldr	r2, [pc, #104]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 80006ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ce:	6153      	str	r3, [r2, #20]
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <EXTI15_10_IRQHandler+0xc0>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d008      	beq.n	80006f4 <EXTI15_10_IRQHandler+0x7c>
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 80006e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <EXTI15_10_IRQHandler+0xc0>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f2:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d008      	beq.n	8000712 <EXTI15_10_IRQHandler+0x9a>
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6153      	str	r3, [r2, #20]
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <EXTI15_10_IRQHandler+0xc0>)
 800070e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000710:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <EXTI15_10_IRQHandler+0xb8>
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a04      	ldr	r2, [pc, #16]	; (8000734 <EXTI15_10_IRQHandler+0xbc>)
 8000724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b03      	ldr	r3, [pc, #12]	; (8000738 <EXTI15_10_IRQHandler+0xc0>)
 800072c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800072e:	4798      	blx	r3
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40010400 	.word	0x40010400
 8000738:	2000001c 	.word	0x2000001c

0800073c <Slave_States>:
	/*Send The Address*/
	I2Cx->DR = Address ;
}

void Slave_States(I2C_TypeDef *I2Cx,Slave_State State)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a32      	ldr	r2, [pc, #200]	; (8000814 <Slave_States+0xd8>)
 800074c:	4293      	cmp	r3, r2
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	73fb      	strb	r3, [r7, #15]

	switch(State)
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2b04      	cmp	r3, #4
 800075c:	d856      	bhi.n	800080c <Slave_States+0xd0>
 800075e:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <Slave_States+0x28>)
 8000760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000764:	0800077f 	.word	0x0800077f
 8000768:	08000779 	.word	0x08000779
 800076c:	080007a3 	.word	0x080007a3
 8000770:	080007bb 	.word	0x080007bb
 8000774:	080007df 	.word	0x080007df
	{
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 800077c:	e046      	b.n	800080c <Slave_States+0xd0>

	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	2b00      	cmp	r3, #0
 8000788:	d03b      	beq.n	8000802 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 800078a:	7bfa      	ldrb	r2, [r7, #15]
 800078c:	4922      	ldr	r1, [pc, #136]	; (8000818 <Slave_States+0xdc>)
 800078e:	4613      	mov	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4413      	add	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	3320      	adds	r3, #32
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2000      	movs	r0, #0
 800079e:	4798      	blx	r3
		}
		break;
 80007a0:	e02f      	b.n	8000802 <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 80007a2:	7bfa      	ldrb	r2, [r7, #15]
 80007a4:	491c      	ldr	r1, [pc, #112]	; (8000818 <Slave_States+0xdc>)
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4413      	add	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	440b      	add	r3, r1
 80007b0:	3320      	adds	r3, #32
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2002      	movs	r0, #2
 80007b6:	4798      	blx	r3
		break;
 80007b8:	e028      	b.n	800080c <Slave_States+0xd0>

	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d01f      	beq.n	8000806 <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_SlaveSendData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 80007c6:	7bfa      	ldrb	r2, [r7, #15]
 80007c8:	4913      	ldr	r1, [pc, #76]	; (8000818 <Slave_States+0xdc>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	3320      	adds	r3, #32
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2003      	movs	r0, #3
 80007da:	4798      	blx	r3
		}

		break;
 80007dc:	e013      	b.n	8000806 <Slave_States+0xca>

	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10f      	bne.n	800080a <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_SlaveReceiveData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 80007ea:	7bfa      	ldrb	r2, [r7, #15]
 80007ec:	490a      	ldr	r1, [pc, #40]	; (8000818 <Slave_States+0xdc>)
 80007ee:	4613      	mov	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4413      	add	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	440b      	add	r3, r1
 80007f8:	3320      	adds	r3, #32
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2004      	movs	r0, #4
 80007fe:	4798      	blx	r3
		}

		break;
 8000800:	e003      	b.n	800080a <Slave_States+0xce>
		break;
 8000802:	bf00      	nop
 8000804:	e002      	b.n	800080c <Slave_States+0xd0>
		break;
 8000806:	bf00      	nop
 8000808:	e000      	b.n	800080c <Slave_States+0xd0>
		break;
 800080a:	bf00      	nop
	}
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40005400 	.word	0x40005400
 8000818:	20000058 	.word	0x20000058

0800081c <I2C1_EV_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void I2C1_EV_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx =I2C1 ;
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <I2C1_EV_IRQHandler+0xe0>)
 8000828:	617b      	str	r3, [r7, #20]
	//Interrupt Handler for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000832:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800083c:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 0310 	and.w	r3, r3, #16
 8000846:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00c      	beq.n	8000868 <I2C1_EV_IRQHandler+0x4c>
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d009      	beq.n	8000868 <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummyRead = I2Cx->SR1;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000860:	2100      	movs	r1, #0
 8000862:	6978      	ldr	r0, [r7, #20]
 8000864:	f7ff ff6a 	bl	800073c <Slave_States>
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d012      	beq.n	800089e <I2C1_EV_IRQHandler+0x82>
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00f      	beq.n	800089e <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	2b00      	cmp	r3, #0
 8000888:	d109      	bne.n	800089e <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummyRead = I2Cx->SR1;
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000896:	2102      	movs	r1, #2
 8000898:	6978      	ldr	r0, [r7, #20]
 800089a:	f7ff ff4f 	bl	800073c <Slave_States>
		}
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00c      	beq.n	80008c8 <I2C1_EV_IRQHandler+0xac>
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d009      	beq.n	80008c8 <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d103      	bne.n	80008c8 <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 80008c0:	2103      	movs	r1, #3
 80008c2:	6978      	ldr	r0, [r7, #20]
 80008c4:	f7ff ff3a 	bl	800073c <Slave_States>
		}
	}
	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d0:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d00c      	beq.n	80008f2 <I2C1_EV_IRQHandler+0xd6>
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d009      	beq.n	80008f2 <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d103      	bne.n	80008f2 <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 80008ea:	2104      	movs	r1, #4
 80008ec:	6978      	ldr	r0, [r7, #20]
 80008ee:	f7ff ff25 	bl	800073c <Slave_States>
		}
	}
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40005400 	.word	0x40005400

08000900 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
//			//Slave mode
//			Slave_States(I2Cx,I2C_EV_DATA_RCV);
//		}
//	}

}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <SPI1_IRQHandler+0x54>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	085b      	lsrs	r3, r3, #1
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	793b      	ldrb	r3, [r7, #4]
 8000938:	f362 0300 	bfi	r3, r2, #0, #1
 800093c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <SPI1_IRQHandler+0x54>)
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	793b      	ldrb	r3, [r7, #4]
 800094a:	f362 0341 	bfi	r3, r2, #1, #1
 800094e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <SPI1_IRQHandler+0x54>)
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	793b      	ldrb	r3, [r7, #4]
 800095e:	f362 0382 	bfi	r3, r2, #2, #1
 8000962:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <SPI1_IRQHandler+0x58>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	7938      	ldrb	r0, [r7, #4]
 800096c:	4798      	blx	r3
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40013000 	.word	0x40013000
 800097c:	200000a0 	.word	0x200000a0

08000980 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <SPI2_IRQHandler+0x54>)
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	b2da      	uxtb	r2, r3
 8000992:	793b      	ldrb	r3, [r7, #4]
 8000994:	f362 0300 	bfi	r3, r2, #0, #1
 8000998:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <SPI2_IRQHandler+0x54>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	793b      	ldrb	r3, [r7, #4]
 80009a6:	f362 0341 	bfi	r3, r2, #1, #1
 80009aa:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <SPI2_IRQHandler+0x54>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	793b      	ldrb	r3, [r7, #4]
 80009ba:	f362 0382 	bfi	r3, r2, #2, #1
 80009be:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SPI2_IRQHandler+0x58>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	7938      	ldrb	r0, [r7, #4]
 80009c8:	4798      	blx	r3
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40013000 	.word	0x40013000
 80009d8:	200000a0 	.word	0x200000a0

080009dc <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler (void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 80009e0:	4b02      	ldr	r3, [pc, #8]	; (80009ec <USART1_IRQHandler+0x10>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	4798      	blx	r3
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200000a8 	.word	0x200000a8

080009f0 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <USART2_IRQHandler+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	4798      	blx	r3
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000a8 	.word	0x200000a8

08000a04 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000a08:	4b02      	ldr	r3, [pc, #8]	; (8000a14 <USART3_IRQHandler+0x10>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	4798      	blx	r3
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000a8 	.word	0x200000a8

08000a18 <__libc_init_array>:
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	4e0c      	ldr	r6, [pc, #48]	; (8000a50 <__libc_init_array+0x38>)
 8000a1e:	4c0d      	ldr	r4, [pc, #52]	; (8000a54 <__libc_init_array+0x3c>)
 8000a20:	1ba4      	subs	r4, r4, r6
 8000a22:	10a4      	asrs	r4, r4, #2
 8000a24:	42a5      	cmp	r5, r4
 8000a26:	d109      	bne.n	8000a3c <__libc_init_array+0x24>
 8000a28:	f000 f81a 	bl	8000a60 <_init>
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	4e0a      	ldr	r6, [pc, #40]	; (8000a58 <__libc_init_array+0x40>)
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <__libc_init_array+0x44>)
 8000a32:	1ba4      	subs	r4, r4, r6
 8000a34:	10a4      	asrs	r4, r4, #2
 8000a36:	42a5      	cmp	r5, r4
 8000a38:	d105      	bne.n	8000a46 <__libc_init_array+0x2e>
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
 8000a3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a40:	4798      	blx	r3
 8000a42:	3501      	adds	r5, #1
 8000a44:	e7ee      	b.n	8000a24 <__libc_init_array+0xc>
 8000a46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a4a:	4798      	blx	r3
 8000a4c:	3501      	adds	r5, #1
 8000a4e:	e7f2      	b.n	8000a36 <__libc_init_array+0x1e>
 8000a50:	08000a9c 	.word	0x08000a9c
 8000a54:	08000a9c 	.word	0x08000a9c
 8000a58:	08000a9c 	.word	0x08000a9c
 8000a5c:	08000aa0 	.word	0x08000aa0

08000a60 <_init>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr

08000a6c <_fini>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	bf00      	nop
 8000a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a72:	bc08      	pop	{r3}
 8000a74:	469e      	mov	lr, r3
 8000a76:	4770      	bx	lr
