
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080012f0  080012f0  000112f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800131c  0800131c  00011324  2**0
                  CONTENTS
  4 .ARM          00000000  0800131c  0800131c  00011324  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800131c  08001324  00011324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800131c  0800131c  0001131c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001320  08001320  00011320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000000  08001324  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08001324  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011324  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c90  00000000  00000000  0001134d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011c5  00000000  00000000  00017fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001724  00000000  00000000  000191a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000388  00000000  00000000  0001a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000300  00000000  00000000  0001ac50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00004d08  00000000  00000000  0001af50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003dd5  00000000  00000000  0001fc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000134f9  00000000  00000000  00023a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00036f26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bf8  00000000  00000000  00036fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080012d8 	.word	0x080012d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080012d8 	.word	0x080012d8

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
#include "CortexMX_OS_porting.h"

unsigned char SysTick_LED ;

void HardFault_Handler (void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while (1) ;
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void MemManage_Handler (void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while (1) ;
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}
void BusFault_Handler (void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while (1) ;
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}
void UsageFault_Handler (void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while (1) ;
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler()
{
	__asm("tst lr,#4       \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 bb93 	b.w	800096c <OS_SVC>
			"ITE EQ        \n\t"
			"mrseq r0,MSP  \n\t"
			"mrsne r0,PSP  \n\t"
			"B OS_SVC");
}
 8000246:	bf00      	nop

08000248 <HW_Init>:

void HW_Init ()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	// X Count -> 1 ms
	// X = 800 Count

	//decrease PenSV  interrupt priority to be  smaller than or equal  SySTICK Timer
	//SysTICK have a priority 14
	__NVIC_SetPriority(PendSV_IRQn, 15);
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <trigger_OS_PendSV>:

void trigger_OS_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Start_Ticker>:

void Start_Ticker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// 8Mhz
	// 1 Count -> 0.125
	// X Count -> 1 ms
	// X = 800 Count
	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SysTick_Handler>:


void SysTick_Handler()
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SysTick_LED ^= 1 ;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SysTick_Handler+0x24>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <SysTick_Handler+0x24>)
 8000298:	701a      	strb	r2, [r3, #0]

	MYRTOS_Update_TaskWaiting_Time();
 800029a:	f000 fc09 	bl	8000ab0 <MYRTOS_Update_TaskWaiting_Time>

	//Determine PCurrent & PNext
	Decide_WhatNext();
 800029e:	f000 fb13 	bl	80008c8 <Decide_WhatNext>

	//Switch Context & Restore
	trigger_OS_PendSV();
 80002a2:	f7ff ffdb 	bl	800025c <trigger_OS_PendSV>

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200000b4 	.word	0x200000b4

080002b0 <FIFO_init>:
 */


#include"MYRTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]

	if(!buff )
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <FIFO_init+0x16>
		return FIFO_NULL;
 80002c2:	2303      	movs	r3, #3
 80002c4:	e011      	b.n	80002ea <FIFO_init+0x3a>

	fifo->base = buff ;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002e8:	2300      	movs	r3, #0

}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <FIFO_enqueue+0x1a>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800030e:	2303      	movs	r3, #3
 8000310:	e02d      	b.n	800036e <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	429a      	cmp	r2, r3
 800031c:	d107      	bne.n	800032e <FIFO_enqueue+0x3a>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	429a      	cmp	r2, r3
 8000328:	d101      	bne.n	800032e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800032a:	2301      	movs	r3, #1
 800032c:	e01f      	b.n	800036e <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68d2      	ldr	r2, [r2, #12]
 8000348:	4611      	mov	r1, r2
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	6912      	ldr	r2, [r2, #16]
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	440a      	add	r2, r1
 8000352:	3a04      	subs	r2, #4
 8000354:	4293      	cmp	r3, r2
 8000356:	d104      	bne.n	8000362 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	e004      	b.n	800036c <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	1d1a      	adds	r2, r3, #4
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800036c:	2300      	movs	r3, #0


}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <FIFO_dequeue+0x1a>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000392:	2303      	movs	r3, #3
 8000394:	e028      	b.n	80003e8 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003a2:	2302      	movs	r3, #2
 80003a4:	e020      	b.n	80003e8 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	68d2      	ldr	r2, [r2, #12]
 80003c2:	4611      	mov	r1, r2
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6912      	ldr	r2, [r2, #16]
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	440a      	add	r2, r1
 80003cc:	3a04      	subs	r2, #4
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d104      	bne.n	80003dc <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	e004      	b.n	80003e6 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	1d1a      	adds	r2, r3, #4
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
	...

080003f4 <PendSV_Handler>:
{
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 80003f4:	4b6c      	ldr	r3, [pc, #432]	; (80005a8 <PendSV_Handler+0x1b4>)
 80003f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003fa:	f3ef 8009 	mrs	r0, PSP
 80003fe:	4602      	mov	r2, r0
 8000400:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP-- ;
 8000402:	4b69      	ldr	r3, [pc, #420]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000404:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000408:	699a      	ldr	r2, [r3, #24]
 800040a:	3a04      	subs	r2, #4
 800040c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800040e:	4b66      	ldr	r3, [pc, #408]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000410:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4622      	mov	r2, r4
 8000418:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800041a:	4b63      	ldr	r3, [pc, #396]	; (80005a8 <PendSV_Handler+0x1b4>)
 800041c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000420:	699a      	ldr	r2, [r3, #24]
 8000422:	3a04      	subs	r2, #4
 8000424:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000426:	4b60      	ldr	r3, [pc, #384]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000428:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	462a      	mov	r2, r5
 8000430:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000432:	4b5d      	ldr	r3, [pc, #372]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000434:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000438:	699a      	ldr	r2, [r3, #24]
 800043a:	3a04      	subs	r2, #4
 800043c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800043e:	4b5a      	ldr	r3, [pc, #360]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000440:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4632      	mov	r2, r6
 8000448:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800044a:	4b57      	ldr	r3, [pc, #348]	; (80005a8 <PendSV_Handler+0x1b4>)
 800044c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	3a04      	subs	r2, #4
 8000454:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000456:	4b54      	ldr	r3, [pc, #336]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000458:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	463a      	mov	r2, r7
 8000460:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000462:	4b51      	ldr	r3, [pc, #324]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000464:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	3a04      	subs	r2, #4
 800046c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800046e:	4b4e      	ldr	r3, [pc, #312]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000470:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4642      	mov	r2, r8
 8000478:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800047a:	4b4b      	ldr	r3, [pc, #300]	; (80005a8 <PendSV_Handler+0x1b4>)
 800047c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	3a04      	subs	r2, #4
 8000484:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000486:	4b48      	ldr	r3, [pc, #288]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000488:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	464a      	mov	r2, r9
 8000490:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000492:	4b45      	ldr	r3, [pc, #276]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000494:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000498:	699a      	ldr	r2, [r3, #24]
 800049a:	3a04      	subs	r2, #4
 800049c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800049e:	4b42      	ldr	r3, [pc, #264]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4652      	mov	r2, sl
 80004a8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 80004aa:	4b3f      	ldr	r3, [pc, #252]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	3a04      	subs	r2, #4
 80004b4:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 80004b6:	4b3c      	ldr	r3, [pc, #240]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	465a      	mov	r2, fp
 80004c0:	601a      	str	r2, [r3, #0]


	//====================================
	//Restore the Context of the Next Task
	//====================================
	OS_Control.CurrentTask = OS_Control.NextTask ;
 80004c2:	4b39      	ldr	r3, [pc, #228]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004c8:	4a37      	ldr	r2, [pc, #220]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004ca:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL ;
 80004ce:	4b36      	ldr	r3, [pc, #216]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	__asm("mov r11,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80004d6:	4b34      	ldr	r3, [pc, #208]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 80004e2:	4b31      	ldr	r3, [pc, #196]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e8:	699a      	ldr	r2, [r3, #24]
 80004ea:	3204      	adds	r2, #4
 80004ec:	619a      	str	r2, [r3, #24]
	__asm("mov r10,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80004ee:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 80004fa:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000500:	699a      	ldr	r2, [r3, #24]
 8000502:	3204      	adds	r2, #4
 8000504:	619a      	str	r2, [r3, #24]
	__asm("mov r9,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000506:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000508:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000514:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	3204      	adds	r2, #4
 800051c:	619a      	str	r2, [r3, #24]
	__asm("mov r8,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 800051e:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000520:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <PendSV_Handler+0x1b4>)
 800052c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000530:	699a      	ldr	r2, [r3, #24]
 8000532:	3204      	adds	r2, #4
 8000534:	619a      	str	r2, [r3, #24]
	__asm("mov r7,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000538:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000544:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000548:	699a      	ldr	r2, [r3, #24]
 800054a:	3204      	adds	r2, #4
 800054c:	619a      	str	r2, [r3, #24]
	__asm("mov r6,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000550:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <PendSV_Handler+0x1b4>)
 800055c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000560:	699a      	ldr	r2, [r3, #24]
 8000562:	3204      	adds	r2, #4
 8000564:	619a      	str	r2, [r3, #24]
	__asm("mov r5,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000568:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000574:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000578:	699a      	ldr	r2, [r3, #24]
 800057a:	3204      	adds	r2, #4
 800057c:	619a      	str	r2, [r3, #24]
	__asm("mov r4,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000580:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <PendSV_Handler+0x1b4>)
 800058c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000590:	699a      	ldr	r2, [r3, #24]
 8000592:	3204      	adds	r2, #4
 8000594:	619a      	str	r2, [r3, #24]

	//Update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000598:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4618      	mov	r0, r3
 80005a0:	f380 8809 	msr	PSP, r0
	__asm("BX LR");
 80005a4:	4770      	bx	lr


}
 80005a6:	bf00      	nop
 80005a8:	200000b8 	.word	0x200000b8

080005ac <MYRTOS_IdleTask>:


void MYRTOS_IdleTask()
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
		//
		//		"wfi" instruction only waits for external interrupts which are generated by peripherals or external events and not the exceptional interrupts which are generated by the CPU itself.
		//
		//		In general, when you want to wait for any type of interrupt, you can use the "wfi" instruction, but if you want to wait for a specific event, you would use the "wfe" instruction, as it allows you to wait for a specific event, rather than any interrupt.
		//
		IdleTask_LED ^= 1 ;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <MYRTOS_IdleTask+0x18>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f083 0301 	eor.w	r3, r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <MYRTOS_IdleTask+0x18>)
 80005bc:	701a      	strb	r2, [r3, #0]
		__asm("wfe") ;
 80005be:	bf20      	wfe
		IdleTask_LED ^= 1 ;
 80005c0:	e7f6      	b.n	80005b0 <MYRTOS_IdleTask+0x4>
 80005c2:	bf00      	nop
 80005c4:	20000264 	.word	0x20000264

080005c8 <MYRTOS_Create_MainStack>:
	}
}


void MYRTOS_Create_MainStack()
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack ;
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <MYRTOS_Create_MainStack+0x34>)
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MYRTOS_Create_MainStack+0x38>)
 80005d0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

	//Aligned 8 Bytes spaces between Main Task and PSP tasks
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize ;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MYRTOS_Create_MainStack+0x38>)
 80005d6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80005da:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <MYRTOS_Create_MainStack+0x38>)
 80005e0:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MYRTOS_Create_MainStack+0x38>)
 80005e6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80005ea:	3b08      	subs	r3, #8
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <MYRTOS_Create_MainStack+0x38>)
 80005ee:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	// if (_E_MSP_Task < _&eheap) Error : Exceeded the available stack size
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20002800 	.word	0x20002800
 8000600:	200000b8 	.word	0x200000b8

08000604 <MYRTOS_Init>:



MYRTOS_ErrorID MYRTOS_Init()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	MYRTOS_ErrorID error = NoError ;
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OS Suspend)
	OS_Control.OSmodeID = OSsuspend ;
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MYRTOS_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the Main Stack For OS
	MYRTOS_Create_MainStack();
 8000616:	f7ff ffd7 	bl	80005c8 <MYRTOS_Create_MainStack>

	//Create OS Ready Queue
	if (FIFO_init(&Ready_QUEUE,Ready_QUEUE_FIFO, 100) != FIFO_NO_ERROR )
 800061a:	2264      	movs	r2, #100	; 0x64
 800061c:	4913      	ldr	r1, [pc, #76]	; (800066c <MYRTOS_Init+0x68>)
 800061e:	4814      	ldr	r0, [pc, #80]	; (8000670 <MYRTOS_Init+0x6c>)
 8000620:	f7ff fe46 	bl	80002b0 <FIFO_init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <MYRTOS_Init+0x2c>
	{
		error += Ready_Queue_init_error ;
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	3301      	adds	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]
	}

	//Configure Idle Task
	strcpy(MYRTOS_idleTask.TaskName,"IdleTask");
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MYRTOS_Init+0x70>)
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <MYRTOS_Init+0x74>)
 8000634:	ca07      	ldmia	r2, {r0, r1, r2}
 8000636:	c303      	stmia	r3!, {r0, r1}
 8000638:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 255 ;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MYRTOS_Init+0x78>)
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_IdleTask ;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MYRTOS_Init+0x78>)
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <MYRTOS_Init+0x7c>)
 8000644:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300 ;
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <MYRTOS_Init+0x78>)
 8000648:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800064c:	601a      	str	r2, [r3, #0]


	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <MYRTOS_Init+0x78>)
 8000650:	f000 f856 	bl	8000700 <MYRTOS_CreateTask>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4413      	add	r3, r2
 800065c:	71fb      	strb	r3, [r7, #7]

	return error ;
 800065e:	79fb      	ldrb	r3, [r7, #7]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000b8 	.word	0x200000b8
 800066c:	200002c0 	.word	0x200002c0
 8000670:	20000268 	.word	0x20000268
 8000674:	20000298 	.word	0x20000298
 8000678:	080012f0 	.word	0x080012f0
 800067c:	2000027c 	.word	0x2000027c
 8000680:	080005ad 	.word	0x080005ad

08000684 <MYRTOS_Create_Task_Stack>:




void MYRTOS_Create_Task_Stack(Task_ref* Tref)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	 * r0
	 *====
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */

	Tref->Current_PSP = Tref->_S_PSP_Task ;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP-- ;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	1f1a      	subs	r2, r3, #4
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000;         //DUMMY_XPSR should T =1 to avoid BUS fault;//0x01000000
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006a8:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	1f1a      	subs	r2, r3, #4
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ; //LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	1f1a      	subs	r2, r3, #4
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP)  = 0xFFFFFFFD ;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f06f 0202 	mvn.w	r2, #2
 80006d0:	601a      	str	r2, [r3, #0]

	for (int  j=0 ; j< 13 ; j++ )
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e00b      	b.n	80006f0 <MYRTOS_Create_Task_Stack+0x6c>
	{
		Tref->Current_PSP-- ;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	1f1a      	subs	r2, r3, #4
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP)  = 0 ;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0c      	cmp	r3, #12
 80006f4:	ddf0      	ble.n	80006d8 <MYRTOS_Create_Task_Stack+0x54>

	}

}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <MYRTOS_CreateTask>:

MYRTOS_ErrorID MYRTOS_CreateTask(Task_ref* Tref )
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	MYRTOS_ErrorID error = NoError ;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]

	//Create Its OWN PSP stack
	//Check task size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator ;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MYRTOS_CreateTask+0x64>)
 800070e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size ;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	691a      	ldr	r2, [r3, #16]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	1ad2      	subs	r2, r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	615a      	str	r2, [r3, #20]
	//	{
	//		return Task_exceeded_StackSize ;
	//	}

	//Aligned 8 Bytes spaces between Task PSP and Other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8) ;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	3b08      	subs	r3, #8
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <MYRTOS_CreateTask+0x64>)
 800072c:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MYRTOS_Create_Task_Stack(Tref);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ffa7 	bl	8000684 <MYRTOS_Create_Task_Stack>

	//Update Scheduler table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks]= Tref ;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MYRTOS_CreateTask+0x64>)
 8000738:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800073c:	4909      	ldr	r1, [pc, #36]	; (8000764 <MYRTOS_CreateTask+0x64>)
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++ ;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MYRTOS_CreateTask+0x64>)
 8000746:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800074a:	3301      	adds	r3, #1
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <MYRTOS_CreateTask+0x64>)
 800074e:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	//Task State Update -> Suspend
	Tref->TaskState = Suspend ;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000b8 	.word	0x200000b8

08000768 <bubbleSort>:

//Handler mode
void bubbleSort()
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	Task_ref* temp ;
	n = OS_Control.NoOfActiveTasks ;
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <bubbleSort+0x8c>)
 8000770:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000774:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e030      	b.n	80007de <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	e023      	b.n	80007ca <bubbleSort+0x62>
			if (OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j + 1]->priority)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <bubbleSort+0x8c>)
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078a:	791a      	ldrb	r2, [r3, #4]
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	3301      	adds	r3, #1
 8000790:	4918      	ldr	r1, [pc, #96]	; (80007f4 <bubbleSort+0x8c>)
 8000792:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	429a      	cmp	r2, r3
 800079a:	d913      	bls.n	80007c4 <bubbleSort+0x5c>
			{
				temp = OS_Control.OSTasks[j] ;
 800079c:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <bubbleSort+0x8c>)
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a4:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j + 1 ] ;
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	3301      	adds	r3, #1
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <bubbleSort+0x8c>)
 80007ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b0:	4910      	ldr	r1, [pc, #64]	; (80007f4 <bubbleSort+0x8c>)
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j + 1] = temp ;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	3301      	adds	r3, #1
 80007bc:	490d      	ldr	r1, [pc, #52]	; (80007f4 <bubbleSort+0x8c>)
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	3b01      	subs	r3, #1
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d3d4      	bcc.n	8000782 <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3301      	adds	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d3c9      	bcc.n	800077c <bubbleSort+0x14>
			}

}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	200000b8 	.word	0x200000b8

080007f8 <MYRTOS_Update_Schadule_Tables>:

//Handler mode
void MYRTOS_Update_Schadule_Tables()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
	Task_ref* temp = NULL ;
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask ;
	Task_ref* PnextTask ;
	int i = 0 ;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubbleSort();
 8000806:	f7ff ffaf 	bl	8000768 <bubbleSort>

	//2- free Ready Queue
	while(FIFO_dequeue(&Ready_QUEUE, &temp /*pointer to pointer*/)!=FIFO_EMPTY);
 800080a:	bf00      	nop
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	482b      	ldr	r0, [pc, #172]	; (80008c0 <MYRTOS_Update_Schadule_Tables+0xc8>)
 8000812:	f7ff fdb1 	bl	8000378 <FIFO_dequeue>
 8000816:	4603      	mov	r3, r0
 8000818:	2b02      	cmp	r3, #2
 800081a:	d1f7      	bne.n	800080c <MYRTOS_Update_Schadule_Tables+0x14>

	//3- update ready queue
	while(i< OS_Control.NoOfActiveTasks)
 800081c:	e044      	b.n	80008a8 <MYRTOS_Update_Schadule_Tables+0xb0>
	{
		Ptask = OS_Control.OSTasks[i] ;
 800081e:	4a29      	ldr	r2, [pc, #164]	; (80008c4 <MYRTOS_Update_Schadule_Tables+0xcc>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1] ;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3301      	adds	r3, #1
 800082c:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <MYRTOS_Update_Schadule_Tables+0xcc>)
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	607b      	str	r3, [r7, #4]
		if (Ptask->TaskState != Suspend)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800083a:	2b00      	cmp	r3, #0
 800083c:	d031      	beq.n	80008a2 <MYRTOS_Update_Schadule_Tables+0xaa>
		{
			//In case of reaching to the end of available OSTASKS
			if (PnextTask->TaskState == Suspend)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000844:	2b00      	cmp	r3, #0
 8000846:	d108      	bne.n	800085a <MYRTOS_Update_Schadule_Tables+0x62>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	481d      	ldr	r0, [pc, #116]	; (80008c0 <MYRTOS_Update_Schadule_Tables+0xc8>)
 800084c:	f7ff fd52 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2203      	movs	r2, #3
 8000854:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 8000858:	e02e      	b.n	80008b8 <MYRTOS_Update_Schadule_Tables+0xc0>
			}
			//If Ptask Priority > PnextTask Priority then (lowest number is meaning higher priority)
			if (Ptask->priority < PnextTask->priority )
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	791a      	ldrb	r2, [r3, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	d208      	bcs.n	8000878 <MYRTOS_Update_Schadule_Tables+0x80>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000866:	68b9      	ldr	r1, [r7, #8]
 8000868:	4815      	ldr	r0, [pc, #84]	; (80008c0 <MYRTOS_Update_Schadule_Tables+0xc8>)
 800086a:	f7ff fd43 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	2203      	movs	r2, #3
 8000872:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 8000876:	e01f      	b.n	80008b8 <MYRTOS_Update_Schadule_Tables+0xc0>
			}
			else if (Ptask->priority == PnextTask->priority)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	791a      	ldrb	r2, [r3, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	d108      	bne.n	8000896 <MYRTOS_Update_Schadule_Tables+0x9e>
			{
				//if the Ptask priority == PnextTask Priority then
				//Push Ptask to ready state
				//make the Ptask = PnextTask and PnextTask++
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MYRTOS_Update_Schadule_Tables+0xc8>)
 8000888:	f7ff fd34 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	2203      	movs	r2, #3
 8000890:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8000894:	e005      	b.n	80008a2 <MYRTOS_Update_Schadule_Tables+0xaa>
			}
			else if (Ptask->priority > PnextTask->priority)
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	791a      	ldrb	r2, [r3, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d809      	bhi.n	80008b6 <MYRTOS_Update_Schadule_Tables+0xbe>
				break ;
			}
		}


		i++ ;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.NoOfActiveTasks)
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MYRTOS_Update_Schadule_Tables+0xcc>)
 80008aa:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d8b4      	bhi.n	800081e <MYRTOS_Update_Schadule_Tables+0x26>
	}

}
 80008b4:	e000      	b.n	80008b8 <MYRTOS_Update_Schadule_Tables+0xc0>
				break ;
 80008b6:	bf00      	nop
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000268 	.word	0x20000268
 80008c4:	200000b8 	.word	0x200000b8

080008c8 <Decide_WhatNext>:

//Handler mode
void Decide_WhatNext()
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	//If Ready Queue is empty && OS_Control->currentTask != suspend
	if (Ready_QUEUE.counter == 0 && OS_Control.CurrentTask->TaskState != Suspend) //FIFO_EMPTY
 80008cc:	4b24      	ldr	r3, [pc, #144]	; (8000960 <Decide_WhatNext+0x98>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d11a      	bne.n	800090a <Decide_WhatNext+0x42>
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <Decide_WhatNext+0x9c>)
 80008d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d013      	beq.n	800090a <Decide_WhatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running ;
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <Decide_WhatNext+0x9c>)
 80008e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//Add the current task again(round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <Decide_WhatNext+0x9c>)
 80008f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008f4:	4619      	mov	r1, r3
 80008f6:	481a      	ldr	r0, [pc, #104]	; (8000960 <Decide_WhatNext+0x98>)
 80008f8:	f7ff fcfc 	bl	80002f4 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask ;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <Decide_WhatNext+0x9c>)
 80008fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <Decide_WhatNext+0x9c>)
 8000904:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = ready ;
		}
	}
}
 8000908:	e027      	b.n	800095a <Decide_WhatNext+0x92>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 800090a:	4917      	ldr	r1, [pc, #92]	; (8000968 <Decide_WhatNext+0xa0>)
 800090c:	4814      	ldr	r0, [pc, #80]	; (8000960 <Decide_WhatNext+0x98>)
 800090e:	f7ff fd33 	bl	8000378 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running ;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <Decide_WhatNext+0x9c>)
 8000914:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000918:	2201      	movs	r2, #1
 800091a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority )&&(OS_Control.CurrentTask->TaskState != Suspend))
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <Decide_WhatNext+0x9c>)
 8000920:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000924:	791a      	ldrb	r2, [r3, #4]
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <Decide_WhatNext+0x9c>)
 8000928:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	429a      	cmp	r2, r3
 8000930:	d113      	bne.n	800095a <Decide_WhatNext+0x92>
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <Decide_WhatNext+0x9c>)
 8000934:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000938:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00c      	beq.n	800095a <Decide_WhatNext+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <Decide_WhatNext+0x9c>)
 8000942:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <Decide_WhatNext+0x98>)
 800094a:	f7ff fcd3 	bl	80002f4 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = ready ;
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <Decide_WhatNext+0x9c>)
 8000950:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000954:	2203      	movs	r2, #3
 8000956:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000268 	.word	0x20000268
 8000964:	200000b8 	.word	0x200000b8
 8000968:	2000025c 	.word	0x2000025c

0800096c <OS_SVC>:


//Handler mode
void OS_SVC(int* StackFramePointer)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set stack start found in -> r0 , r0 is pointed by StackFramePointer
	//OS_SVC_Set stack : r0,r1,r2,r12,LR,PC,XPSR

	unsigned char SVC_number ;

	SVC_number = *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2)) ;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3318      	adds	r3, #24
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3b02      	subs	r3, #2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	73fb      	strb	r3, [r7, #15]

	switch(SVC_number)
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db1f      	blt.n	80009c6 <OS_SVC+0x5a>
 8000986:	2b01      	cmp	r3, #1
 8000988:	dd02      	ble.n	8000990 <OS_SVC+0x24>
 800098a:	2b02      	cmp	r3, #2
 800098c:	d017      	beq.n	80009be <OS_SVC+0x52>
		//Update Scheduler Table , Ready Queue
		MYRTOS_Update_Schadule_Tables();
		break ;
	}

}
 800098e:	e01a      	b.n	80009c6 <OS_SVC+0x5a>
		MYRTOS_Update_Schadule_Tables();
 8000990:	f7ff ff32 	bl	80007f8 <MYRTOS_Update_Schadule_Tables>
		if (OS_Control.OSmodeID == OSRunning)
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <OS_SVC+0x64>)
 8000996:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800099a:	2b01      	cmp	r3, #1
 800099c:	d112      	bne.n	80009c4 <OS_SVC+0x58>
			if (strcmp(OS_Control.CurrentTask->TaskName,"IdleTask") != 0)
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <OS_SVC+0x64>)
 80009a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a4:	331c      	adds	r3, #28
 80009a6:	490b      	ldr	r1, [pc, #44]	; (80009d4 <OS_SVC+0x68>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fbe1 	bl	8000170 <strcmp>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d007      	beq.n	80009c4 <OS_SVC+0x58>
				Decide_WhatNext();
 80009b4:	f7ff ff88 	bl	80008c8 <Decide_WhatNext>
				trigger_OS_PendSV();
 80009b8:	f7ff fc50 	bl	800025c <trigger_OS_PendSV>
		break ;
 80009bc:	e002      	b.n	80009c4 <OS_SVC+0x58>
		MYRTOS_Update_Schadule_Tables();
 80009be:	f7ff ff1b 	bl	80007f8 <MYRTOS_Update_Schadule_Tables>
		break ;
 80009c2:	e000      	b.n	80009c6 <OS_SVC+0x5a>
		break ;
 80009c4:	bf00      	nop
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000b8 	.word	0x200000b8
 80009d4:	080012f0 	.word	0x080012f0

080009d8 <MYRTOS_OS_SVC_Set>:

//Thread mode
void MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d006      	beq.n	80009f6 <MYRTOS_OS_SVC_Set+0x1e>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d006      	beq.n	80009fa <MYRTOS_OS_SVC_Set+0x22>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d000      	beq.n	80009f2 <MYRTOS_OS_SVC_Set+0x1a>
	case SVC_TaskWaiting :
		__asm("svc #0x02");

		break ;
	}
}
 80009f0:	e005      	b.n	80009fe <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x00");
 80009f2:	df00      	svc	0
		break ;
 80009f4:	e003      	b.n	80009fe <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x01");
 80009f6:	df01      	svc	1
		break ;
 80009f8:	e001      	b.n	80009fe <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x02");
 80009fa:	df02      	svc	2
		break ;
 80009fc:	bf00      	nop
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <MYRTOS_ActivateTask>:


void MYRTOS_ActivateTask(Task_ref* Tref)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting ;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2202      	movs	r2, #2
 8000a14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff ffdd 	bl	80009d8 <MYRTOS_OS_SVC_Set>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <MYRTOS_TaskWait>:

}


void MYRTOS_TaskWait(unsigned int NoTicks ,Task_ref* SelfTref)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
	SelfTref->TimingWaiting.Blocking = Enable ;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SelfTref->TimingWaiting.Ticks_Count = NoTicks ;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	641a      	str	r2, [r3, #64]	; 0x40

	//Task Should Be Blocked
	SelfTref->TaskState = Suspend ;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	//To be Suspend Immediately
	MYRTOS_OS_SVC_Set(SVC_TerminateTask);
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff ffc6 	bl	80009d8 <MYRTOS_OS_SVC_Set>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <MYRTOS_StartOS>:

void MYRTOS_StartOS()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID = OSRunning ;
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MYRTOS_StartOS+0x54>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Set Default "Current Task = Idle Task"
	OS_Control.CurrentTask = &MYRTOS_idleTask ;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MYRTOS_StartOS+0x54>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MYRTOS_StartOS+0x58>)
 8000a64:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	//Activate Idle Task
	MYRTOS_ActivateTask(&MYRTOS_idleTask);
 8000a68:	4810      	ldr	r0, [pc, #64]	; (8000aac <MYRTOS_StartOS+0x58>)
 8000a6a:	f7ff ffcd 	bl	8000a08 <MYRTOS_ActivateTask>

	//Start my timer (ticker)
	Start_Ticker(); //1ms
 8000a6e:	f7ff fc03 	bl	8000278 <Start_Ticker>

	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MYRTOS_StartOS+0x54>)
 8000a74:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f380 8809 	msr	PSP, r0

	//Switch Thread mode SP from MSP to PSP
	OS_SWITCH_SP_TO_PSP;
 8000a80:	f3ef 8014 	mrs	r0, CONTROL
 8000a84:	f04f 0102 	mov.w	r1, #2
 8000a88:	ea40 0001 	orr.w	r0, r0, r1
 8000a8c:	f380 8814 	msr	CONTROL, r0
	SWITCH_CPU_AccessLevel_UNPRIVILEGED;
 8000a90:	f3ef 8314 	mrs	r3, CONTROL
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.p_TaskEntry();
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <MYRTOS_StartOS+0x58>)
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	4798      	blx	r3
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200000b8 	.word	0x200000b8
 8000aac:	2000027c 	.word	0x2000027c

08000ab0 <MYRTOS_Update_TaskWaiting_Time>:


void MYRTOS_Update_TaskWaiting_Time()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	int i ;
	for (i = 0 ; i < OS_Control.NoOfActiveTasks ; i++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	e031      	b.n	8000b20 <MYRTOS_Update_TaskWaiting_Time+0x70>
	{
		if ((OS_Control.OSTasks[i]->TaskState == Suspend) && (OS_Control.OSTasks[i]->TimingWaiting.Blocking == Enable ))
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d126      	bne.n	8000b1a <MYRTOS_Update_TaskWaiting_Time+0x6a>
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d11e      	bne.n	8000b1a <MYRTOS_Update_TaskWaiting_Time+0x6a>
		{
			OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count-- ;
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae6:	3a01      	subs	r2, #1
 8000ae8:	641a      	str	r2, [r3, #64]	; 0x40

			if(OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count == 0)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d110      	bne.n	8000b1a <MYRTOS_Update_TaskWaiting_Time+0x6a>
			{
				OS_Control.OSTasks[i]->TimingWaiting.Blocking = Disable ;
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	2201      	movs	r2, #1
 8000b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				OS_Control.OSTasks[i]->TaskState = Waiting ;
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	2202      	movs	r2, #2
 8000b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				MYRTOS_OS_SVC_Set(SVC_TaskWaiting);
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff ff5f 	bl	80009d8 <MYRTOS_OS_SVC_Set>
	for (i = 0 ; i < OS_Control.NoOfActiveTasks ; i++)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000b22:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8c7      	bhi.n	8000abc <MYRTOS_Update_TaskWaiting_Time+0xc>
			}
		}
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000b8 	.word	0x200000b8

08000b38 <task1>:

Task_ref Task1, Task2 , Task3 , Task4 ;
unsigned char Task1_LED , Task2_LED , Task3_LED , Task4_LED ;

void task1 ()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	static int count = 0 ;
	while(1)
	{
		//Task1 Code
		Task1_LED ^= 1 ;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <task1+0x3c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	f083 0301 	eor.w	r3, r3, #1
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <task1+0x3c>)
 8000b48:	701a      	strb	r2, [r3, #0]
		count++ ;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <task1+0x40>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <task1+0x40>)
 8000b52:	6013      	str	r3, [r2, #0]

		if (count == 30)
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <task1+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b1e      	cmp	r3, #30
 8000b5a:	d105      	bne.n	8000b68 <task1+0x30>
		{
			MYRTOS_ActivateTask(&Task4);
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <task1+0x44>)
 8000b5e:	f7ff ff53 	bl	8000a08 <MYRTOS_ActivateTask>
			count = 0 ;
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <task1+0x40>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
		}
		//Toggle Every 100ms
		MYRTOS_TaskWait(100,&Task1);
 8000b68:	4905      	ldr	r1, [pc, #20]	; (8000b80 <task1+0x48>)
 8000b6a:	2064      	movs	r0, #100	; 0x64
 8000b6c:	f7ff ff5b 	bl	8000a26 <MYRTOS_TaskWait>
		Task1_LED ^= 1 ;
 8000b70:	e7e4      	b.n	8000b3c <task1+0x4>
 8000b72:	bf00      	nop
 8000b74:	200004dc 	.word	0x200004dc
 8000b78:	2000001c 	.word	0x2000001c
 8000b7c:	20000450 	.word	0x20000450
 8000b80:	20000498 	.word	0x20000498

08000b84 <task2>:
	}
}

void task2 ()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	while(1)
	{
		//Task2 Code
		Task2_LED ^= 1 ;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <task2+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <task2+0x20>)
 8000b94:	701a      	strb	r2, [r3, #0]
		//Toggle Every 300ms
		MYRTOS_TaskWait(300,&Task2);
 8000b96:	4904      	ldr	r1, [pc, #16]	; (8000ba8 <task2+0x24>)
 8000b98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b9c:	f7ff ff43 	bl	8000a26 <MYRTOS_TaskWait>
		Task2_LED ^= 1 ;
 8000ba0:	e7f2      	b.n	8000b88 <task2+0x4>
 8000ba2:	bf00      	nop
 8000ba4:	2000056c 	.word	0x2000056c
 8000ba8:	20000528 	.word	0x20000528

08000bac <task3>:
	}
}

void task3 ()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	while(1)
	{
		//Task3 Code
		Task3_LED ^= 1 ;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <task3+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	f083 0301 	eor.w	r3, r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <task3+0x20>)
 8000bbc:	701a      	strb	r2, [r3, #0]
		//Toggle Every 500ms
		MYRTOS_TaskWait(500,&Task3);
 8000bbe:	4904      	ldr	r1, [pc, #16]	; (8000bd0 <task3+0x24>)
 8000bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc4:	f7ff ff2f 	bl	8000a26 <MYRTOS_TaskWait>
		Task3_LED ^= 1 ;
 8000bc8:	e7f2      	b.n	8000bb0 <task3+0x4>
 8000bca:	bf00      	nop
 8000bcc:	20000494 	.word	0x20000494
 8000bd0:	200004e0 	.word	0x200004e0

08000bd4 <task4>:
	}
}

void task4 ()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	static int count = 0 ;
	while(1)
	{
		//Task3 Code
		Task4_LED ^= 1 ;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <task4+0x28>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	f083 0301 	eor.w	r3, r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <task4+0x28>)
 8000be4:	701a      	strb	r2, [r3, #0]
		count++;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <task4+0x2c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <task4+0x2c>)
 8000bee:	6013      	str	r3, [r2, #0]
		MYRTOS_TaskWait(1000,&Task4);
 8000bf0:	4904      	ldr	r1, [pc, #16]	; (8000c04 <task4+0x30>)
 8000bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf6:	f7ff ff16 	bl	8000a26 <MYRTOS_TaskWait>
		Task4_LED ^= 1 ;
 8000bfa:	e7ed      	b.n	8000bd8 <task4+0x4>
 8000bfc:	20000524 	.word	0x20000524
 8000c00:	20000020 	.word	0x20000020
 8000c04:	20000450 	.word	0x20000450

08000c08 <main>:
	}
}

int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
	MYRTOS_ErrorID error ;
	//HW_Init (Initialize Clock tree , Reset Controller)
	HW_Init();
 8000c0e:	f7ff fb1b 	bl	8000248 <HW_Init>

	if ( MYRTOS_Init() != NoError )
 8000c12:	f7ff fcf7 	bl	8000604 <MYRTOS_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d000      	beq.n	8000c1e <main+0x16>
		while(1) ;
 8000c1c:	e7fe      	b.n	8000c1c <main+0x14>


	Task1.Stack_Size = 1024 ;
 8000c1e:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <main+0xf8>)
 8000c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c24:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = task1 ;
 8000c26:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <main+0xf8>)
 8000c28:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <main+0xfc>)
 8000c2a:	609a      	str	r2, [r3, #8]
	Task1.priority = 3 ;
 8000c2c:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <main+0xf8>)
 8000c2e:	2203      	movs	r2, #3
 8000c30:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName ,"task1");
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <main+0x100>)
 8000c34:	4a35      	ldr	r2, [pc, #212]	; (8000d0c <main+0x104>)
 8000c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c3a:	6018      	str	r0, [r3, #0]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	8019      	strh	r1, [r3, #0]

	Task2.Stack_Size = 1024 ;
 8000c40:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <main+0x108>)
 8000c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c46:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = task2 ;
 8000c48:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <main+0x108>)
 8000c4a:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <main+0x10c>)
 8000c4c:	609a      	str	r2, [r3, #8]
	Task2.priority = 3 ;
 8000c4e:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <main+0x108>)
 8000c50:	2203      	movs	r2, #3
 8000c52:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName ,"task2");
 8000c54:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <main+0x110>)
 8000c56:	4a31      	ldr	r2, [pc, #196]	; (8000d1c <main+0x114>)
 8000c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c5c:	6018      	str	r0, [r3, #0]
 8000c5e:	3304      	adds	r3, #4
 8000c60:	8019      	strh	r1, [r3, #0]


	Task3.Stack_Size = 1024 ;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <main+0x118>)
 8000c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c68:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = task3 ;
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <main+0x118>)
 8000c6c:	4a2d      	ldr	r2, [pc, #180]	; (8000d24 <main+0x11c>)
 8000c6e:	609a      	str	r2, [r3, #8]
	Task3.priority = 3 ;
 8000c70:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <main+0x118>)
 8000c72:	2203      	movs	r2, #3
 8000c74:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName ,"task3");
 8000c76:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <main+0x120>)
 8000c78:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <main+0x124>)
 8000c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c7e:	6018      	str	r0, [r3, #0]
 8000c80:	3304      	adds	r3, #4
 8000c82:	8019      	strh	r1, [r3, #0]

	Task4.Stack_Size = 1024 ;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <main+0x128>)
 8000c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8a:	601a      	str	r2, [r3, #0]
	Task4.p_TaskEntry = task4 ;
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <main+0x128>)
 8000c8e:	4a29      	ldr	r2, [pc, #164]	; (8000d34 <main+0x12c>)
 8000c90:	609a      	str	r2, [r3, #8]
	Task4.priority = 1 ;
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <main+0x128>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	711a      	strb	r2, [r3, #4]
	strcpy(Task4.TaskName ,"task4");
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <main+0x130>)
 8000c9a:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <main+0x134>)
 8000c9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ca0:	6018      	str	r0, [r3, #0]
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	8019      	strh	r1, [r3, #0]

	error += MYRTOS_CreateTask(&Task1);
 8000ca6:	4816      	ldr	r0, [pc, #88]	; (8000d00 <main+0xf8>)
 8000ca8:	f7ff fd2a 	bl	8000700 <MYRTOS_CreateTask>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2);
 8000cb6:	4816      	ldr	r0, [pc, #88]	; (8000d10 <main+0x108>)
 8000cb8:	f7ff fd22 	bl	8000700 <MYRTOS_CreateTask>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task3);
 8000cc6:	4816      	ldr	r0, [pc, #88]	; (8000d20 <main+0x118>)
 8000cc8:	f7ff fd1a 	bl	8000700 <MYRTOS_CreateTask>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task4);
 8000cd6:	4816      	ldr	r0, [pc, #88]	; (8000d30 <main+0x128>)
 8000cd8:	f7ff fd12 	bl	8000700 <MYRTOS_CreateTask>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	71fb      	strb	r3, [r7, #7]



	MYRTOS_ActivateTask(&Task1);
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <main+0xf8>)
 8000ce8:	f7ff fe8e 	bl	8000a08 <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task2);
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <main+0x108>)
 8000cee:	f7ff fe8b 	bl	8000a08 <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task3);
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <main+0x118>)
 8000cf4:	f7ff fe88 	bl	8000a08 <MYRTOS_ActivateTask>

	MYRTOS_StartOS();
 8000cf8:	f7ff feac 	bl	8000a54 <MYRTOS_StartOS>


	while (1)
 8000cfc:	e7fe      	b.n	8000cfc <main+0xf4>
 8000cfe:	bf00      	nop
 8000d00:	20000498 	.word	0x20000498
 8000d04:	08000b39 	.word	0x08000b39
 8000d08:	200004b4 	.word	0x200004b4
 8000d0c:	080012fc 	.word	0x080012fc
 8000d10:	20000528 	.word	0x20000528
 8000d14:	08000b85 	.word	0x08000b85
 8000d18:	20000544 	.word	0x20000544
 8000d1c:	08001304 	.word	0x08001304
 8000d20:	200004e0 	.word	0x200004e0
 8000d24:	08000bad 	.word	0x08000bad
 8000d28:	200004fc 	.word	0x200004fc
 8000d2c:	0800130c 	.word	0x0800130c
 8000d30:	20000450 	.word	0x20000450
 8000d34:	08000bd5 	.word	0x08000bd5
 8000d38:	2000046c 	.word	0x2000046c
 8000d3c:	08001314 	.word	0x08001314

08000d40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d42:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d44:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	; (8000d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <LoopForever+0xe>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	; (8000d8c <LoopForever+0x16>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d6e:	f000 fa8f 	bl	8001290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d72:	f7ff ff49 	bl	8000c08 <main>

08000d76 <LoopForever>:

LoopForever:
    b LoopForever
 8000d76:	e7fe      	b.n	8000d76 <LoopForever>
  ldr   r0, =_estack
 8000d78:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d84:	08001324 	.word	0x08001324
  ldr r2, =_sbss
 8000d88:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d8c:	20000570 	.word	0x20000570

08000d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC1_2_IRQHandler>
	...

08000d94 <EXTI0_IRQHandler>:
 * =====================================================================================
 */


void EXTI0_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <EXTI0_IRQHandler+0x1c>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <EXTI0_IRQHandler+0x1c>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <EXTI0_IRQHandler+0x20>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4798      	blx	r3
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40010400 	.word	0x40010400
 8000db4:	20000024 	.word	0x20000024

08000db8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <EXTI1_IRQHandler+0x1c>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <EXTI1_IRQHandler+0x1c>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <EXTI1_IRQHandler+0x20>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	4798      	blx	r3
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40010400 	.word	0x40010400
 8000dd8:	20000024 	.word	0x20000024

08000ddc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <EXTI2_IRQHandler+0x1c>)
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <EXTI2_IRQHandler+0x1c>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <EXTI2_IRQHandler+0x20>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	4798      	blx	r3
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40010400 	.word	0x40010400
 8000dfc:	20000024 	.word	0x20000024

08000e00 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <EXTI3_IRQHandler+0x1c>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <EXTI3_IRQHandler+0x1c>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <EXTI3_IRQHandler+0x20>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	4798      	blx	r3
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40010400 	.word	0x40010400
 8000e20:	20000024 	.word	0x20000024

08000e24 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <EXTI4_IRQHandler+0x1c>)
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <EXTI4_IRQHandler+0x1c>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <EXTI4_IRQHandler+0x20>)
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	4798      	blx	r3
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40010400 	.word	0x40010400
 8000e44:	20000024 	.word	0x20000024

08000e48 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	f003 0320 	and.w	r3, r3, #32
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d008      	beq.n	8000e6a <EXTI9_5_IRQHandler+0x22>
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000e5e:	f043 0320 	orr.w	r3, r3, #32
 8000e62:	6153      	str	r3, [r2, #20]
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <EXTI9_5_IRQHandler+0xa4>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d008      	beq.n	8000e88 <EXTI9_5_IRQHandler+0x40>
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <EXTI9_5_IRQHandler+0xa4>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d008      	beq.n	8000ea6 <EXTI9_5_IRQHandler+0x5e>
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9e:	6153      	str	r3, [r2, #20]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <EXTI9_5_IRQHandler+0xa4>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d008      	beq.n	8000ec4 <EXTI9_5_IRQHandler+0x7c>
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <EXTI9_5_IRQHandler+0xa4>)
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d008      	beq.n	8000ee2 <EXTI9_5_IRQHandler+0x9a>
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <EXTI9_5_IRQHandler+0xa0>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6153      	str	r3, [r2, #20]
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <EXTI9_5_IRQHandler+0xa4>)
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	4798      	blx	r3
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010400 	.word	0x40010400
 8000eec:	20000024 	.word	0x20000024

08000ef0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d008      	beq.n	8000f12 <EXTI15_10_IRQHandler+0x22>
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	4a29      	ldr	r2, [pc, #164]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6153      	str	r3, [r2, #20]
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <EXTI15_10_IRQHandler+0xc0>)
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d008      	beq.n	8000f30 <EXTI15_10_IRQHandler+0x40>
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f28:	6153      	str	r3, [r2, #20]
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <EXTI15_10_IRQHandler+0xc0>)
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d008      	beq.n	8000f4e <EXTI15_10_IRQHandler+0x5e>
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f46:	6153      	str	r3, [r2, #20]
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <EXTI15_10_IRQHandler+0xc0>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d008      	beq.n	8000f6c <EXTI15_10_IRQHandler+0x7c>
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <EXTI15_10_IRQHandler+0xc0>)
 8000f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6a:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d008      	beq.n	8000f8a <EXTI15_10_IRQHandler+0x9a>
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f82:	6153      	str	r3, [r2, #20]
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <EXTI15_10_IRQHandler+0xc0>)
 8000f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f88:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <EXTI15_10_IRQHandler+0xb8>
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <EXTI15_10_IRQHandler+0xbc>)
 8000f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <EXTI15_10_IRQHandler+0xc0>)
 8000fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa6:	4798      	blx	r3
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40010400 	.word	0x40010400
 8000fb0:	20000024 	.word	0x20000024

08000fb4 <Slave_States>:
	/*Send The Address*/
	I2Cx->DR = Address ;
}

void Slave_States(I2C_TypeDef *I2Cx,Slave_State State)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a32      	ldr	r2, [pc, #200]	; (800108c <Slave_States+0xd8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	bf14      	ite	ne
 8000fc8:	2301      	movne	r3, #1
 8000fca:	2300      	moveq	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73fb      	strb	r3, [r7, #15]

	switch(State)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d856      	bhi.n	8001084 <Slave_States+0xd0>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <Slave_States+0x28>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000ff7 	.word	0x08000ff7
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	0800101b 	.word	0x0800101b
 8000fe8:	08001033 	.word	0x08001033
 8000fec:	08001057 	.word	0x08001057
	{
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 8000ff4:	e046      	b.n	8001084 <Slave_States+0xd0>

	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d03b      	beq.n	800107a <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	4922      	ldr	r1, [pc, #136]	; (8001090 <Slave_States+0xdc>)
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3320      	adds	r3, #32
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2000      	movs	r0, #0
 8001016:	4798      	blx	r3
		}
		break;
 8001018:	e02f      	b.n	800107a <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	491c      	ldr	r1, [pc, #112]	; (8001090 <Slave_States+0xdc>)
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	3320      	adds	r3, #32
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2002      	movs	r0, #2
 800102e:	4798      	blx	r3
		break;
 8001030:	e028      	b.n	8001084 <Slave_States+0xd0>

	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	2b00      	cmp	r3, #0
 800103c:	d01f      	beq.n	800107e <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_SlaveSendData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	4913      	ldr	r1, [pc, #76]	; (8001090 <Slave_States+0xdc>)
 8001042:	4613      	mov	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	3320      	adds	r3, #32
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2003      	movs	r0, #3
 8001052:	4798      	blx	r3
		}

		break;
 8001054:	e013      	b.n	800107e <Slave_States+0xca>

	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10f      	bne.n	8001082 <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_SlaveReceiveData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	490a      	ldr	r1, [pc, #40]	; (8001090 <Slave_States+0xdc>)
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3320      	adds	r3, #32
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2004      	movs	r0, #4
 8001076:	4798      	blx	r3
		}

		break;
 8001078:	e003      	b.n	8001082 <Slave_States+0xce>
		break;
 800107a:	bf00      	nop
 800107c:	e002      	b.n	8001084 <Slave_States+0xd0>
		break;
 800107e:	bf00      	nop
 8001080:	e000      	b.n	8001084 <Slave_States+0xd0>
		break;
 8001082:	bf00      	nop
	}
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40005400 	.word	0x40005400
 8001090:	20000060 	.word	0x20000060

08001094 <I2C1_EV_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void I2C1_EV_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx =I2C1 ;
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <I2C1_EV_IRQHandler+0xe0>)
 80010a0:	617b      	str	r3, [r7, #20]
	//Interrupt Handler for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010aa:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b4:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00c      	beq.n	80010e0 <I2C1_EV_IRQHandler+0x4c>
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d009      	beq.n	80010e0 <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummyRead = I2Cx->SR1;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 80010d8:	2100      	movs	r1, #0
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff6a 	bl	8000fb4 <Slave_States>
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d012      	beq.n	8001116 <I2C1_EV_IRQHandler+0x82>
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00f      	beq.n	8001116 <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummyRead = I2Cx->SR1;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 800110e:	2102      	movs	r1, #2
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff ff4f 	bl	8000fb4 <Slave_States>
		}
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00c      	beq.n	8001140 <I2C1_EV_IRQHandler+0xac>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d009      	beq.n	8001140 <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8001138:	2103      	movs	r1, #3
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff3a 	bl	8000fb4 <Slave_States>
		}
	}
	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001148:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00c      	beq.n	800116a <I2C1_EV_IRQHandler+0xd6>
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d009      	beq.n	800116a <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d103      	bne.n	800116a <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8001162:	2104      	movs	r1, #4
 8001164:	6978      	ldr	r0, [r7, #20]
 8001166:	f7ff ff25 	bl	8000fb4 <Slave_States>
		}
	}
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40005400 	.word	0x40005400

08001178 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
//			//Slave mode
//			Slave_States(I2Cx,I2C_EV_DATA_RCV);
//		}
//	}

}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <SPI1_IRQHandler+0x54>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	085b      	lsrs	r3, r3, #1
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	793b      	ldrb	r3, [r7, #4]
 80011b0:	f362 0300 	bfi	r3, r2, #0, #1
 80011b4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <SPI1_IRQHandler+0x54>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	793b      	ldrb	r3, [r7, #4]
 80011c2:	f362 0341 	bfi	r3, r2, #1, #1
 80011c6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <SPI1_IRQHandler+0x54>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	793b      	ldrb	r3, [r7, #4]
 80011d6:	f362 0382 	bfi	r3, r2, #2, #1
 80011da:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SPI1_IRQHandler+0x58>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	7938      	ldrb	r0, [r7, #4]
 80011e4:	4798      	blx	r3
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40013000 	.word	0x40013000
 80011f4:	200000a8 	.word	0x200000a8

080011f8 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <SPI2_IRQHandler+0x54>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	085b      	lsrs	r3, r3, #1
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	793b      	ldrb	r3, [r7, #4]
 800120c:	f362 0300 	bfi	r3, r2, #0, #1
 8001210:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <SPI2_IRQHandler+0x54>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	b2da      	uxtb	r2, r3
 800121c:	793b      	ldrb	r3, [r7, #4]
 800121e:	f362 0341 	bfi	r3, r2, #1, #1
 8001222:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <SPI2_IRQHandler+0x54>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	b2da      	uxtb	r2, r3
 8001230:	793b      	ldrb	r3, [r7, #4]
 8001232:	f362 0382 	bfi	r3, r2, #2, #1
 8001236:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SPI2_IRQHandler+0x58>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	7938      	ldrb	r0, [r7, #4]
 8001240:	4798      	blx	r3
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40013000 	.word	0x40013000
 8001250:	200000a8 	.word	0x200000a8

08001254 <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler (void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <USART1_IRQHandler+0x10>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	4798      	blx	r3
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200000b0 	.word	0x200000b0

08001268 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 800126c:	4b02      	ldr	r3, [pc, #8]	; (8001278 <USART2_IRQHandler+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	4798      	blx	r3
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200000b0 	.word	0x200000b0

0800127c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <USART3_IRQHandler+0x10>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	4798      	blx	r3
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200000b0 	.word	0x200000b0

08001290 <__libc_init_array>:
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	2500      	movs	r5, #0
 8001294:	4e0c      	ldr	r6, [pc, #48]	; (80012c8 <__libc_init_array+0x38>)
 8001296:	4c0d      	ldr	r4, [pc, #52]	; (80012cc <__libc_init_array+0x3c>)
 8001298:	1ba4      	subs	r4, r4, r6
 800129a:	10a4      	asrs	r4, r4, #2
 800129c:	42a5      	cmp	r5, r4
 800129e:	d109      	bne.n	80012b4 <__libc_init_array+0x24>
 80012a0:	f000 f81a 	bl	80012d8 <_init>
 80012a4:	2500      	movs	r5, #0
 80012a6:	4e0a      	ldr	r6, [pc, #40]	; (80012d0 <__libc_init_array+0x40>)
 80012a8:	4c0a      	ldr	r4, [pc, #40]	; (80012d4 <__libc_init_array+0x44>)
 80012aa:	1ba4      	subs	r4, r4, r6
 80012ac:	10a4      	asrs	r4, r4, #2
 80012ae:	42a5      	cmp	r5, r4
 80012b0:	d105      	bne.n	80012be <__libc_init_array+0x2e>
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
 80012b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012b8:	4798      	blx	r3
 80012ba:	3501      	adds	r5, #1
 80012bc:	e7ee      	b.n	800129c <__libc_init_array+0xc>
 80012be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012c2:	4798      	blx	r3
 80012c4:	3501      	adds	r5, #1
 80012c6:	e7f2      	b.n	80012ae <__libc_init_array+0x1e>
 80012c8:	0800131c 	.word	0x0800131c
 80012cc:	0800131c 	.word	0x0800131c
 80012d0:	0800131c 	.word	0x0800131c
 80012d4:	08001320 	.word	0x08001320

080012d8 <_init>:
 80012d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012da:	bf00      	nop
 80012dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012de:	bc08      	pop	{r3}
 80012e0:	469e      	mov	lr, r3
 80012e2:	4770      	bx	lr

080012e4 <_fini>:
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e6:	bf00      	nop
 80012e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ea:	bc08      	pop	{r3}
 80012ec:	469e      	mov	lr, r3
 80012ee:	4770      	bx	lr
