
unit9_lesson1_WDT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a05  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b9  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c8  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a8  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e7  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000025c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  64:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setPinDirection>:
			{
			*PinValue = DIO_PIN_HIGH ;
			}
			else 
			{
			*PinValue = DIO_PIN_LOW ; 
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_setPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_setPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_setPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_setPinDirection+0xea>
  78:	42 30       	cpi	r20, 0x02	; 2
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_setPinDirection+0x12>
  7c:	6c c0       	rjmp	.+216    	; 0x156 <DIO_setPinDirection+0xea>
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	01 f1       	breq	.+64     	; 0xc2 <DIO_setPinDirection+0x56>
  82:	30 f0       	brcs	.+12     	; 0x90 <DIO_setPinDirection+0x24>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	b1 f1       	breq	.+108    	; 0xf4 <DIO_setPinDirection+0x88>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_setPinDirection+0x22>
  8c:	4c c0       	rjmp	.+152    	; 0x126 <DIO_setPinDirection+0xba>
  8e:	08 95       	ret
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	59 f4       	brne	.+22     	; 0xaa <DIO_setPinDirection+0x3e>
  94:	2a b3       	in	r18, 0x1a	; 26
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_setPinDirection+0x34>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_setPinDirection+0x30>
  a4:	82 2b       	or	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x46>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_setPinDirection+0x70>
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_setPinDirection+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_setPinDirection+0x62>
  d6:	82 2b       	or	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x78>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_setPinDirection+0xa2>
  f8:	24 b3       	in	r18, 0x14	; 20
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_setPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_setPinDirection+0x94>
 108:	82 2b       	or	r24, r18
 10a:	84 bb       	out	0x14, r24	; 20
 10c:	08 95       	ret
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0xaa>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_setPinDirection+0xd4>
 12a:	21 b3       	in	r18, 0x11	; 17
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_setPinDirection+0xca>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_setPinDirection+0xc6>
 13a:	82 2b       	or	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_togglePinValue>:

void DIO_togglePinValue(u8 PortId, u8 PinId)

{
	
	if ( (PortId<=3) && (PinId<=7) ) 
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	a8 f5       	brcc	.+106    	; 0x1c6 <DIO_togglePinValue+0x6e>
 15c:	68 30       	cpi	r22, 0x08	; 8
 15e:	98 f5       	brcc	.+102    	; 0x1c6 <DIO_togglePinValue+0x6e>
	{
		switch (PortId ) 
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	89 f0       	breq	.+34     	; 0x186 <DIO_togglePinValue+0x2e>
 164:	28 f0       	brcs	.+10     	; 0x170 <DIO_togglePinValue+0x18>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	c9 f0       	breq	.+50     	; 0x19c <DIO_togglePinValue+0x44>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	11 f1       	breq	.+68     	; 0x1b2 <DIO_togglePinValue+0x5a>
 16e:	08 95       	ret
		{
			case 0 : // DIO_PORTA
			
			TOG_BIT(PORTA,PinId) ; 
 170:	2b b3       	in	r18, 0x1b	; 27
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_togglePinValue+0x24>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_togglePinValue+0x20>
 180:	82 27       	eor	r24, r18
 182:	8b bb       	out	0x1b, r24	; 27
			
			break ; 
 184:	08 95       	ret
			
			case 1 : // DIO_PORTB
			
			TOG_BIT(PORTB,PinId) ; 
 186:	28 b3       	in	r18, 0x18	; 24
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_togglePinValue+0x3a>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_togglePinValue+0x36>
 196:	82 27       	eor	r24, r18
 198:	88 bb       	out	0x18, r24	; 24
			
			break ; 
 19a:	08 95       	ret
			
			case 2 : // DIO_PORTC
			
			TOG_BIT(PORTC,PinId) ; 
 19c:	25 b3       	in	r18, 0x15	; 21
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_togglePinValue+0x50>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_togglePinValue+0x4c>
 1ac:	82 27       	eor	r24, r18
 1ae:	85 bb       	out	0x15, r24	; 21
			
			break ; 
 1b0:	08 95       	ret
			
			case 3 : // DIO_PORTD
			
			TOG_BIT(PORTD,PinId) ; 
 1b2:	22 b3       	in	r18, 0x12	; 18
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_togglePinValue+0x66>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_togglePinValue+0x62>
 1c2:	82 27       	eor	r24, r18
 1c4:	82 bb       	out	0x12, r24	; 18
 1c6:	08 95       	ret

000001c8 <main>:
#include   "DIO_interface.h"


int main(void)
{
	DIO_setPinDirection(DIO_PORTC,DIO_PIN0,DIO_PIN_OUTPUT);
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	84 e3       	ldi	r24, 0x34	; 52
 1d6:	9c e0       	ldi	r25, 0x0C	; 12
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x10>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x1a>
 1e2:	00 00       	nop
	_delay_ms(500);
	while (1)
	{
		WDT_start();
 1e4:	0e 94 04 01 	call	0x208	; 0x208 <WDT_start>
		DIO_togglePinValue(DIO_PORTC,DIO_PIN0);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_togglePinValue>
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	83 ed       	ldi	r24, 0xD3	; 211
 1f4:	90 e3       	ldi	r25, 0x30	; 48
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x2e>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x38>
 200:	00 00       	nop
	    _delay_ms(2000);
		WDT_stop();
 202:	0e 94 11 01 	call	0x222	; 0x222 <WDT_stop>
 206:	ee cf       	rjmp	.-36     	; 0x1e4 <main+0x1c>

00000208 <WDT_start>:


void WDT_start(void)
{
	// Select Prescaler Value >>> 1 Sec 
	CLR_BIT(WDTCR,0);
 208:	81 b5       	in	r24, 0x21	; 33
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	81 bd       	out	0x21, r24	; 33
	SET_BIT(WDTCR,1);
 20e:	81 b5       	in	r24, 0x21	; 33
 210:	82 60       	ori	r24, 0x02	; 2
 212:	81 bd       	out	0x21, r24	; 33
	SET_BIT(WDTCR,2);
 214:	81 b5       	in	r24, 0x21	; 33
 216:	84 60       	ori	r24, 0x04	; 4
 218:	81 bd       	out	0x21, r24	; 33
	
	// Enable WDT
	SET_BIT(WDTCR,3);
 21a:	81 b5       	in	r24, 0x21	; 33
 21c:	88 60       	ori	r24, 0x08	; 8
 21e:	81 bd       	out	0x21, r24	; 33
 220:	08 95       	ret

00000222 <WDT_stop>:
}

void WDT_stop(void)
{
	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<4) | (1<<3);
 222:	88 e1       	ldi	r24, 0x18	; 24
 224:	81 bd       	out	0x21, r24	; 33
	/* Turn off WDT */
	WDTCR = 0x00;
 226:	11 bc       	out	0x21, r1	; 33
 228:	08 95       	ret

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
