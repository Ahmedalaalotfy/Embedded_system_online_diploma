
unit8_lesson1_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000002a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd5  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071f  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000828  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00001f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057a  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000635  00000000  00000000  00002752  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00002d87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_10>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  74:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPortDirection>:

/* PORTS APIS*/ 
void DIO_setPortDirection(u8 PortId , u8 PortDirection ) 

{
	if ( (PortId<=3) && ( (DIO_PORT_INPUT == PortDirection) || (DIO_PORT_OUTPUT == PortDirection) ) ) 
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	38 f5       	brcc	.+78     	; 0xce <DIO_setPortDirection+0x52>
  80:	9f ef       	ldi	r25, 0xFF	; 255
  82:	96 0f       	add	r25, r22
  84:	9e 3f       	cpi	r25, 0xFE	; 254
  86:	18 f1       	brcs	.+70     	; 0xce <DIO_setPortDirection+0x52>
	{
		switch (PortId) 
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	69 f0       	breq	.+26     	; 0xa6 <DIO_setPortDirection+0x2a>
  8c:	28 f0       	brcs	.+10     	; 0x98 <DIO_setPortDirection+0x1c>
  8e:	82 30       	cpi	r24, 0x02	; 2
  90:	89 f0       	breq	.+34     	; 0xb4 <DIO_setPortDirection+0x38>
  92:	83 30       	cpi	r24, 0x03	; 3
  94:	b1 f0       	breq	.+44     	; 0xc2 <DIO_setPortDirection+0x46>
  96:	08 95       	ret
		{
			case 0 : // PORTA 
			if (DIO_PORT_OUTPUT == PortDirection)
  98:	6f 3f       	cpi	r22, 0xFF	; 255
  9a:	19 f4       	brne	.+6      	; 0xa2 <DIO_setPortDirection+0x26>
			{
				DDRA = 0xff ; 
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a bb       	out	0x1a, r24	; 26
  a0:	08 95       	ret
			}
			else 
			{
				DDRA = 0x00 ; 
  a2:	1a ba       	out	0x1a, r1	; 26
  a4:	08 95       	ret
			}
			break ;
			
			case 1: // PORTB
			if (DIO_PORT_OUTPUT == PortDirection)
  a6:	6f 3f       	cpi	r22, 0xFF	; 255
  a8:	19 f4       	brne	.+6      	; 0xb0 <DIO_setPortDirection+0x34>
			{
				DDRB= 0xff ; 
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 bb       	out	0x17, r24	; 23
  ae:	08 95       	ret
			}
			else 
			{
				DDRB = 0x00 ; 
  b0:	17 ba       	out	0x17, r1	; 23
  b2:	08 95       	ret
			}
			break ;
			
			case 2 : // PORTC 
			if (DIO_PORT_OUTPUT == PortDirection)
  b4:	6f 3f       	cpi	r22, 0xFF	; 255
  b6:	19 f4       	brne	.+6      	; 0xbe <DIO_setPortDirection+0x42>
			{
				DDRC = 0xff ; 
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
  bc:	08 95       	ret
			}
			else 
			{
				DDRC = 0x00 ; 
  be:	14 ba       	out	0x14, r1	; 20
  c0:	08 95       	ret
			}
			break ;
			
			case 3 : // PORTD 
			if (DIO_PORT_OUTPUT == PortDirection)
  c2:	6f 3f       	cpi	r22, 0xFF	; 255
  c4:	19 f4       	brne	.+6      	; 0xcc <DIO_setPortDirection+0x50>
			{
				DDRD = 0xff ; 
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	81 bb       	out	0x11, r24	; 17
  ca:	08 95       	ret
			}
			else 
			{
				DDRD = 0x00 ; 
  cc:	11 ba       	out	0x11, r1	; 17
  ce:	08 95       	ret

000000d0 <GI_enable>:
#include   "GI_interface.h"


void GI_enable(void)
{
	SET_BIT (SREG,7);
  d0:	8f b7       	in	r24, 0x3f	; 63
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8f bf       	out	0x3f, r24	; 63
  d6:	08 95       	ret

000000d8 <CTC_func>:

}*/

void CTC_func(void)
{
  PORTA = ~PORTA ;
  d8:	8b b3       	in	r24, 0x1b	; 27
  da:	80 95       	com	r24
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	08 95       	ret

000000e0 <main>:

int main(void)
{
	

    DIO_setPortDirection(DIO_PORTA,DIO_PORT_HIGH); 
  e0:	6f ef       	ldi	r22, 0xFF	; 255
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPortDirection>

	GI_enable();
  e8:	0e 94 68 00 	call	0xd0	; 0xd0 <GI_enable>
	TMR_timer0_CTC_SetCallBack(&CTC_func);
  ec:	8c e6       	ldi	r24, 0x6C	; 108
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <TMR_timer0_CTC_SetCallBack>
	
	TMR_timer0Init();
  f4:	0e 94 7f 00 	call	0xfe	; 0xfe <TMR_timer0Init>
	TMR_timer0Start();
  f8:	0e 94 89 00 	call	0x112	; 0x112 <TMR_timer0Start>
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x1c>

000000fe <TMR_timer0Init>:

void TMR_timer0_OVF_SetCallBack(void(*ptr)(void))
{
	if (ptr != NULL)
	{
		TMR_timer0_OVF_pCallBack= ptr ;
  fe:	83 b7       	in	r24, 0x33	; 51
 100:	8f 7b       	andi	r24, 0xBF	; 191
 102:	83 bf       	out	0x33, r24	; 51
 104:	83 b7       	in	r24, 0x33	; 51
 106:	88 60       	ori	r24, 0x08	; 8
 108:	83 bf       	out	0x33, r24	; 51
 10a:	89 b7       	in	r24, 0x39	; 57
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	89 bf       	out	0x39, r24	; 57
 110:	08 95       	ret

00000112 <TMR_timer0Start>:
 112:	83 b7       	in	r24, 0x33	; 51
 114:	81 60       	ori	r24, 0x01	; 1
 116:	83 bf       	out	0x33, r24	; 51
 118:	83 b7       	in	r24, 0x33	; 51
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	83 bf       	out	0x33, r24	; 51
 11e:	83 b7       	in	r24, 0x33	; 51
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	83 bf       	out	0x33, r24	; 51
 124:	08 95       	ret

00000126 <__vector_11>:
}

// ISR function prototype for TMR0 OVF
void __vector_11(void) __attribute__ ((signal));
void __vector_11(void)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	static u16 counterOVF = 0 ;
	counterOVF ++ ; 
 148:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counterOVF.1652>
 14c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counterOVF.1652+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counterOVF.1652+0x1>
 156:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counterOVF.1652>
	
	// Set Preload Value
	TCNT0 = TMR_TMR0_PRELOAD_VALUE ;
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	82 bf       	out	0x32, r24	; 50
	
	if ( TMR_TMR0_OVERFLOW_COUNTER == counterOVF )
 15e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counterOVF.1652>
 162:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counterOVF.1652+0x1>
 166:	88 3e       	cpi	r24, 0xE8	; 232
 168:	93 40       	sbci	r25, 0x03	; 3
 16a:	69 f4       	brne	.+26     	; 0x186 <__vector_11+0x60>
	{
	  // Set Preload Value	
      TCNT0 = TMR_TMR0_PRELOAD_VALUE ;
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	82 bf       	out	0x32, r24	; 50
	  
	  // Set Counter
	  counterOVF = 0 ; 
 170:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counterOVF.1652+0x1>
 174:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counterOVF.1652>
	  
	  // Call Action 
	   	if (TMR_timer0_OVF_pCallBack != NULL)
 178:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TMR_timer0_OVF_pCallBack>
 17c:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TMR_timer0_OVF_pCallBack+0x1>
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	09 f0       	breq	.+2      	; 0x186 <__vector_11+0x60>
	   	{
		   	TMR_timer0_OVF_pCallBack();
 184:	09 95       	icall
	   	}	
	}
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <TMR_timer0_CTC_SetCallBack>:

void TMR_timer0_CTC_SetCallBack(void(*ptr)(void))
{
	if (ptr != NULL)
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	21 f0       	breq	.+8      	; 0x1b4 <TMR_timer0_CTC_SetCallBack+0xc>
	{
		TMR_timer0_CTC_pCallBack= ptr ;
 1ac:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <TMR_timer0_CTC_pCallBack+0x1>
 1b0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TMR_timer0_CTC_pCallBack>
 1b4:	08 95       	ret

000001b6 <__vector_10>:
}

// ISR function prototype for TMR0 CTC
void __vector_10(void) __attribute__ ((signal));
void __vector_10(void)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	static u16 counterCTC = 0 ;
	counterCTC ++ ;
 1d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1dc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 1e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
	if ( TMR_TMR0_CTC_COUNTER == counterCTC )
 1ea:	88 3e       	cpi	r24, 0xE8	; 232
 1ec:	93 40       	sbci	r25, 0x03	; 3
 1ee:	59 f4       	brne	.+22     	; 0x206 <__vector_10+0x50>
	{
		// Clear Counter 
		counterCTC = 0 ;
 1f0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 1f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		
		// Call Action               
		if (TMR_timer0_CTC_pCallBack != NULL)
 1f8:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <TMR_timer0_CTC_pCallBack>
 1fc:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <TMR_timer0_CTC_pCallBack+0x1>
 200:	30 97       	sbiw	r30, 0x00	; 0
 202:	09 f0       	breq	.+2      	; 0x206 <__vector_10+0x50>
		{
			TMR_timer0_CTC_pCallBack();
 204:	09 95       	icall
		}
	}
}
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
