
unit9_lesson2_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000008ee  00000962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a88  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a1  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cc8  00000000  00000000  00002e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  00003ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000582  00000000  00000000  00003cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c37  00000000  00000000  0000426e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00004ea5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <main>
  7a:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
#include "ADC_Interface.h"

void ADC_init(void)
{
	// Select Vref = AVCC
	SET_BIT(ADMUX,6);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 64       	ori	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	8f 77       	andi	r24, 0x7F	; 127
  8c:	87 b9       	out	0x07, r24	; 7
	
	// Choose Right Adjustment
	CLR_BIT(ADMUX,5);
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	8f 7d       	andi	r24, 0xDF	; 223
  92:	87 b9       	out	0x07, r24	; 7
	
	// Disable Auto Trigger ( Single Conversion Mode )
	CLR_BIT(ADCSRA,5);
  94:	86 b1       	in	r24, 0x06	; 6
  96:	8f 7d       	andi	r24, 0xDF	; 223
  98:	86 b9       	out	0x06, r24	; 6
	
	// Disable Interrupt 
	CLR_BIT(ADCSRA,3);
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	87 7f       	andi	r24, 0xF7	; 247
  9e:	86 b9       	out	0x06, r24	; 6
	
	// Prescaler 64 for 8MHZ 
	CLR_BIT(ADCSRA,0);
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	86 b9       	out	0x06, r24	; 6
	
	// ADC Enable 
	SET_BIT(ADCSRA,7);
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <ADC_getDigitalValue>:
	
}

void ADC_getDigitalValue(u8 channelNum, u16* digitalValue)
{
	if ( (channelNum<32) && (digitalValue !=  NULL) )
  ba:	80 32       	cpi	r24, 0x20	; 32
  bc:	b0 f4       	brcc	.+44     	; 0xea <ADC_getDigitalValue+0x30>
  be:	61 15       	cp	r22, r1
  c0:	71 05       	cpc	r23, r1
  c2:	99 f0       	breq	.+38     	; 0xea <ADC_getDigitalValue+0x30>
	{
		// Clear ADMUX Channel Bits
		ADMUX &= 0b11100000 ; 
  c4:	97 b1       	in	r25, 0x07	; 7
  c6:	90 7e       	andi	r25, 0xE0	; 224
  c8:	97 b9       	out	0x07, r25	; 7
		
		// Select Channel Number 
		ADMUX |= channelNum ;
  ca:	97 b1       	in	r25, 0x07	; 7
  cc:	89 2b       	or	r24, r25
  ce:	87 b9       	out	0x07, r24	; 7
		
		// Start Conversion 
		SET_BIT(ADCSRA,6);
  d0:	86 b1       	in	r24, 0x06	; 6
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	86 b9       	out	0x06, r24	; 6
		
		// Waiting For Flag Of ADC
		while (0 == GET_BIT(ADCSRA,4)) ;
  d6:	34 9b       	sbis	0x06, 4	; 6
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <ADC_getDigitalValue+0x1c>
		
		// Clear Flag
		SET_BIT(ADCSRA,4);
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	86 b9       	out	0x06, r24	; 6
		
		*digitalValue = ADC_u16 ; 
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	fb 01       	movw	r30, r22
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <DIO_setPinDirection>:
/* PINS APIS*/ 

void DIO_setPinDirection(u8 PortId, u8 PinId , u8 PinDirection ) 

{
 if ( (PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT ) || (PinDirection == DIO_PIN_INPUT)) )
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	08 f0       	brcs	.+2      	; 0xf2 <DIO_setPinDirection+0x6>
  f0:	72 c0       	rjmp	.+228    	; 0x1d6 <DIO_setPinDirection+0xea>
  f2:	68 30       	cpi	r22, 0x08	; 8
  f4:	08 f0       	brcs	.+2      	; 0xf8 <DIO_setPinDirection+0xc>
  f6:	6f c0       	rjmp	.+222    	; 0x1d6 <DIO_setPinDirection+0xea>
  f8:	42 30       	cpi	r20, 0x02	; 2
  fa:	08 f0       	brcs	.+2      	; 0xfe <DIO_setPinDirection+0x12>
  fc:	6c c0       	rjmp	.+216    	; 0x1d6 <DIO_setPinDirection+0xea>
 { 
	switch (PortId)  // DIO PORTA
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	01 f1       	breq	.+64     	; 0x142 <DIO_setPinDirection+0x56>
 102:	30 f0       	brcs	.+12     	; 0x110 <DIO_setPinDirection+0x24>
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	b1 f1       	breq	.+108    	; 0x174 <DIO_setPinDirection+0x88>
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	09 f4       	brne	.+2      	; 0x10e <DIO_setPinDirection+0x22>
 10c:	4c c0       	rjmp	.+152    	; 0x1a6 <DIO_setPinDirection+0xba>
 10e:	08 95       	ret
	{
		case 0 : 
		if (DIO_PIN_OUTPUT == PinDirection)
 110:	41 30       	cpi	r20, 0x01	; 1
 112:	59 f4       	brne	.+22     	; 0x12a <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_setPinDirection+0x34>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_setPinDirection+0x30>
 124:	82 2b       	or	r24, r18
 126:	8a bb       	out	0x1a, r24	; 26
 128:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,PinId);
 12a:	2a b3       	in	r18, 0x1a	; 26
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_setPinDirection+0x4a>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_setPinDirection+0x46>
 13a:	80 95       	com	r24
 13c:	82 23       	and	r24, r18
 13e:	8a bb       	out	0x1a, r24	; 26
 140:	08 95       	ret
		}
		break ;
		
		case 1 : // DIO PORTB 
		if (DIO_PIN_OUTPUT == PinDirection)
 142:	41 30       	cpi	r20, 0x01	; 1
 144:	59 f4       	brne	.+22     	; 0x15c <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
 146:	27 b3       	in	r18, 0x17	; 23
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_setPinDirection+0x66>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_setPinDirection+0x62>
 156:	82 2b       	or	r24, r18
 158:	87 bb       	out	0x17, r24	; 23
 15a:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB,PinId);
 15c:	27 b3       	in	r18, 0x17	; 23
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_setPinDirection+0x7c>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_setPinDirection+0x78>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	87 bb       	out	0x17, r24	; 23
 172:	08 95       	ret
		}
		break ;
		
		case 2 : // DIO PORTC 
		if (DIO_PIN_OUTPUT == PinDirection)
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	59 f4       	brne	.+22     	; 0x18e <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
 178:	24 b3       	in	r18, 0x14	; 20
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_setPinDirection+0x98>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_setPinDirection+0x94>
 188:	82 2b       	or	r24, r18
 18a:	84 bb       	out	0x14, r24	; 20
 18c:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC,PinId);
 18e:	24 b3       	in	r18, 0x14	; 20
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setPinDirection+0xae>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setPinDirection+0xaa>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	84 bb       	out	0x14, r24	; 20
 1a4:	08 95       	ret
		}
		break ;
		
		case 3 : // DIO PORTD 
		if (DIO_PIN_OUTPUT == PinDirection)
 1a6:	41 30       	cpi	r20, 0x01	; 1
 1a8:	59 f4       	brne	.+22     	; 0x1c0 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 1aa:	21 b3       	in	r18, 0x11	; 17
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_setPinDirection+0xca>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_setPinDirection+0xc6>
 1ba:	82 2b       	or	r24, r18
 1bc:	81 bb       	out	0x11, r24	; 17
 1be:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD,PinId);
 1c0:	21 b3       	in	r18, 0x11	; 17
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_setPinDirection+0xe0>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_setPinDirection+0xdc>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	81 bb       	out	0x11, r24	; 17
 1d6:	08 95       	ret

000001d8 <DIO_setPinValue>:
}

void DIO_setPinValue(u8 PortId, u8 PinId , u8 PinValue)

{
	 if ( (PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH ) || (PinValue == DIO_PIN_LOW)) )
 1d8:	84 30       	cpi	r24, 0x04	; 4
 1da:	08 f0       	brcs	.+2      	; 0x1de <DIO_setPinValue+0x6>
 1dc:	72 c0       	rjmp	.+228    	; 0x2c2 <DIO_setPinValue+0xea>
 1de:	68 30       	cpi	r22, 0x08	; 8
 1e0:	08 f0       	brcs	.+2      	; 0x1e4 <DIO_setPinValue+0xc>
 1e2:	6f c0       	rjmp	.+222    	; 0x2c2 <DIO_setPinValue+0xea>
 1e4:	42 30       	cpi	r20, 0x02	; 2
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <DIO_setPinValue+0x12>
 1e8:	6c c0       	rjmp	.+216    	; 0x2c2 <DIO_setPinValue+0xea>
	 {
		 switch (PortId) 
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	01 f1       	breq	.+64     	; 0x22e <DIO_setPinValue+0x56>
 1ee:	30 f0       	brcs	.+12     	; 0x1fc <DIO_setPinValue+0x24>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	b1 f1       	breq	.+108    	; 0x260 <DIO_setPinValue+0x88>
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	09 f4       	brne	.+2      	; 0x1fa <DIO_setPinValue+0x22>
 1f8:	4c c0       	rjmp	.+152    	; 0x292 <DIO_setPinValue+0xba>
 1fa:	08 95       	ret
		 {
			 case 0 : // DIO_PORTA
			 if (DIO_PIN_HIGH==PinValue)
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	59 f4       	brne	.+22     	; 0x216 <DIO_setPinValue+0x3e>
			 {
			    SET_BIT(PORTA,PinId);
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_setPinValue+0x34>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_setPinValue+0x30>
 210:	82 2b       	or	r24, r18
 212:	8b bb       	out	0x1b, r24	; 27
 214:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTA,PinId) ; 
 216:	2b b3       	in	r18, 0x1b	; 27
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_setPinValue+0x4a>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_setPinValue+0x46>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	8b bb       	out	0x1b, r24	; 27
 22c:	08 95       	ret
			 }
			 break ; 
			 
			 case 1 : // DIO_PORTB
			 if (DIO_PIN_HIGH==PinValue)
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	59 f4       	brne	.+22     	; 0x248 <DIO_setPinValue+0x70>
			 {
			    SET_BIT(PORTB,PinId);
 232:	28 b3       	in	r18, 0x18	; 24
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_setPinValue+0x66>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_setPinValue+0x62>
 242:	82 2b       	or	r24, r18
 244:	88 bb       	out	0x18, r24	; 24
 246:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTB,PinId) ; 
 248:	28 b3       	in	r18, 0x18	; 24
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_setPinValue+0x7c>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_setPinValue+0x78>
 258:	80 95       	com	r24
 25a:	82 23       	and	r24, r18
 25c:	88 bb       	out	0x18, r24	; 24
 25e:	08 95       	ret
			 }
			 break ; 
			 
			 case 2 : // DIO_PORTC
			 if (DIO_PIN_HIGH==PinValue)
 260:	41 30       	cpi	r20, 0x01	; 1
 262:	59 f4       	brne	.+22     	; 0x27a <DIO_setPinValue+0xa2>
			 {
			    SET_BIT(PORTC,PinId);
 264:	25 b3       	in	r18, 0x15	; 21
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_setPinValue+0x98>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_setPinValue+0x94>
 274:	82 2b       	or	r24, r18
 276:	85 bb       	out	0x15, r24	; 21
 278:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTC,PinId) ; 
 27a:	25 b3       	in	r18, 0x15	; 21
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_setPinValue+0xae>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_setPinValue+0xaa>
 28a:	80 95       	com	r24
 28c:	82 23       	and	r24, r18
 28e:	85 bb       	out	0x15, r24	; 21
 290:	08 95       	ret
			 }
			 break ; 
			 
			 case 3 : // DIO_PORTD
			 if (DIO_PIN_HIGH==PinValue)
 292:	41 30       	cpi	r20, 0x01	; 1
 294:	59 f4       	brne	.+22     	; 0x2ac <DIO_setPinValue+0xd4>
			 {
			    SET_BIT(PORTD,PinId);
 296:	22 b3       	in	r18, 0x12	; 18
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_setPinValue+0xca>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_setPinValue+0xc6>
 2a6:	82 2b       	or	r24, r18
 2a8:	82 bb       	out	0x12, r24	; 18
 2aa:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTD,PinId) ; 
 2ac:	22 b3       	in	r18, 0x12	; 18
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_setPinValue+0xe0>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_setPinValue+0xdc>
 2bc:	80 95       	com	r24
 2be:	82 23       	and	r24, r18
 2c0:	82 bb       	out	0x12, r24	; 18
 2c2:	08 95       	ret

000002c4 <writeHalfPort>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c4:	cf 93       	push	r28
 2c6:	c8 2f       	mov	r28, r24
 2c8:	80 ff       	sbrs	r24, 0
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <writeHalfPort+0x14>
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	64 e0       	ldi	r22, 0x04	; 4
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <writeHalfPort+0x1e>
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	64 e0       	ldi	r22, 0x04	; 4
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 2e2:	c1 ff       	sbrs	r28, 1
 2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <writeHalfPort+0x2e>
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	65 e0       	ldi	r22, 0x05	; 5
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 2f0:	05 c0       	rjmp	.+10     	; 0x2fc <writeHalfPort+0x38>
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	65 e0       	ldi	r22, 0x05	; 5
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 2fc:	c2 ff       	sbrs	r28, 2
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <writeHalfPort+0x48>
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	66 e0       	ldi	r22, 0x06	; 6
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 30a:	05 c0       	rjmp	.+10     	; 0x316 <writeHalfPort+0x52>
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	66 e0       	ldi	r22, 0x06	; 6
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 316:	c3 ff       	sbrs	r28, 3
 318:	06 c0       	rjmp	.+12     	; 0x326 <writeHalfPort+0x62>
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	67 e0       	ldi	r22, 0x07	; 7
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 324:	05 c0       	rjmp	.+10     	; 0x330 <writeHalfPort+0x6c>
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	67 e0       	ldi	r22, 0x07	; 7
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <LCD_sendCmnd>:
 334:	cf 93       	push	r28
 336:	c8 2f       	mov	r28, r24
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 34c:	8c 2f       	mov	r24, r28
 34e:	82 95       	swap	r24
 350:	8f 70       	andi	r24, 0x0F	; 15
 352:	0e 94 62 01 	call	0x2c4	; 0x2c4 <writeHalfPort>
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	63 e0       	ldi	r22, 0x03	; 3
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 360:	8f e9       	ldi	r24, 0x9F	; 159
 362:	9f e0       	ldi	r25, 0x0F	; 15
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_sendCmnd+0x30>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_sendCmnd+0x36>
 36a:	00 00       	nop
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 376:	8c 2f       	mov	r24, r28
 378:	0e 94 62 01 	call	0x2c4	; 0x2c4 <writeHalfPort>
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	63 e0       	ldi	r22, 0x03	; 3
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 386:	8f e9       	ldi	r24, 0x9F	; 159
 388:	9f e0       	ldi	r25, 0x0F	; 15
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_sendCmnd+0x56>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_sendCmnd+0x5c>
 390:	00 00       	nop
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	63 e0       	ldi	r22, 0x03	; 3
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <LCD_init>:
 3a0:	2f e7       	ldi	r18, 0x7F	; 127
 3a2:	85 eb       	ldi	r24, 0xB5	; 181
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	80 40       	sbci	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <LCD_init+0x6>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <LCD_init+0x10>
 3b0:	00 00       	nop
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	62 e0       	ldi	r22, 0x02	; 2
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <writeHalfPort>
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	63 e0       	ldi	r22, 0x03	; 3
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 3d6:	8f e9       	ldi	r24, 0x9F	; 159
 3d8:	9f e0       	ldi	r25, 0x0F	; 15
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_init+0x3a>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_init+0x40>
 3e0:	00 00       	nop
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 3ec:	88 e2       	ldi	r24, 0x28	; 40
 3ee:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_sendCmnd>
 3f2:	90 ef       	ldi	r25, 0xF0	; 240
 3f4:	9a 95       	dec	r25
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_init+0x54>
 3f8:	8f e0       	ldi	r24, 0x0F	; 15
 3fa:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_sendCmnd>
 3fe:	20 ef       	ldi	r18, 0xF0	; 240
 400:	2a 95       	dec	r18
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_sendCmnd>
 40a:	8f e3       	ldi	r24, 0x3F	; 63
 40c:	9f e1       	ldi	r25, 0x1F	; 31
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
 416:	86 e0       	ldi	r24, 0x06	; 6
 418:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_sendCmnd>
 41c:	08 95       	ret

0000041e <LCD_sendChar>:
 41e:	cf 93       	push	r28
 420:	c8 2f       	mov	r28, r24
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	62 e0       	ldi	r22, 0x02	; 2
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 436:	8c 2f       	mov	r24, r28
 438:	82 95       	swap	r24
 43a:	8f 70       	andi	r24, 0x0F	; 15
 43c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <writeHalfPort>
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	63 e0       	ldi	r22, 0x03	; 3
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 44a:	8f e9       	ldi	r24, 0x9F	; 159
 44c:	9f e0       	ldi	r25, 0x0F	; 15
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <LCD_sendChar+0x30>
 452:	00 c0       	rjmp	.+0      	; 0x454 <LCD_sendChar+0x36>
 454:	00 00       	nop
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	63 e0       	ldi	r22, 0x03	; 3
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 460:	8c 2f       	mov	r24, r28
 462:	0e 94 62 01 	call	0x2c4	; 0x2c4 <writeHalfPort>
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	63 e0       	ldi	r22, 0x03	; 3
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 470:	8f e9       	ldi	r24, 0x9F	; 159
 472:	9f e0       	ldi	r25, 0x0F	; 15
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <LCD_sendChar+0x56>
 478:	00 c0       	rjmp	.+0      	; 0x47a <LCD_sendChar+0x5c>
 47a:	00 00       	nop
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	63 e0       	ldi	r22, 0x03	; 3
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_setPinValue>
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <LCD_sendString>:
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	00 97       	sbiw	r24, 0x00	; 0
 492:	29 f4       	brne	.+10     	; 0x49e <LCD_sendString+0x14>
 494:	0c c0       	rjmp	.+24     	; 0x4ae <LCD_sendString+0x24>
 496:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 49a:	cf 5f       	subi	r28, 0xFF	; 255
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <LCD_sendString+0x18>
 49e:	8c 01       	movw	r16, r24
 4a0:	c0 e0       	ldi	r28, 0x00	; 0
 4a2:	f8 01       	movw	r30, r16
 4a4:	ec 0f       	add	r30, r28
 4a6:	f1 1d       	adc	r31, r1
 4a8:	80 81       	ld	r24, Z
 4aa:	81 11       	cpse	r24, r1
 4ac:	f4 cf       	rjmp	.-24     	; 0x496 <LCD_sendString+0xc>
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	08 95       	ret

000004b6 <LCD_clear>:
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_sendCmnd>
 4bc:	8f e3       	ldi	r24, 0x3F	; 63
 4be:	9f e1       	ldi	r25, 0x1F	; 31
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <LCD_clear+0xa>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <LCD_clear+0x10>
 4c6:	00 00       	nop
 4c8:	08 95       	ret

000004ca <LCD_goToSpecificPosition>:
	}
}

void LCD_goToSpecificPosition(u8 LineNumber, u8 Position)
{
	if (LineNumber == LCD_LINE_ONE)
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	39 f4       	brne	.+14     	; 0x4dc <LCD_goToSpecificPosition+0x12>
	{
		if(Position<=15)
 4ce:	60 31       	cpi	r22, 0x10	; 16
 4d0:	68 f4       	brcc	.+26     	; 0x4ec <LCD_goToSpecificPosition+0x22>
		{
			LCD_sendCmnd(0x80 + Position);
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	86 0f       	add	r24, r22
 4d6:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_sendCmnd>
 4da:	08 95       	ret
		}
	}
	
	else if (LineNumber==LCD_LINE_TWO)
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	31 f4       	brne	.+12     	; 0x4ec <LCD_goToSpecificPosition+0x22>
	{
		if(Position<=15)
 4e0:	60 31       	cpi	r22, 0x10	; 16
 4e2:	20 f4       	brcc	.+8      	; 0x4ec <LCD_goToSpecificPosition+0x22>
		{
			LCD_sendCmnd(0xc0 + Position);
 4e4:	80 ec       	ldi	r24, 0xC0	; 192
 4e6:	86 0f       	add	r24, r22
 4e8:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_sendCmnd>
 4ec:	08 95       	ret

000004ee <LCD_writeNumber>:
		}
	}
}

void LCD_writeNumber(u32 number)
{
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	8b 01       	movw	r16, r22
 4fc:	9c 01       	movw	r18, r24
	u32 Local_reversed = 1;
	if (number == 0)
 4fe:	67 2b       	or	r22, r23
 500:	68 2b       	or	r22, r24
 502:	69 2b       	or	r22, r25
 504:	49 f5       	brne	.+82     	; 0x558 <LCD_writeNumber+0x6a>
	{
		LCD_sendChar('0');
 506:	80 e3       	ldi	r24, 0x30	; 48
 508:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 50c:	45 c0       	rjmp	.+138    	; 0x598 <LCD_writeNumber+0xaa>
	else
	{
		// Reverse Number
		while (number != 0)
		{
			Local_reversed = Local_reversed*10 + (number%10);
 50e:	dc 01       	movw	r26, r24
 510:	cb 01       	movw	r24, r22
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	aa 1f       	adc	r26, r26
 518:	bb 1f       	adc	r27, r27
 51a:	6c 01       	movw	r12, r24
 51c:	7d 01       	movw	r14, r26
 51e:	cc 0c       	add	r12, r12
 520:	dd 1c       	adc	r13, r13
 522:	ee 1c       	adc	r14, r14
 524:	ff 1c       	adc	r15, r15
 526:	cc 0c       	add	r12, r12
 528:	dd 1c       	adc	r13, r13
 52a:	ee 1c       	adc	r14, r14
 52c:	ff 1c       	adc	r15, r15
 52e:	c8 0e       	add	r12, r24
 530:	d9 1e       	adc	r13, r25
 532:	ea 1e       	adc	r14, r26
 534:	fb 1e       	adc	r15, r27
 536:	c9 01       	movw	r24, r18
 538:	b8 01       	movw	r22, r16
 53a:	2a e0       	ldi	r18, 0x0A	; 10
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	0e 94 44 04 	call	0x888	; 0x888 <__udivmodsi4>
 546:	6c 0d       	add	r22, r12
 548:	7d 1d       	adc	r23, r13
 54a:	8e 1d       	adc	r24, r14
 54c:	9f 1d       	adc	r25, r15
			number /= 10;
 54e:	02 2f       	mov	r16, r18
 550:	13 2f       	mov	r17, r19
 552:	24 2f       	mov	r18, r20
 554:	35 2f       	mov	r19, r21
 556:	04 c0       	rjmp	.+8      	; 0x560 <LCD_writeNumber+0x72>
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
		LCD_sendChar('0');
	}
	else
	{
		// Reverse Number
		while (number != 0)
 560:	01 15       	cp	r16, r1
 562:	11 05       	cpc	r17, r1
 564:	21 05       	cpc	r18, r1
 566:	31 05       	cpc	r19, r1
 568:	91 f6       	brne	.-92     	; 0x50e <LCD_writeNumber+0x20>
			number /= 10;
		}
		
		do
		{
			LCD_sendChar((Local_reversed%10)+'0');
 56a:	2a e0       	ldi	r18, 0x0A	; 10
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	0e 94 44 04 	call	0x888	; 0x888 <__udivmodsi4>
 576:	e2 2e       	mov	r14, r18
 578:	f3 2e       	mov	r15, r19
 57a:	04 2f       	mov	r16, r20
 57c:	15 2f       	mov	r17, r21
 57e:	80 e3       	ldi	r24, 0x30	; 48
 580:	86 0f       	add	r24, r22
 582:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			Local_reversed /= 10;
 586:	6e 2d       	mov	r22, r14
 588:	7f 2d       	mov	r23, r15
 58a:	80 2f       	mov	r24, r16
 58c:	91 2f       	mov	r25, r17
		}while (Local_reversed != 1);
 58e:	61 30       	cpi	r22, 0x01	; 1
 590:	71 05       	cpc	r23, r1
 592:	81 05       	cpc	r24, r1
 594:	91 05       	cpc	r25, r1
 596:	49 f7       	brne	.-46     	; 0x56a <LCD_writeNumber+0x7c>
	}
}
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	ff 90       	pop	r15
 59e:	ef 90       	pop	r14
 5a0:	df 90       	pop	r13
 5a2:	cf 90       	pop	r12
 5a4:	08 95       	ret

000005a6 <main>:
// HAL
#include "LCD_Interface.h"
#include "LCD_config.h"

int main(void)
{
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	00 d0       	rcall	.+0      	; 0x5ac <main+0x6>
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
	
	// LCD Set Direction
	DIO_setPinDirection(DIO_PORTB,DIO_PIN4,DIO_PIN_OUTPUT);
 5b0:	41 e0       	ldi	r20, 0x01	; 1
 5b2:	64 e0       	ldi	r22, 0x04	; 4
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN5,DIO_PIN_OUTPUT);
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	65 e0       	ldi	r22, 0x05	; 5
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN6,DIO_PIN_OUTPUT);
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	66 e0       	ldi	r22, 0x06	; 6
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN7,DIO_PIN_OUTPUT);
 5ce:	41 e0       	ldi	r20, 0x01	; 1
 5d0:	67 e0       	ldi	r22, 0x07	; 7
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDirection>
	
	
	DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	62 e0       	ldi	r22, 0x02	; 2
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);	
 5ec:	41 e0       	ldi	r20, 0x01	; 1
 5ee:	63 e0       	ldi	r22, 0x03	; 3
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDirection>
 
	uint8_t arr[16]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,};

	
	LCD_init();
 5f6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_init>
	ADC_init();
 5fa:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	u16 digitalValue ,analogVal ;
	u32 volt , percentage; 
	
	while (1)
	{
		ADC_getDigitalValue(ADC_CHANNEL1,&digitalValue);
 5fe:	be 01       	movw	r22, r28
 600:	6f 5f       	subi	r22, 0xFF	; 255
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	0e 94 5d 00 	call	0xba	; 0xba <ADC_getDigitalValue>
		LCD_goToSpecificPosition(1,0);
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
		LCD_sendString("VOLT VAL:    %");
 612:	80 e6       	ldi	r24, 0x60	; 96
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_sendString>
		LCD_goToSpecificPosition(1,10);
 61a:	6a e0       	ldi	r22, 0x0A	; 10
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
		//volt = ((((u32)digitalValue)*5000)/1024) ; 
		percentage = ((((u32)digitalValue)*100)/1024) ;
 622:	29 81       	ldd	r18, Y+1	; 0x01
 624:	3a 81       	ldd	r19, Y+2	; 0x02
 626:	a4 e6       	ldi	r26, 0x64	; 100
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	0e 94 66 04 	call	0x8cc	; 0x8cc <__umulhisi3>
 62e:	6b 01       	movw	r12, r22
 630:	7c 01       	movw	r14, r24
 632:	0b 2e       	mov	r0, r27
 634:	ba e0       	ldi	r27, 0x0A	; 10
 636:	f6 94       	lsr	r15
 638:	e7 94       	ror	r14
 63a:	d7 94       	ror	r13
 63c:	c7 94       	ror	r12
 63e:	ba 95       	dec	r27
 640:	d1 f7       	brne	.-12     	; 0x636 <main+0x90>
 642:	b0 2d       	mov	r27, r0
		LCD_writeNumber(percentage);
 644:	c7 01       	movw	r24, r14
 646:	b6 01       	movw	r22, r12
 648:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_writeNumber>
		
		if (percentage < 10)
 64c:	2a e0       	ldi	r18, 0x0A	; 10
 64e:	c2 16       	cp	r12, r18
 650:	d1 04       	cpc	r13, r1
 652:	e1 04       	cpc	r14, r1
 654:	f1 04       	cpc	r15, r1
 656:	40 f4       	brcc	.+16     	; 0x668 <main+0xc2>
		{
			LCD_goToSpecificPosition(2,3);
 658:	63 e0       	ldi	r22, 0x03	; 3
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
			LCD_sendChar(arr[0]);
 660:	8f ef       	ldi	r24, 0xFF	; 255
 662:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 666:	04 c1       	rjmp	.+520    	; 0x870 <__stack+0x11>
		}
		else if (percentage < 20)
 668:	84 e1       	ldi	r24, 0x14	; 20
 66a:	c8 16       	cp	r12, r24
 66c:	d1 04       	cpc	r13, r1
 66e:	e1 04       	cpc	r14, r1
 670:	f1 04       	cpc	r15, r1
 672:	58 f4       	brcc	.+22     	; 0x68a <main+0xe4>
		{
			LCD_goToSpecificPosition(2,3);
 674:	63 e0       	ldi	r22, 0x03	; 3
 676:	82 e0       	ldi	r24, 0x02	; 2
 678:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
			LCD_sendChar(arr[0]);
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 688:	f3 c0       	rjmp	.+486    	; 0x870 <__stack+0x11>
		}
		else if (percentage < 30)
 68a:	9e e1       	ldi	r25, 0x1E	; 30
 68c:	c9 16       	cp	r12, r25
 68e:	d1 04       	cpc	r13, r1
 690:	e1 04       	cpc	r14, r1
 692:	f1 04       	cpc	r15, r1
 694:	70 f4       	brcc	.+28     	; 0x6b2 <main+0x10c>
		{
			LCD_goToSpecificPosition(2,3);
 696:	63 e0       	ldi	r22, 0x03	; 3
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
			LCD_sendChar(arr[0]);
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 6a4:	8f ef       	ldi	r24, 0xFF	; 255
 6a6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 6aa:	8f ef       	ldi	r24, 0xFF	; 255
 6ac:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 6b0:	df c0       	rjmp	.+446    	; 0x870 <__stack+0x11>
		}
		else if (percentage < 40)
 6b2:	28 e2       	ldi	r18, 0x28	; 40
 6b4:	c2 16       	cp	r12, r18
 6b6:	d1 04       	cpc	r13, r1
 6b8:	e1 04       	cpc	r14, r1
 6ba:	f1 04       	cpc	r15, r1
 6bc:	88 f4       	brcc	.+34     	; 0x6e0 <main+0x13a>
		{
			LCD_goToSpecificPosition(2,3);
 6be:	63 e0       	ldi	r22, 0x03	; 3
 6c0:	82 e0       	ldi	r24, 0x02	; 2
 6c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
			LCD_sendChar(arr[0]);
 6c6:	8f ef       	ldi	r24, 0xFF	; 255
 6c8:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 6d2:	8f ef       	ldi	r24, 0xFF	; 255
 6d4:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 6de:	c8 c0       	rjmp	.+400    	; 0x870 <__stack+0x11>
		}
		else if (percentage < 50)
 6e0:	82 e3       	ldi	r24, 0x32	; 50
 6e2:	c8 16       	cp	r12, r24
 6e4:	d1 04       	cpc	r13, r1
 6e6:	e1 04       	cpc	r14, r1
 6e8:	f1 04       	cpc	r15, r1
 6ea:	a0 f4       	brcc	.+40     	; 0x714 <main+0x16e>
		{
			LCD_goToSpecificPosition(2,3);
 6ec:	63 e0       	ldi	r22, 0x03	; 3
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
			LCD_sendChar(arr[0]);
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 700:	8f ef       	ldi	r24, 0xFF	; 255
 702:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 706:	8f ef       	ldi	r24, 0xFF	; 255
 708:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 712:	ae c0       	rjmp	.+348    	; 0x870 <__stack+0x11>
		}
		
		else if (percentage < 60)
 714:	9c e3       	ldi	r25, 0x3C	; 60
 716:	c9 16       	cp	r12, r25
 718:	d1 04       	cpc	r13, r1
 71a:	e1 04       	cpc	r14, r1
 71c:	f1 04       	cpc	r15, r1
 71e:	b8 f4       	brcc	.+46     	; 0x74e <main+0x1a8>
		{
			LCD_goToSpecificPosition(2,3);
 720:	63 e0       	ldi	r22, 0x03	; 3
 722:	82 e0       	ldi	r24, 0x02	; 2
 724:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
			LCD_sendChar(arr[0]);
 728:	8f ef       	ldi	r24, 0xFF	; 255
 72a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 734:	8f ef       	ldi	r24, 0xFF	; 255
 736:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 73a:	8f ef       	ldi	r24, 0xFF	; 255
 73c:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 746:	8f ef       	ldi	r24, 0xFF	; 255
 748:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 74c:	91 c0       	rjmp	.+290    	; 0x870 <__stack+0x11>
		}
		else if (percentage < 70)
 74e:	26 e4       	ldi	r18, 0x46	; 70
 750:	c2 16       	cp	r12, r18
 752:	d1 04       	cpc	r13, r1
 754:	e1 04       	cpc	r14, r1
 756:	f1 04       	cpc	r15, r1
 758:	d0 f4       	brcc	.+52     	; 0x78e <main+0x1e8>
		{
			LCD_goToSpecificPosition(2,3);
 75a:	63 e0       	ldi	r22, 0x03	; 3
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
			LCD_sendChar(arr[0]);
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 768:	8f ef       	ldi	r24, 0xFF	; 255
 76a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 76e:	8f ef       	ldi	r24, 0xFF	; 255
 770:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 774:	8f ef       	ldi	r24, 0xFF	; 255
 776:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 77a:	8f ef       	ldi	r24, 0xFF	; 255
 77c:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 78c:	71 c0       	rjmp	.+226    	; 0x870 <__stack+0x11>
		}
		else if (percentage < 80)
 78e:	80 e5       	ldi	r24, 0x50	; 80
 790:	c8 16       	cp	r12, r24
 792:	d1 04       	cpc	r13, r1
 794:	e1 04       	cpc	r14, r1
 796:	f1 04       	cpc	r15, r1
 798:	e8 f4       	brcc	.+58     	; 0x7d4 <main+0x22e>
		{
			LCD_goToSpecificPosition(2,3);
 79a:	63 e0       	ldi	r22, 0x03	; 3
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
			LCD_sendChar(arr[0]);
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 7a8:	8f ef       	ldi	r24, 0xFF	; 255
 7aa:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 7ae:	8f ef       	ldi	r24, 0xFF	; 255
 7b0:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 7c0:	8f ef       	ldi	r24, 0xFF	; 255
 7c2:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 7c6:	8f ef       	ldi	r24, 0xFF	; 255
 7c8:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 7d2:	4e c0       	rjmp	.+156    	; 0x870 <__stack+0x11>
		}
		
		else if (percentage < 90)
 7d4:	9a e5       	ldi	r25, 0x5A	; 90
 7d6:	c9 16       	cp	r12, r25
 7d8:	d1 04       	cpc	r13, r1
 7da:	e1 04       	cpc	r14, r1
 7dc:	f1 04       	cpc	r15, r1
 7de:	00 f5       	brcc	.+64     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{
			LCD_goToSpecificPosition(2,3);
 7e0:	63 e0       	ldi	r22, 0x03	; 3
 7e2:	82 e0       	ldi	r24, 0x02	; 2
 7e4:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
			LCD_sendChar(arr[0]);
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 7ee:	8f ef       	ldi	r24, 0xFF	; 255
 7f0:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 7f4:	8f ef       	ldi	r24, 0xFF	; 255
 7f6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 806:	8f ef       	ldi	r24, 0xFF	; 255
 808:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 80c:	8f ef       	ldi	r24, 0xFF	; 255
 80e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 812:	8f ef       	ldi	r24, 0xFF	; 255
 814:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 81e:	28 c0       	rjmp	.+80     	; 0x870 <__stack+0x11>
		}
		
		else if (percentage < 100)
 820:	24 e6       	ldi	r18, 0x64	; 100
 822:	c2 16       	cp	r12, r18
 824:	d1 04       	cpc	r13, r1
 826:	e1 04       	cpc	r14, r1
 828:	f1 04       	cpc	r15, r1
 82a:	10 f5       	brcc	.+68     	; 0x870 <__stack+0x11>
		{
			LCD_goToSpecificPosition(2,3);
 82c:	63 e0       	ldi	r22, 0x03	; 3
 82e:	82 e0       	ldi	r24, 0x02	; 2
 830:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_goToSpecificPosition>
			LCD_sendChar(arr[0]);
 834:	8f ef       	ldi	r24, 0xFF	; 255
 836:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 846:	8f ef       	ldi	r24, 0xFF	; 255
 848:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 84c:	8f ef       	ldi	r24, 0xFF	; 255
 84e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 858:	8f ef       	ldi	r24, 0xFF	; 255
 85a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 864:	8f ef       	ldi	r24, 0xFF	; 255
 866:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
			LCD_sendChar(arr[0]);
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_sendChar>
 870:	8f ef       	ldi	r24, 0xFF	; 255
 872:	94 e3       	ldi	r25, 0x34	; 52
 874:	2c e0       	ldi	r18, 0x0C	; 12
 876:	81 50       	subi	r24, 0x01	; 1
 878:	90 40       	sbci	r25, 0x00	; 0
 87a:	20 40       	sbci	r18, 0x00	; 0
 87c:	e1 f7       	brne	.-8      	; 0x876 <__stack+0x17>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <__stack+0x21>
 880:	00 00       	nop
		
		
		
	
		_delay_ms(500);
		LCD_clear();	
 882:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_clear>
		
	}
 886:	bb ce       	rjmp	.-650    	; 0x5fe <main+0x58>

00000888 <__udivmodsi4>:
 888:	a1 e2       	ldi	r26, 0x21	; 33
 88a:	1a 2e       	mov	r1, r26
 88c:	aa 1b       	sub	r26, r26
 88e:	bb 1b       	sub	r27, r27
 890:	fd 01       	movw	r30, r26
 892:	0d c0       	rjmp	.+26     	; 0x8ae <__udivmodsi4_ep>

00000894 <__udivmodsi4_loop>:
 894:	aa 1f       	adc	r26, r26
 896:	bb 1f       	adc	r27, r27
 898:	ee 1f       	adc	r30, r30
 89a:	ff 1f       	adc	r31, r31
 89c:	a2 17       	cp	r26, r18
 89e:	b3 07       	cpc	r27, r19
 8a0:	e4 07       	cpc	r30, r20
 8a2:	f5 07       	cpc	r31, r21
 8a4:	20 f0       	brcs	.+8      	; 0x8ae <__udivmodsi4_ep>
 8a6:	a2 1b       	sub	r26, r18
 8a8:	b3 0b       	sbc	r27, r19
 8aa:	e4 0b       	sbc	r30, r20
 8ac:	f5 0b       	sbc	r31, r21

000008ae <__udivmodsi4_ep>:
 8ae:	66 1f       	adc	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	1a 94       	dec	r1
 8b8:	69 f7       	brne	.-38     	; 0x894 <__udivmodsi4_loop>
 8ba:	60 95       	com	r22
 8bc:	70 95       	com	r23
 8be:	80 95       	com	r24
 8c0:	90 95       	com	r25
 8c2:	9b 01       	movw	r18, r22
 8c4:	ac 01       	movw	r20, r24
 8c6:	bd 01       	movw	r22, r26
 8c8:	cf 01       	movw	r24, r30
 8ca:	08 95       	ret

000008cc <__umulhisi3>:
 8cc:	a2 9f       	mul	r26, r18
 8ce:	b0 01       	movw	r22, r0
 8d0:	b3 9f       	mul	r27, r19
 8d2:	c0 01       	movw	r24, r0
 8d4:	a3 9f       	mul	r26, r19
 8d6:	70 0d       	add	r23, r0
 8d8:	81 1d       	adc	r24, r1
 8da:	11 24       	eor	r1, r1
 8dc:	91 1d       	adc	r25, r1
 8de:	b2 9f       	mul	r27, r18
 8e0:	70 0d       	add	r23, r0
 8e2:	81 1d       	adc	r24, r1
 8e4:	11 24       	eor	r1, r1
 8e6:	91 1d       	adc	r25, r1
 8e8:	08 95       	ret

000008ea <_exit>:
 8ea:	f8 94       	cli

000008ec <__stop_program>:
 8ec:	ff cf       	rjmp	.-2      	; 0x8ec <__stop_program>
