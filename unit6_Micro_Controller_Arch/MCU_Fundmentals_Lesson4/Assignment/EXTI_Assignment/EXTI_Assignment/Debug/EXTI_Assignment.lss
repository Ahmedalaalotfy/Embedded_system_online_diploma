
EXTI_Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000725  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c3  00000000  00000000  000009e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000343  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_1>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_2>
   c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Global_interrupt_init>:
#define SREG   (*(volatile u8*)0x5F)


void Global_interrupt_init(void)
{
	SREG |= (1<<7); 
  6c:	8f b7       	in	r24, 0x3f	; 63
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	8f bf       	out	0x3f, r24	; 63
  72:	08 95       	ret

00000074 <EXTI0_init>:
}
void EXTI0_init(void)
{
	// falling or raising edge mode 
	MCUCR |= 0b01 ;
  74:	85 b7       	in	r24, 0x35	; 53
  76:	81 60       	ori	r24, 0x01	; 1
  78:	85 bf       	out	0x35, r24	; 53
	//INT0 enable 
	GICR |= (1<<6);
  7a:	8b b7       	in	r24, 0x3b	; 59
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	8b bf       	out	0x3b, r24	; 59
  80:	08 95       	ret

00000082 <EXTI1_init>:
}
void EXTI1_init(void)
{
	//raising edge mode 
	MCUCR |= 0b1100;
  82:	85 b7       	in	r24, 0x35	; 53
  84:	8c 60       	ori	r24, 0x0C	; 12
  86:	85 bf       	out	0x35, r24	; 53
	//INT1 enable
	GICR |= (1<<7);
  88:	8b b7       	in	r24, 0x3b	; 59
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	8b bf       	out	0x3b, r24	; 59
  8e:	08 95       	ret

00000090 <EXTI2_init>:
}
void EXTI2_init(void)
{
	// falling edge mode 
	MCUCSR &= ~(1<<6);
  90:	84 b7       	in	r24, 0x34	; 52
  92:	8f 7b       	andi	r24, 0xBF	; 191
  94:	84 bf       	out	0x34, r24	; 52
	//INT2 enable
	GICR |= (1<<5);
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	8b bf       	out	0x3b, r24	; 59
  9c:	08 95       	ret

0000009e <main>:

int main(void)
{
	
	//EXTIs PINS set to be input
	DDRD  &= ~(1<<2);
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	8b 7f       	andi	r24, 0xFB	; 251
  a2:	81 bb       	out	0x11, r24	; 17
	DDRD  &= ~(1<<3);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	81 bb       	out	0x11, r24	; 17
	DDRB  &= ~(1<<2);
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	87 bb       	out	0x17, r24	; 23
	
	//LEDS PINS set to be output
	DDRD  |= (1<<5);
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	81 bb       	out	0x11, r24	; 17
	DDRD  |= (1<<6);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	81 bb       	out	0x11, r24	; 17
	DDRD  |= (1<<7);
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	81 bb       	out	0x11, r24	; 17
		
	// inits
	EXTI0_init();
  c2:	0e 94 3a 00 	call	0x74	; 0x74 <EXTI0_init>
	EXTI1_init();
  c6:	0e 94 41 00 	call	0x82	; 0x82 <EXTI1_init>
	EXTI2_init();
  ca:	0e 94 48 00 	call	0x90	; 0x90 <EXTI2_init>
	Global_interrupt_init();
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <Global_interrupt_init>
	
   
    while (1) 
    {
		PORTD &= ~(1<<5);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1<<6);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 7b       	andi	r24, 0xBF	; 191
  dc:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1<<7);
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	8f 77       	andi	r24, 0x7F	; 127
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	f6 cf       	rjmp	.-20     	; 0xd2 <main+0x34>

000000e6 <__vector_1>:
    }
}

ISR(INT0_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
	PORTD |=(1<<5);
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	81 ee       	ldi	r24, 0xE1	; 225
 100:	94 e0       	ldi	r25, 0x04	; 4
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <__vector_1+0x1c>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <__vector_1+0x26>
 10c:	00 00       	nop
	_delay_ms(100);
	

	GIFR |=(1<<6);
 10e:	8a b7       	in	r24, 0x3a	; 58
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8a bf       	out	0x3a, r24	; 58
}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_2>:
ISR(INT1_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
	PORTD |=(1<<6);
 134:	82 b3       	in	r24, 0x12	; 18
 136:	80 64       	ori	r24, 0x40	; 64
 138:	82 bb       	out	0x12, r24	; 18
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	81 ee       	ldi	r24, 0xE1	; 225
 13e:	94 e0       	ldi	r25, 0x04	; 4
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <__vector_2+0x1c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <__vector_2+0x26>
 14a:	00 00       	nop
	_delay_ms(100);
	

	GIFR |=(1<<7);
 14c:	8a b7       	in	r24, 0x3a	; 58
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	8a bf       	out	0x3a, r24	; 58

}
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <__vector_3>:
ISR(INT2_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	2f 93       	push	r18
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	PORTD |=(1<<7);
 172:	82 b3       	in	r24, 0x12	; 18
 174:	80 68       	ori	r24, 0x80	; 128
 176:	82 bb       	out	0x12, r24	; 18
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	81 ee       	ldi	r24, 0xE1	; 225
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <__vector_3+0x1c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <__vector_3+0x26>
 188:	00 00       	nop
	_delay_ms(100);
	

    GIFR |=(1<<5);
 18a:	8a b7       	in	r24, 0x3a	; 58
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	8a bf       	out	0x3a, r24	; 58
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
