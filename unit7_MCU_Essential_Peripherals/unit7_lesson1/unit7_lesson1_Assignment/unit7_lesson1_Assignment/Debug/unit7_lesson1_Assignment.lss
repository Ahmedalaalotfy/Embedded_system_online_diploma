
unit7_lesson1_Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c0  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000605  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044a  00000000  00000000  00001285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037a  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c0  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 82 00 	call	0x104	; 0x104 <main>
  64:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <writeHalfPort>:
}


static void writeHalfPort(u8 Value)
{
	if (1==GET_BIT(Value,0))
  6c:	80 ff       	sbrs	r24, 0
  6e:	04 c0       	rjmp	.+8      	; 0x78 <writeHalfPort+0xc>
	{
		SET_BIT(PORTA,4);
  70:	9b b3       	in	r25, 0x1b	; 27
  72:	90 61       	ori	r25, 0x10	; 16
  74:	9b bb       	out	0x1b, r25	; 27
  76:	03 c0       	rjmp	.+6      	; 0x7e <writeHalfPort+0x12>
	}
	else
	{
		CLR_BIT(PORTA,4);
  78:	9b b3       	in	r25, 0x1b	; 27
  7a:	9f 7e       	andi	r25, 0xEF	; 239
  7c:	9b bb       	out	0x1b, r25	; 27
	}
	
	if (1==GET_BIT(Value,1))
  7e:	81 ff       	sbrs	r24, 1
  80:	04 c0       	rjmp	.+8      	; 0x8a <writeHalfPort+0x1e>
	{
		SET_BIT(PORTA,5);
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	90 62       	ori	r25, 0x20	; 32
  86:	9b bb       	out	0x1b, r25	; 27
  88:	03 c0       	rjmp	.+6      	; 0x90 <writeHalfPort+0x24>
	}
	else
	{
		CLR_BIT(PORTA,5);
  8a:	9b b3       	in	r25, 0x1b	; 27
  8c:	9f 7d       	andi	r25, 0xDF	; 223
  8e:	9b bb       	out	0x1b, r25	; 27
	}
	
	if (1==GET_BIT(Value,2))
  90:	82 ff       	sbrs	r24, 2
  92:	04 c0       	rjmp	.+8      	; 0x9c <writeHalfPort+0x30>
	{
		SET_BIT(PORTA,6);
  94:	9b b3       	in	r25, 0x1b	; 27
  96:	90 64       	ori	r25, 0x40	; 64
  98:	9b bb       	out	0x1b, r25	; 27
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <writeHalfPort+0x36>
	}
	else
	{
		CLR_BIT(PORTA,6);
  9c:	9b b3       	in	r25, 0x1b	; 27
  9e:	9f 7b       	andi	r25, 0xBF	; 191
  a0:	9b bb       	out	0x1b, r25	; 27
	}
	
	if (1==GET_BIT(Value,3))
  a2:	83 ff       	sbrs	r24, 3
  a4:	04 c0       	rjmp	.+8      	; 0xae <writeHalfPort+0x42>
	{
		SET_BIT(PORTA,7);
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	8b bb       	out	0x1b, r24	; 27
  ac:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTA,7);
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	08 95       	ret

000000b6 <SSD_Display_Number>:
	   
 }
}

void SSD_Display_Number(unsigned char First_Num,unsigned char Seconed_Num) 
{
  b6:	cf 93       	push	r28
  b8:	c6 2f       	mov	r28, r22

	CLR_BIT(PORTB,1);
  ba:	98 b3       	in	r25, 0x18	; 24
  bc:	9d 7f       	andi	r25, 0xFD	; 253
  be:	98 bb       	out	0x18, r25	; 24
	SET_BIT(PORTB,2);
  c0:	98 b3       	in	r25, 0x18	; 24
  c2:	94 60       	ori	r25, 0x04	; 4
  c4:	98 bb       	out	0x18, r25	; 24
	CLR_BIT(PORTB,3);
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	97 7f       	andi	r25, 0xF7	; 247
  ca:	98 bb       	out	0x18, r25	; 24
	
	writeHalfPort (First_Num);
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <writeHalfPort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e5       	ldi	r24, 0x5F	; 95
  d2:	9d e6       	ldi	r25, 0x6D	; 109
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <SSD_Display_Number+0x1e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <SSD_Display_Number+0x24>
  da:	00 00       	nop
	_delay_ms(7);
	
	SET_BIT(PORTB,1);
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(PORTB,2);
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(PORTB,3);
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	87 7f       	andi	r24, 0xF7	; 247
  ec:	88 bb       	out	0x18, r24	; 24
	
	writeHalfPort (Seconed_Num);
  ee:	8c 2f       	mov	r24, r28
  f0:	0e 94 36 00 	call	0x6c	; 0x6c <writeHalfPort>
  f4:	8f e5       	ldi	r24, 0x5F	; 95
  f6:	9d e6       	ldi	r25, 0x6D	; 109
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <SSD_Display_Number+0x42>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <SSD_Display_Number+0x48>
  fe:	00 00       	nop
	_delay_ms(7);
}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <main>:

void SSD_Display_Number(unsigned char First_Num,unsigned char Seconed_Num) ; 
static void writeHalfPort(u8 Value);

int main(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	28 97       	sbiw	r28, 0x08	; 8
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 
 //PIn Direction for leds (Output)
 SET_BIT(DDRC,2); //LED0
 118:	84 b3       	in	r24, 0x14	; 20
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	84 bb       	out	0x14, r24	; 20
 SET_BIT(DDRC,7); //LED1
 11e:	84 b3       	in	r24, 0x14	; 20
 120:	80 68       	ori	r24, 0x80	; 128
 122:	84 bb       	out	0x14, r24	; 20
 SET_BIT(DDRD,3); //LED2
 124:	81 b3       	in	r24, 0x11	; 17
 126:	88 60       	ori	r24, 0x08	; 8
 128:	81 bb       	out	0x11, r24	; 17
 
 //PIN Direction for Buzzer (Output)
 SET_BIT(DDRA,3);
 12a:	8a b3       	in	r24, 0x1a	; 26
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	8a bb       	out	0x1a, r24	; 26

 //PIN Direction for Buttons (Input)
 CLR_BIT(DDRB,0); //Button0
 130:	87 b3       	in	r24, 0x17	; 23
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	87 bb       	out	0x17, r24	; 23
 CLR_BIT(DDRD,6); //Button1
 136:	81 b3       	in	r24, 0x11	; 17
 138:	8f 7b       	andi	r24, 0xBF	; 191
 13a:	81 bb       	out	0x11, r24	; 17
 CLR_BIT(DDRD,2); //Button2
 13c:	81 b3       	in	r24, 0x11	; 17
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	81 bb       	out	0x11, r24	; 17
 
 //PIN Direction for SSD (Output)
 SET_BIT(DDRA,4);
 142:	8a b3       	in	r24, 0x1a	; 26
 144:	80 61       	ori	r24, 0x10	; 16
 146:	8a bb       	out	0x1a, r24	; 26
 SET_BIT(DDRA,5);
 148:	8a b3       	in	r24, 0x1a	; 26
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	8a bb       	out	0x1a, r24	; 26
 SET_BIT(DDRA,6);
 14e:	8a b3       	in	r24, 0x1a	; 26
 150:	80 64       	ori	r24, 0x40	; 64
 152:	8a bb       	out	0x1a, r24	; 26
 SET_BIT(DDRA,7);
 154:	8a b3       	in	r24, 0x1a	; 26
 156:	80 68       	ori	r24, 0x80	; 128
 158:	8a bb       	out	0x1a, r24	; 26
 SET_BIT(DDRB,1);
 15a:	87 b3       	in	r24, 0x17	; 23
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	87 bb       	out	0x17, r24	; 23
 SET_BIT(DDRB,2);
 160:	87 b3       	in	r24, 0x17	; 23
 162:	84 60       	ori	r24, 0x04	; 4
 164:	87 bb       	out	0x17, r24	; 23
 SET_BIT(DDRB,3);
 166:	87 b3       	in	r24, 0x17	; 23
 168:	88 60       	ori	r24, 0x08	; 8
 16a:	87 bb       	out	0x17, r24	; 23
 
 //PIN Values for SSD
 SET_BIT(PORTB,1);
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	88 bb       	out	0x18, r24	; 24
 SET_BIT(PORTB,2); 
 172:	88 b3       	in	r24, 0x18	; 24
 174:	84 60       	ori	r24, 0x04	; 4
 176:	88 bb       	out	0x18, r24	; 24
 CLR_BIT(PORTB,3);
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	88 bb       	out	0x18, r24	; 24
 
 
 volatile unsigned int flag = 0 ,i ,j,timer;
 17e:	1a 82       	std	Y+2, r1	; 0x02
 180:	19 82       	std	Y+1, r1	; 0x01
 
 while (1)
 {
	 // BUZZER
	 if (GET_BIT(PINB,0) == 1)
 182:	b0 9b       	sbis	0x16, 0	; 22
 184:	0f c0       	rjmp	.+30     	; 0x1a4 <main+0xa0>
	 {
		SET_BIT(PORTA,3); 
 186:	8b b3       	in	r24, 0x1b	; 27
 188:	88 60       	ori	r24, 0x08	; 8
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	83 ed       	ldi	r24, 0xD3	; 211
 190:	90 e3       	ldi	r25, 0x30	; 48
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x8e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x98>
 19c:	00 00       	nop
		_delay_ms(1000);
		CLR_BIT(PORTA,3); 
 19e:	8b b3       	in	r24, 0x1b	; 27
 1a0:	87 7f       	andi	r24, 0xF7	; 247
 1a2:	8b bb       	out	0x1b, r24	; 27
	 }
	 
	 //LEDs
	 
	 if (GET_BIT(PIND,6) == 1)
 1a4:	86 9b       	sbis	0x10, 6	; 16
 1a6:	0e c0       	rjmp	.+28     	; 0x1c4 <main+0xc0>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	84 e3       	ldi	r24, 0x34	; 52
 1ac:	9c e0       	ldi	r25, 0x0C	; 12
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0xaa>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0xb4>
 1b8:	00 00       	nop
	 {
		_delay_ms(250);
		flag++;
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	9a 81       	ldd	r25, Y+2	; 0x02
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	9a 83       	std	Y+2, r25	; 0x02
 1c2:	89 83       	std	Y+1, r24	; 0x01
	 }
	 
	 if (flag == 1)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	9a 81       	ldd	r25, Y+2	; 0x02
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	61 f4       	brne	.+24     	; 0x1e4 <main+0xe0>
	 {
		 SET_BIT(PORTC,2);
 1cc:	85 b3       	in	r24, 0x15	; 21
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	85 bb       	out	0x15, r24	; 21
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	84 e3       	ldi	r24, 0x34	; 52
 1d6:	9c e0       	ldi	r25, 0x0C	; 12
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0xd4>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0xde>
 1e2:	00 00       	nop
		 _delay_ms(250); 
	 }
	 
	 if (flag == 2)
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	9a 81       	ldd	r25, Y+2	; 0x02
 1e8:	02 97       	sbiw	r24, 0x02	; 2
 1ea:	61 f4       	brne	.+24     	; 0x204 <main+0x100>
	 {
		 SET_BIT(PORTC,7);
 1ec:	85 b3       	in	r24, 0x15	; 21
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	85 bb       	out	0x15, r24	; 21
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	84 e3       	ldi	r24, 0x34	; 52
 1f6:	9c e0       	ldi	r25, 0x0C	; 12
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0xf4>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0xfe>
 202:	00 00       	nop
		 _delay_ms(250);
	 }
	 
	 if (flag == 3)
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	9a 81       	ldd	r25, Y+2	; 0x02
 208:	03 97       	sbiw	r24, 0x03	; 3
 20a:	61 f4       	brne	.+24     	; 0x224 <main+0x120>
	 {
		 SET_BIT(PORTD,3);
 20c:	82 b3       	in	r24, 0x12	; 18
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	82 bb       	out	0x12, r24	; 18
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	84 e3       	ldi	r24, 0x34	; 52
 216:	9c e0       	ldi	r25, 0x0C	; 12
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x114>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x11e>
 222:	00 00       	nop
		 _delay_ms(250);
	 }
	 
	 if (flag == 4)
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	9a 81       	ldd	r25, Y+2	; 0x02
 228:	04 97       	sbiw	r24, 0x04	; 4
 22a:	a1 f4       	brne	.+40     	; 0x254 <main+0x150>
	 {
		 CLR_BIT(PORTC,2);
 22c:	85 b3       	in	r24, 0x15	; 21
 22e:	8b 7f       	andi	r24, 0xFB	; 251
 230:	85 bb       	out	0x15, r24	; 21
		 CLR_BIT(PORTC,7);
 232:	85 b3       	in	r24, 0x15	; 21
 234:	8f 77       	andi	r24, 0x7F	; 127
 236:	85 bb       	out	0x15, r24	; 21
		 CLR_BIT(PORTD,3);
 238:	82 b3       	in	r24, 0x12	; 18
 23a:	87 7f       	andi	r24, 0xF7	; 247
 23c:	82 bb       	out	0x12, r24	; 18
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	84 e3       	ldi	r24, 0x34	; 52
 242:	9c e0       	ldi	r25, 0x0C	; 12
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x140>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x14a>
 24e:	00 00       	nop
		 _delay_ms(250);
		 
		  flag =0; 
 250:	1a 82       	std	Y+2, r1	; 0x02
 252:	19 82       	std	Y+1, r1	; 0x01
	 }
	 
	 
	 //SSD
	 
	 if (GET_BIT(PIND,2) == 1)
 254:	82 9b       	sbis	0x10, 2	; 16
 256:	95 cf       	rjmp	.-214    	; 0x182 <main+0x7e>
	 {
		 for (i=0;i<10;i++)
 258:	1c 82       	std	Y+4, r1	; 0x04
 25a:	1b 82       	std	Y+3, r1	; 0x03
 25c:	32 c0       	rjmp	.+100    	; 0x2c2 <main+0x1be>
		 { 
			 for(j=0;j<10;j++)
 25e:	1e 82       	std	Y+6, r1	; 0x06
 260:	1d 82       	std	Y+5, r1	; 0x05
 262:	26 c0       	rjmp	.+76     	; 0x2b0 <main+0x1ac>
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	89 e6       	ldi	r24, 0x69	; 105
 268:	98 e1       	ldi	r25, 0x18	; 24
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x166>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x170>
 274:	00 00       	nop
			 {
				 _delay_ms(500);
				for(timer=0;timer<10;timer++)
 276:	18 86       	std	Y+8, r1	; 0x08
 278:	1f 82       	std	Y+7, r1	; 0x07
 27a:	11 c0       	rjmp	.+34     	; 0x29e <main+0x19a>
				{
					SSD_Display_Number(i,j);
 27c:	6d 81       	ldd	r22, Y+5	; 0x05
 27e:	7e 81       	ldd	r23, Y+6	; 0x06
 280:	8b 81       	ldd	r24, Y+3	; 0x03
 282:	9c 81       	ldd	r25, Y+4	; 0x04
 284:	0e 94 5b 00 	call	0xb6	; 0xb6 <SSD_Display_Number>
 288:	8f e5       	ldi	r24, 0x5F	; 95
 28a:	9d e6       	ldi	r25, 0x6D	; 109
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x188>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x18e>
 292:	00 00       	nop
		 for (i=0;i<10;i++)
		 { 
			 for(j=0;j<10;j++)
			 {
				 _delay_ms(500);
				for(timer=0;timer<10;timer++)
 294:	8f 81       	ldd	r24, Y+7	; 0x07
 296:	98 85       	ldd	r25, Y+8	; 0x08
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	98 87       	std	Y+8, r25	; 0x08
 29c:	8f 83       	std	Y+7, r24	; 0x07
 29e:	8f 81       	ldd	r24, Y+7	; 0x07
 2a0:	98 85       	ldd	r25, Y+8	; 0x08
 2a2:	0a 97       	sbiw	r24, 0x0a	; 10
 2a4:	58 f3       	brcs	.-42     	; 0x27c <main+0x178>
	 
	 if (GET_BIT(PIND,2) == 1)
	 {
		 for (i=0;i<10;i++)
		 { 
			 for(j=0;j<10;j++)
 2a6:	8d 81       	ldd	r24, Y+5	; 0x05
 2a8:	9e 81       	ldd	r25, Y+6	; 0x06
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	9e 83       	std	Y+6, r25	; 0x06
 2ae:	8d 83       	std	Y+5, r24	; 0x05
 2b0:	8d 81       	ldd	r24, Y+5	; 0x05
 2b2:	9e 81       	ldd	r25, Y+6	; 0x06
 2b4:	0a 97       	sbiw	r24, 0x0a	; 10
 2b6:	b0 f2       	brcs	.-84     	; 0x264 <main+0x160>
	 
	 //SSD
	 
	 if (GET_BIT(PIND,2) == 1)
	 {
		 for (i=0;i<10;i++)
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	9c 81       	ldd	r25, Y+4	; 0x04
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	9c 83       	std	Y+4, r25	; 0x04
 2c0:	8b 83       	std	Y+3, r24	; 0x03
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	9c 81       	ldd	r25, Y+4	; 0x04
 2c6:	0a 97       	sbiw	r24, 0x0a	; 10
 2c8:	50 f2       	brcs	.-108    	; 0x25e <main+0x15a>
 2ca:	5b cf       	rjmp	.-330    	; 0x182 <main+0x7e>

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
