
LCD_KPD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000746  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000746  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b4f  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a7  00000000  00000000  0000249f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c8f  00000000  00000000  00002d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  000039d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bd  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e20  00000000  00000000  00004205  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00005025  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 35 03 	call	0x66a	; 0x66a <main>
  7a:	0c 94 a1 03 	jmp	0x742	; 0x742 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_setPinDirection>:
			case 2 : // PORTC 
			PORTC = ~PORTC ; 
			break;
			
			case 3 : // PORTD 
			PORTD = ~PORTD ; 
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0x6>
  86:	72 c0       	rjmp	.+228    	; 0x16c <DIO_setPinDirection+0xea>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0xc>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_setPinDirection+0xea>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_setPinDirection+0x12>
  92:	6c c0       	rjmp	.+216    	; 0x16c <DIO_setPinDirection+0xea>
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	01 f1       	breq	.+64     	; 0xd8 <DIO_setPinDirection+0x56>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_setPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b1 f1       	breq	.+108    	; 0x10a <DIO_setPinDirection+0x88>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_setPinDirection+0x22>
  a2:	4c c0       	rjmp	.+152    	; 0x13c <DIO_setPinDirection+0xba>
  a4:	08 95       	ret
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	59 f4       	brne	.+22     	; 0xc0 <DIO_setPinDirection+0x3e>
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x30>
  ba:	82 2b       	or	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_setPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_setPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <DIO_setPinDirection+0x70>
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x66>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x62>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_setPinDirection+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_setPinDirection+0x78>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <DIO_setPinDirection+0xa2>
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0x94>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDirection+0xaa>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <DIO_setPinDirection+0xd4>
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xc6>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_setPinValue>:
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_setPinValue+0x6>
 172:	72 c0       	rjmp	.+228    	; 0x258 <DIO_setPinValue+0xea>
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_setPinValue+0xc>
 178:	6f c0       	rjmp	.+222    	; 0x258 <DIO_setPinValue+0xea>
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	08 f0       	brcs	.+2      	; 0x180 <DIO_setPinValue+0x12>
 17e:	6c c0       	rjmp	.+216    	; 0x258 <DIO_setPinValue+0xea>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <DIO_setPinValue+0x56>
 184:	30 f0       	brcs	.+12     	; 0x192 <DIO_setPinValue+0x24>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <DIO_setPinValue+0x88>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_setPinValue+0x22>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <DIO_setPinValue+0xba>
 190:	08 95       	ret
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_setPinValue+0x3e>
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x34>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x30>
 1a6:	82 2b       	or	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinValue+0x4a>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinValue+0x46>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_setPinValue+0x70>
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x66>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x62>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x7c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x78>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <DIO_setPinValue+0xa2>
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0x98>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0x94>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinValue+0xae>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinValue+0xaa>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_setPinValue+0xd4>
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xca>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xc6>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_setPinValue+0xe0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_setPinValue+0xdc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <DIO_getPinValue>:
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	08 f0       	brcs	.+2      	; 0x260 <DIO_getPinValue+0x6>
 25e:	4e c0       	rjmp	.+156    	; 0x2fc <DIO_getPinValue+0xa2>
 260:	68 30       	cpi	r22, 0x08	; 8
 262:	08 f0       	brcs	.+2      	; 0x266 <DIO_getPinValue+0xc>
 264:	4b c0       	rjmp	.+150    	; 0x2fc <DIO_getPinValue+0xa2>
 266:	41 15       	cp	r20, r1
 268:	51 05       	cpc	r21, r1
 26a:	09 f4       	brne	.+2      	; 0x26e <DIO_getPinValue+0x14>
 26c:	47 c0       	rjmp	.+142    	; 0x2fc <DIO_getPinValue+0xa2>
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	b1 f0       	breq	.+44     	; 0x29e <DIO_getPinValue+0x44>
 272:	28 f0       	brcs	.+10     	; 0x27e <DIO_getPinValue+0x24>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	19 f1       	breq	.+70     	; 0x2be <DIO_getPinValue+0x64>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	89 f1       	breq	.+98     	; 0x2de <DIO_getPinValue+0x84>
 27c:	08 95       	ret
 27e:	89 b3       	in	r24, 0x19	; 25
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_getPinValue+0x2e>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_getPinValue+0x2a>
 28c:	80 ff       	sbrs	r24, 0
 28e:	04 c0       	rjmp	.+8      	; 0x298 <DIO_getPinValue+0x3e>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	fa 01       	movw	r30, r20
 294:	80 83       	st	Z, r24
 296:	08 95       	ret
 298:	fa 01       	movw	r30, r20
 29a:	10 82       	st	Z, r1
 29c:	08 95       	ret
 29e:	86 b3       	in	r24, 0x16	; 22
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_getPinValue+0x4e>
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_getPinValue+0x4a>
 2ac:	80 ff       	sbrs	r24, 0
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <DIO_getPinValue+0x5e>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	fa 01       	movw	r30, r20
 2b4:	80 83       	st	Z, r24
 2b6:	08 95       	ret
 2b8:	fa 01       	movw	r30, r20
 2ba:	10 82       	st	Z, r1
 2bc:	08 95       	ret
 2be:	83 b3       	in	r24, 0x13	; 19
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_getPinValue+0x6e>
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_getPinValue+0x6a>
 2cc:	80 ff       	sbrs	r24, 0
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <DIO_getPinValue+0x7e>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	fa 01       	movw	r30, r20
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret
 2d8:	fa 01       	movw	r30, r20
 2da:	10 82       	st	Z, r1
 2dc:	08 95       	ret
 2de:	80 b3       	in	r24, 0x10	; 16
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_getPinValue+0x8e>
 2e4:	95 95       	asr	r25
 2e6:	87 95       	ror	r24
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_getPinValue+0x8a>
 2ec:	80 ff       	sbrs	r24, 0
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <DIO_getPinValue+0x9e>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	fa 01       	movw	r30, r20
 2f4:	80 83       	st	Z, r24
 2f6:	08 95       	ret
 2f8:	fa 01       	movw	r30, r20
 2fa:	10 82       	st	Z, r1
 2fc:	08 95       	ret

000002fe <DIO_setInputPinResistance>:
}

void DIO_setInputPinResistance (u8 PortId, u8 PinId)

{
	if ( (PortId<=3) && (PinId<=7) )
 2fe:	84 30       	cpi	r24, 0x04	; 4
 300:	a8 f5       	brcc	.+106    	; 0x36c <DIO_setInputPinResistance+0x6e>
 302:	68 30       	cpi	r22, 0x08	; 8
 304:	98 f5       	brcc	.+102    	; 0x36c <DIO_setInputPinResistance+0x6e>
	{
		switch (PortId) 
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	89 f0       	breq	.+34     	; 0x32c <DIO_setInputPinResistance+0x2e>
 30a:	28 f0       	brcs	.+10     	; 0x316 <DIO_setInputPinResistance+0x18>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	c9 f0       	breq	.+50     	; 0x342 <DIO_setInputPinResistance+0x44>
 310:	83 30       	cpi	r24, 0x03	; 3
 312:	11 f1       	breq	.+68     	; 0x358 <DIO_setInputPinResistance+0x5a>
 314:	08 95       	ret
		{
			case 0 : 
			SET_BIT(PORTA,PinId); 
 316:	2b b3       	in	r18, 0x1b	; 27
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_setInputPinResistance+0x24>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_setInputPinResistance+0x20>
 326:	82 2b       	or	r24, r18
 328:	8b bb       	out	0x1b, r24	; 27
			break ;
 32a:	08 95       	ret

            case 1 : 
			SET_BIT(PORTB,PinId); 
 32c:	28 b3       	in	r18, 0x18	; 24
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_setInputPinResistance+0x3a>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_setInputPinResistance+0x36>
 33c:	82 2b       	or	r24, r18
 33e:	88 bb       	out	0x18, r24	; 24
			break ; 
 340:	08 95       	ret

            case 2 : 
			SET_BIT(PORTC,PinId); 
 342:	25 b3       	in	r18, 0x15	; 21
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_setInputPinResistance+0x50>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_setInputPinResistance+0x4c>
 352:	82 2b       	or	r24, r18
 354:	85 bb       	out	0x15, r24	; 21
			break ; 
 356:	08 95       	ret

            case 3 : 
			SET_BIT(PORTD,PinId); 
 358:	22 b3       	in	r18, 0x12	; 18
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_setInputPinResistance+0x66>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_setInputPinResistance+0x62>
 368:	82 2b       	or	r24, r18
 36a:	82 bb       	out	0x12, r24	; 18
 36c:	08 95       	ret

0000036e <KPD_getValue>:
#include "KPD_interface.h"
#include "KPD_config.h" 

void KPD_getValue(u8 *returnedValue)

{
 36e:	7f 92       	push	r7
 370:	8f 92       	push	r8
 372:	9f 92       	push	r9
 374:	af 92       	push	r10
 376:	bf 92       	push	r11
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	69 97       	sbiw	r28, 0x19	; 25
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
 398:	5c 01       	movw	r10, r24
	u8 coloumnsPins[4]= {KPD_COL0_PIN, KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN} ;
 39a:	34 e0       	ldi	r19, 0x04	; 4
 39c:	39 83       	std	Y+1, r19	; 0x01
 39e:	25 e0       	ldi	r18, 0x05	; 5
 3a0:	2a 83       	std	Y+2, r18	; 0x02
 3a2:	96 e0       	ldi	r25, 0x06	; 6
 3a4:	9b 83       	std	Y+3, r25	; 0x03
 3a6:	87 e0       	ldi	r24, 0x07	; 7
 3a8:	8c 83       	std	Y+4, r24	; 0x04
    u8 rowsPins[4]= {KPD_ROW0_PIN, KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	8d 83       	std	Y+5, r24	; 0x05
 3ae:	3e 83       	std	Y+6, r19	; 0x06
 3b0:	2f 83       	std	Y+7, r18	; 0x07
 3b2:	98 87       	std	Y+8, r25	; 0x08
	u8 KPD_Chars[4][4]	= KPD_KEYS;
 3b4:	90 e1       	ldi	r25, 0x10	; 16
 3b6:	e0 e6       	ldi	r30, 0x60	; 96
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	de 01       	movw	r26, r28
 3bc:	19 96       	adiw	r26, 0x09	; 9
 3be:	01 90       	ld	r0, Z+
 3c0:	0d 92       	st	X+, r0
 3c2:	9a 95       	dec	r25
 3c4:	e1 f7       	brne	.-8      	; 0x3be <KPD_getValue+0x50>
	if (returnedValue != NULL)
 3c6:	a1 14       	cp	r10, r1
 3c8:	b1 04       	cpc	r11, r1
 3ca:	09 f4       	brne	.+2      	; 0x3ce <KPD_getValue+0x60>
 3cc:	57 c0       	rjmp	.+174    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	{
		*returnedValue = KPD_NOT_PRESSED ;
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	f5 01       	movw	r30, r10
 3d2:	80 83       	st	Z, r24
		u8 colsCounter ,rowsCounter ;
		u8 pinValue ;
		u8 pinFlag=0 ;
 3d4:	71 2c       	mov	r7, r1
		for (colsCounter=0 ; colsCounter<4 ; colsCounter++)
 3d6:	91 2c       	mov	r9, r1
 3d8:	4d c0       	rjmp	.+154    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
		{
			// Actviate each cols 
			DIO_setPinValue(KPD_COLS_PORT,coloumnsPins[colsCounter],DIO_PIN_LOW);
 3da:	c9 2c       	mov	r12, r9
 3dc:	d1 2c       	mov	r13, r1
 3de:	e1 e0       	ldi	r30, 0x01	; 1
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	ec 0f       	add	r30, r28
 3e4:	fd 1f       	adc	r31, r29
 3e6:	ec 0d       	add	r30, r12
 3e8:	fd 1d       	adc	r31, r13
 3ea:	80 80       	ld	r8, Z
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	68 2d       	mov	r22, r8
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
			
			// Loop to check Rows Values 
			for (rowsCounter=0 ; rowsCounter<4 ; rowsCounter++) 
 3f6:	10 e0       	ldi	r17, 0x00	; 0
 3f8:	32 c0       	rjmp	.+100    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			{
				DIO_getPinValue(KPD_ROWS_PORT,rowsPins[rowsCounter],&pinValue);
 3fa:	e1 2e       	mov	r14, r17
 3fc:	f1 2c       	mov	r15, r1
 3fe:	e5 e0       	ldi	r30, 0x05	; 5
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	ec 0f       	add	r30, r28
 404:	fd 1f       	adc	r31, r29
 406:	ee 0d       	add	r30, r14
 408:	ff 1d       	adc	r31, r15
 40a:	00 81       	ld	r16, Z
 40c:	ae 01       	movw	r20, r28
 40e:	47 5e       	subi	r20, 0xE7	; 231
 410:	5f 4f       	sbci	r21, 0xFF	; 255
 412:	60 2f       	mov	r22, r16
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
				
				if(0==pinValue)
 41a:	89 8d       	ldd	r24, Y+25	; 0x19
 41c:	81 11       	cpse	r24, r1
 41e:	1e c0       	rjmp	.+60     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
				{
				   *returnedValue = KPD_Chars[rowsCounter][colsCounter];
 420:	ee 0c       	add	r14, r14
 422:	ff 1c       	adc	r15, r15
 424:	ee 0c       	add	r14, r14
 426:	ff 1c       	adc	r15, r15
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	8c 0f       	add	r24, r28
 42e:	9d 1f       	adc	r25, r29
 430:	e8 0e       	add	r14, r24
 432:	f9 1e       	adc	r15, r25
 434:	f7 01       	movw	r30, r14
 436:	ec 0d       	add	r30, r12
 438:	fd 1d       	adc	r31, r13
 43a:	80 85       	ldd	r24, Z+8	; 0x08
 43c:	f5 01       	movw	r30, r10
 43e:	80 83       	st	Z, r24
				   while (pinValue==0)
 440:	07 c0       	rjmp	.+14     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
				   {
					 DIO_getPinValue(KPD_ROWS_PORT,rowsPins[rowsCounter],&pinValue);
 442:	ae 01       	movw	r20, r28
 444:	47 5e       	subi	r20, 0xE7	; 231
 446:	5f 4f       	sbci	r21, 0xFF	; 255
 448:	60 2f       	mov	r22, r16
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
				DIO_getPinValue(KPD_ROWS_PORT,rowsPins[rowsCounter],&pinValue);
				
				if(0==pinValue)
				{
				   *returnedValue = KPD_Chars[rowsCounter][colsCounter];
				   while (pinValue==0)
 450:	89 8d       	ldd	r24, Y+25	; 0x19
 452:	88 23       	and	r24, r24
 454:	b1 f3       	breq	.-20     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				   {
					 DIO_getPinValue(KPD_ROWS_PORT,rowsPins[rowsCounter],&pinValue);
				   }
				   pinFlag =1 ;
 456:	77 24       	eor	r7, r7
 458:	73 94       	inc	r7
 45a:	03 c0       	rjmp	.+6      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		{
			// Actviate each cols 
			DIO_setPinValue(KPD_COLS_PORT,coloumnsPins[colsCounter],DIO_PIN_LOW);
			
			// Loop to check Rows Values 
			for (rowsCounter=0 ; rowsCounter<4 ; rowsCounter++) 
 45c:	1f 5f       	subi	r17, 0xFF	; 255
 45e:	14 30       	cpi	r17, 0x04	; 4
 460:	60 f2       	brcs	.-104    	; 0x3fa <KPD_getValue+0x8c>
				   pinFlag =1 ;
				   break ;
				}
			}
		   // Deactviate each cols 	 
           DIO_setPinValue(KPD_COLS_PORT,coloumnsPins[colsCounter],DIO_PIN_HIGH);
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	68 2d       	mov	r22, r8
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
		   if (1==pinFlag)
 46c:	f1 e0       	ldi	r31, 0x01	; 1
 46e:	7f 16       	cp	r7, r31
 470:	29 f0       	breq	.+10     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	{
		*returnedValue = KPD_NOT_PRESSED ;
		u8 colsCounter ,rowsCounter ;
		u8 pinValue ;
		u8 pinFlag=0 ;
		for (colsCounter=0 ; colsCounter<4 ; colsCounter++)
 472:	93 94       	inc	r9
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	89 15       	cp	r24, r9
 478:	08 f0       	brcs	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47a:	af cf       	rjmp	.-162    	; 0x3da <KPD_getValue+0x6c>
		   {
			   break ;
		   }
		}
	}
 47c:	69 96       	adiw	r28, 0x19	; 25
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	ff 90       	pop	r15
 492:	ef 90       	pop	r14
 494:	df 90       	pop	r13
 496:	cf 90       	pop	r12
 498:	bf 90       	pop	r11
 49a:	af 90       	pop	r10
 49c:	9f 90       	pop	r9
 49e:	8f 90       	pop	r8
 4a0:	7f 90       	pop	r7
 4a2:	08 95       	ret

000004a4 <writeHalfPort>:
	
	#endif
}

static void writeHalfPort(u8 Value)
{
 4a4:	cf 93       	push	r28
 4a6:	c8 2f       	mov	r28, r24
	if (1==GET_BIT(Value,0))
 4a8:	80 ff       	sbrs	r24, 0
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <writeHalfPort+0x14>
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_HIGH);
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	64 e0       	ldi	r22, 0x04	; 4
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <writeHalfPort+0x1e>
	}
	else 
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_LOW);
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	64 e0       	ldi	r22, 0x04	; 4
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,1))
 4c2:	c1 ff       	sbrs	r28, 1
 4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <writeHalfPort+0x2e>
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_HIGH);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	65 e0       	ldi	r22, 0x05	; 5
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <writeHalfPort+0x38>
	}
	else
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_LOW);
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	65 e0       	ldi	r22, 0x05	; 5
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,2))
 4dc:	c2 ff       	sbrs	r28, 2
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <writeHalfPort+0x48>
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_HIGH);
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	66 e0       	ldi	r22, 0x06	; 6
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <writeHalfPort+0x52>
	}
	else
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_LOW);
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	66 e0       	ldi	r22, 0x06	; 6
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,3))
 4f6:	c3 ff       	sbrs	r28, 3
 4f8:	06 c0       	rjmp	.+12     	; 0x506 <writeHalfPort+0x62>
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_HIGH);
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	67 e0       	ldi	r22, 0x07	; 7
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 504:	05 c0       	rjmp	.+10     	; 0x510 <writeHalfPort+0x6c>
	}
	else
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_LOW);
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	67 e0       	ldi	r22, 0x07	; 7
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
}
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <LCD_sendCmnd>:
	
}

void LCD_sendCmnd(u8 Cmnd)

{
 514:	cf 93       	push	r28
 516:	c8 2f       	mov	r28, r24
	// set RS pin = 0 ( write command) 
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	62 e0       	ldi	r22, 0x02	; 2
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	
	// Write the most 4-bit command on data pins
	writeHalfPort(Cmnd>>4);
 52c:	8c 2f       	mov	r24, r28
 52e:	82 95       	swap	r24
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	0e 94 52 02 	call	0x4a4	; 0x4a4 <writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	63 e0       	ldi	r22, 0x03	; 3
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 540:	8f e9       	ldi	r24, 0x9F	; 159
 542:	9f e0       	ldi	r25, 0x0F	; 15
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <LCD_sendCmnd+0x30>
 548:	00 c0       	rjmp	.+0      	; 0x54a <LCD_sendCmnd+0x36>
 54a:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	63 e0       	ldi	r22, 0x03	; 3
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// Write the Least 4-bit command on data pins
	writeHalfPort(Cmnd);
 556:	8c 2f       	mov	r24, r28
 558:	0e 94 52 02 	call	0x4a4	; 0x4a4 <writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 55c:	41 e0       	ldi	r20, 0x01	; 1
 55e:	63 e0       	ldi	r22, 0x03	; 3
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 566:	8f e9       	ldi	r24, 0x9F	; 159
 568:	9f e0       	ldi	r25, 0x0F	; 15
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <LCD_sendCmnd+0x56>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_sendCmnd+0x5c>
 570:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	63 e0       	ldi	r22, 0x03	; 3
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	#endif 
	
}
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <LCD_init>:
 580:	2f e7       	ldi	r18, 0x7F	; 127
 582:	85 eb       	ldi	r24, 0xB5	; 181
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	21 50       	subi	r18, 0x01	; 1
 588:	80 40       	sbci	r24, 0x00	; 0
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <LCD_init+0x6>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <LCD_init+0x10>
 590:	00 00       	nop
	#if LCD_MODE == LCD_8_BIT_MODE
	LCD_sendCmnd(0b00111000); // Function Set command 2*16 LCD
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	// set RS pin = 0 ( write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	62 e0       	ldi	r22, 0x02	; 2
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	writeHalfPort(0b0010);
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <writeHalfPort>
	
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	63 e0       	ldi	r22, 0x03	; 3
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 5b6:	8f e9       	ldi	r24, 0x9F	; 159
 5b8:	9f e0       	ldi	r25, 0x0F	; 15
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <LCD_init+0x3a>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <LCD_init+0x40>
 5c0:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	63 e0       	ldi	r22, 0x03	; 3
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	LCD_sendCmnd(0b00101000);
 5cc:	88 e2       	ldi	r24, 0x28	; 40
 5ce:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d2:	90 ef       	ldi	r25, 0xF0	; 240
 5d4:	9a 95       	dec	r25
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <LCD_init+0x54>
	#endif
	
	_delay_us(45);
	
	// display on , cursor off , blink on 
	LCD_sendCmnd(0b00001101);
 5d8:	8d e0       	ldi	r24, 0x0D	; 13
 5da:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_sendCmnd>
 5de:	20 ef       	ldi	r18, 0xF0	; 240
 5e0:	2a 95       	dec	r18
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <LCD_init+0x60>
	_delay_us(45);
	
	// clear display 
	LCD_sendCmnd(0b00000001);
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ea:	8f e3       	ldi	r24, 0x3F	; 63
 5ec:	9f e1       	ldi	r25, 0x1F	; 31
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCD_init+0x6e>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <LCD_init+0x74>
 5f4:	00 00       	nop
	_delay_ms(2);
	
	// set entry mode 
	LCD_sendCmnd(0b00000110);
 5f6:	86 e0       	ldi	r24, 0x06	; 6
 5f8:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_sendCmnd>
 5fc:	08 95       	ret

000005fe <LCD_sendChar>:
	
}

void LCD_sendChar(u8 Data)

{
 5fe:	cf 93       	push	r28
 600:	c8 2f       	mov	r28, r24
	// set RS pin = 1 ( write Data)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
 602:	41 e0       	ldi	r20, 0x01	; 1
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 60c:	40 e0       	ldi	r20, 0x00	; 0
 60e:	62 e0       	ldi	r22, 0x02	; 2
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	
	// Write the most 4-bit Data on data pins
	writeHalfPort(Data>>4);
 616:	8c 2f       	mov	r24, r28
 618:	82 95       	swap	r24
 61a:	8f 70       	andi	r24, 0x0F	; 15
 61c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <writeHalfPort>
	
	 /* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	63 e0       	ldi	r22, 0x03	; 3
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 62a:	8f e9       	ldi	r24, 0x9F	; 159
 62c:	9f e0       	ldi	r25, 0x0F	; 15
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <LCD_sendChar+0x30>
 632:	00 c0       	rjmp	.+0      	; 0x634 <LCD_sendChar+0x36>
 634:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	63 e0       	ldi	r22, 0x03	; 3
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	// Write the Least 4-bit Data on data pins
	writeHalfPort(Data);
 640:	8c 2f       	mov	r24, r28
 642:	0e 94 52 02 	call	0x4a4	; 0x4a4 <writeHalfPort>
	
	 /* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 646:	41 e0       	ldi	r20, 0x01	; 1
 648:	63 e0       	ldi	r22, 0x03	; 3
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 650:	8f e9       	ldi	r24, 0x9F	; 159
 652:	9f e0       	ldi	r25, 0x0F	; 15
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <LCD_sendChar+0x56>
 658:	00 c0       	rjmp	.+0      	; 0x65a <LCD_sendChar+0x5c>
 65a:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	63 e0       	ldi	r22, 0x03	; 3
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	#endif
}
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <main>:
#include "KPD_config.h"



int main(void)
{
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	1f 92       	push	r1
 670:	cd b7       	in	r28, 0x3d	; 61
 672:	de b7       	in	r29, 0x3e	; 62
    u8 KPD_Returned_Value ;
	
	//Set pins direction for KPD
	DIO_setPinDirection(KPD_COLS_PORT,KPD_COL0_PIN,DIO_PIN_OUTPUT);
 674:	41 e0       	ldi	r20, 0x01	; 1
 676:	64 e0       	ldi	r22, 0x04	; 4
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_COLS_PORT,KPD_COL1_PIN,DIO_PIN_OUTPUT);
 67e:	41 e0       	ldi	r20, 0x01	; 1
 680:	65 e0       	ldi	r22, 0x05	; 5
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_COLS_PORT,KPD_COL2_PIN,DIO_PIN_OUTPUT);
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	66 e0       	ldi	r22, 0x06	; 6
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_COLS_PORT,KPD_COL3_PIN,DIO_PIN_OUTPUT);
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	67 e0       	ldi	r22, 0x07	; 7
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	DIO_setPinDirection(KPD_ROWS_PORT,KPD_ROW0_PIN,DIO_PIN_INPUT);
 69c:	40 e0       	ldi	r20, 0x00	; 0
 69e:	63 e0       	ldi	r22, 0x03	; 3
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_ROWS_PORT,KPD_ROW1_PIN,DIO_PIN_INPUT);
 6a6:	40 e0       	ldi	r20, 0x00	; 0
 6a8:	64 e0       	ldi	r22, 0x04	; 4
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_ROWS_PORT,KPD_ROW2_PIN,DIO_PIN_INPUT);
 6b0:	40 e0       	ldi	r20, 0x00	; 0
 6b2:	65 e0       	ldi	r22, 0x05	; 5
 6b4:	82 e0       	ldi	r24, 0x02	; 2
 6b6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_ROWS_PORT,KPD_ROW3_PIN,DIO_PIN_INPUT);
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	66 e0       	ldi	r22, 0x06	; 6
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	DIO_setInputPinResistance(KPD_ROWS_PORT,KPD_ROW0_PIN);
 6c4:	63 e0       	ldi	r22, 0x03	; 3
 6c6:	82 e0       	ldi	r24, 0x02	; 2
 6c8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_setInputPinResistance>
	DIO_setInputPinResistance(KPD_ROWS_PORT,KPD_ROW1_PIN);
 6cc:	64 e0       	ldi	r22, 0x04	; 4
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_setInputPinResistance>
	DIO_setInputPinResistance(KPD_ROWS_PORT,KPD_ROW2_PIN);
 6d4:	65 e0       	ldi	r22, 0x05	; 5
 6d6:	82 e0       	ldi	r24, 0x02	; 2
 6d8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_setInputPinResistance>
	DIO_setInputPinResistance(KPD_ROWS_PORT,KPD_ROW3_PIN);
 6dc:	66 e0       	ldi	r22, 0x06	; 6
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_setInputPinResistance>
	
	//Set pins direction for LCD
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 6e4:	41 e0       	ldi	r20, 0x01	; 1
 6e6:	64 e0       	ldi	r22, 0x04	; 4
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	65 e0       	ldi	r22, 0x05	; 5
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 6f8:	41 e0       	ldi	r20, 0x01	; 1
 6fa:	66 e0       	ldi	r22, 0x06	; 6
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 702:	41 e0       	ldi	r20, 0x01	; 1
 704:	67 e0       	ldi	r22, 0x07	; 7
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	61 e0       	ldi	r22, 0x01	; 1
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 716:	41 e0       	ldi	r20, 0x01	; 1
 718:	62 e0       	ldi	r22, 0x02	; 2
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	63 e0       	ldi	r22, 0x03	; 3
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	LCD_init();
 72a:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_init>
	
	 
    while (1) 
    {
		KPD_getValue(&KPD_Returned_Value);
 72e:	ce 01       	movw	r24, r28
 730:	01 96       	adiw	r24, 0x01	; 1
 732:	0e 94 b7 01 	call	0x36e	; 0x36e <KPD_getValue>
		
		if(KPD_NOT_PRESSED != KPD_Returned_Value)
 736:	89 81       	ldd	r24, Y+1	; 0x01
 738:	8f 3f       	cpi	r24, 0xFF	; 255
 73a:	c9 f3       	breq	.-14     	; 0x72e <main+0xc4>
		{
			LCD_sendChar(KPD_Returned_Value);
 73c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_sendChar>
 740:	f6 cf       	rjmp	.-20     	; 0x72e <main+0xc4>

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
