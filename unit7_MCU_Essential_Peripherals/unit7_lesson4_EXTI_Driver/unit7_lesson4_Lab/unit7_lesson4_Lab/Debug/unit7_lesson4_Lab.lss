
unit7_lesson4_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000728  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000728  0000079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001db5  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000962  00000000  00000000  0000271d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dc4  00000000  00000000  0000307f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00003e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c9  00000000  00000000  000040a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f06  00000000  00000000  00004671  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00005577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 94 02 	call	0x528	; 0x528 <main>
  7a:	0c 94 92 03 	jmp	0x724	; 0x724 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_setPinDirection>:
/* PINS APIS*/ 

void DIO_setPinDirection(u8 PortId, u8 PinId , u8 PinDirection ) 

{
 if ( (PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT ) || (PinDirection == DIO_PIN_INPUT)) )
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0x6>
  86:	72 c0       	rjmp	.+228    	; 0x16c <DIO_setPinDirection+0xea>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0xc>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_setPinDirection+0xea>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_setPinDirection+0x12>
  92:	6c c0       	rjmp	.+216    	; 0x16c <DIO_setPinDirection+0xea>
 { 
	switch (PortId)  // DIO PORTA
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	01 f1       	breq	.+64     	; 0xd8 <DIO_setPinDirection+0x56>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_setPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b1 f1       	breq	.+108    	; 0x10a <DIO_setPinDirection+0x88>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_setPinDirection+0x22>
  a2:	4c c0       	rjmp	.+152    	; 0x13c <DIO_setPinDirection+0xba>
  a4:	08 95       	ret
	{
		case 0 : 
		if (DIO_PIN_OUTPUT == PinDirection)
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	59 f4       	brne	.+22     	; 0xc0 <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x30>
  ba:	82 2b       	or	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,PinId);
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_setPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_setPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
		}
		break ;
		
		case 1 : // DIO PORTB 
		if (DIO_PIN_OUTPUT == PinDirection)
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x66>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x62>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB,PinId);
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_setPinDirection+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_setPinDirection+0x78>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
		}
		break ;
		
		case 2 : // DIO PORTC 
		if (DIO_PIN_OUTPUT == PinDirection)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0x94>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC,PinId);
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDirection+0xaa>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
		}
		break ;
		
		case 3 : // DIO PORTD 
		if (DIO_PIN_OUTPUT == PinDirection)
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xc6>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD,PinId);
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_setPinValue>:
}

void DIO_setPinValue(u8 PortId, u8 PinId , u8 PinValue)

{
	 if ( (PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH ) || (PinValue == DIO_PIN_LOW)) )
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_setPinValue+0x6>
 172:	72 c0       	rjmp	.+228    	; 0x258 <DIO_setPinValue+0xea>
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_setPinValue+0xc>
 178:	6f c0       	rjmp	.+222    	; 0x258 <DIO_setPinValue+0xea>
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	08 f0       	brcs	.+2      	; 0x180 <DIO_setPinValue+0x12>
 17e:	6c c0       	rjmp	.+216    	; 0x258 <DIO_setPinValue+0xea>
	 {
		 switch (PortId) 
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <DIO_setPinValue+0x56>
 184:	30 f0       	brcs	.+12     	; 0x192 <DIO_setPinValue+0x24>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <DIO_setPinValue+0x88>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_setPinValue+0x22>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <DIO_setPinValue+0xba>
 190:	08 95       	ret
		 {
			 case 0 : // DIO_PORTA
			 if (DIO_PIN_HIGH==PinValue)
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_setPinValue+0x3e>
			 {
			    SET_BIT(PORTA,PinId);
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x34>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x30>
 1a6:	82 2b       	or	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTA,PinId) ; 
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinValue+0x4a>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinValue+0x46>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
			 }
			 break ; 
			 
			 case 1 : // DIO_PORTB
			 if (DIO_PIN_HIGH==PinValue)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_setPinValue+0x70>
			 {
			    SET_BIT(PORTB,PinId);
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x66>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x62>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTB,PinId) ; 
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x7c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x78>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
			 }
			 break ; 
			 
			 case 2 : // DIO_PORTC
			 if (DIO_PIN_HIGH==PinValue)
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <DIO_setPinValue+0xa2>
			 {
			    SET_BIT(PORTC,PinId);
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0x98>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0x94>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTC,PinId) ; 
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinValue+0xae>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinValue+0xaa>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
			 }
			 break ; 
			 
			 case 3 : // DIO_PORTD
			 if (DIO_PIN_HIGH==PinValue)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_setPinValue+0xd4>
			 {
			    SET_BIT(PORTD,PinId);
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xca>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xc6>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTD,PinId) ; 
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_setPinValue+0xe0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_setPinValue+0xdc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <DIO_getPinValue>:
}

void DIO_getPinValue(u8 PortId, u8 PinId , u8* PinValue)

{
    if ( (PortId<=3) && (PinId<=7) && (PinValue != NULL ) ) 
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	08 f0       	brcs	.+2      	; 0x260 <DIO_getPinValue+0x6>
 25e:	4e c0       	rjmp	.+156    	; 0x2fc <DIO_getPinValue+0xa2>
 260:	68 30       	cpi	r22, 0x08	; 8
 262:	08 f0       	brcs	.+2      	; 0x266 <DIO_getPinValue+0xc>
 264:	4b c0       	rjmp	.+150    	; 0x2fc <DIO_getPinValue+0xa2>
 266:	41 15       	cp	r20, r1
 268:	51 05       	cpc	r21, r1
 26a:	09 f4       	brne	.+2      	; 0x26e <DIO_getPinValue+0x14>
 26c:	47 c0       	rjmp	.+142    	; 0x2fc <DIO_getPinValue+0xa2>
	{
		
		switch (PortId) 
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	b1 f0       	breq	.+44     	; 0x29e <DIO_getPinValue+0x44>
 272:	28 f0       	brcs	.+10     	; 0x27e <DIO_getPinValue+0x24>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	19 f1       	breq	.+70     	; 0x2be <DIO_getPinValue+0x64>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	89 f1       	breq	.+98     	; 0x2de <DIO_getPinValue+0x84>
 27c:	08 95       	ret
		{
		case 0 : // DIO_PORTA 
			if ( DIO_PIN_HIGH == GET_BIT(PINA,PinId) )
 27e:	89 b3       	in	r24, 0x19	; 25
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_getPinValue+0x2e>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_getPinValue+0x2a>
 28c:	80 ff       	sbrs	r24, 0
 28e:	04 c0       	rjmp	.+8      	; 0x298 <DIO_getPinValue+0x3e>
			{
			*PinValue = DIO_PIN_HIGH ;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	fa 01       	movw	r30, r20
 294:	80 83       	st	Z, r24
 296:	08 95       	ret
			}
			else 
			{
			*PinValue = DIO_PIN_LOW; 
 298:	fa 01       	movw	r30, r20
 29a:	10 82       	st	Z, r1
 29c:	08 95       	ret
			}
			break ;
		
		
		case 1 : // DIO_PORTB
			if ( DIO_PIN_HIGH == GET_BIT(PINB,PinId) )
 29e:	86 b3       	in	r24, 0x16	; 22
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_getPinValue+0x4e>
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_getPinValue+0x4a>
 2ac:	80 ff       	sbrs	r24, 0
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <DIO_getPinValue+0x5e>
			{
			*PinValue = DIO_PIN_HIGH ;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	fa 01       	movw	r30, r20
 2b4:	80 83       	st	Z, r24
 2b6:	08 95       	ret
			}
			else 
			{
			*PinValue = DIO_PIN_LOW; 
 2b8:	fa 01       	movw	r30, r20
 2ba:	10 82       	st	Z, r1
 2bc:	08 95       	ret
			break ;
		
		 
		
		case 2 : // DIO_PORTC 
			if ( DIO_PIN_HIGH == GET_BIT(PINC,PinId) )
 2be:	83 b3       	in	r24, 0x13	; 19
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_getPinValue+0x6e>
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_getPinValue+0x6a>
 2cc:	80 ff       	sbrs	r24, 0
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <DIO_getPinValue+0x7e>
			{
			*PinValue = DIO_PIN_HIGH ;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	fa 01       	movw	r30, r20
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret
			}
			else 
			{
			*PinValue = DIO_PIN_LOW; 
 2d8:	fa 01       	movw	r30, r20
 2da:	10 82       	st	Z, r1
 2dc:	08 95       	ret
			break ; 
		
		
		
		case 3 : // DIO_PORTD
			if ( DIO_PIN_HIGH == GET_BIT(PIND,PinId) )
 2de:	80 b3       	in	r24, 0x10	; 16
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_getPinValue+0x8e>
 2e4:	95 95       	asr	r25
 2e6:	87 95       	ror	r24
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_getPinValue+0x8a>
 2ec:	80 ff       	sbrs	r24, 0
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <DIO_getPinValue+0x9e>
			{
			*PinValue = DIO_PIN_HIGH ;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	fa 01       	movw	r30, r20
 2f4:	80 83       	st	Z, r24
 2f6:	08 95       	ret
			}
			else 
			{
			*PinValue = DIO_PIN_LOW ; 
 2f8:	fa 01       	movw	r30, r20
 2fa:	10 82       	st	Z, r1
 2fc:	08 95       	ret

000002fe <writeHalfPort>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	cf 93       	push	r28
 300:	c8 2f       	mov	r28, r24
 302:	80 ff       	sbrs	r24, 0
 304:	06 c0       	rjmp	.+12     	; 0x312 <writeHalfPort+0x14>
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	64 e0       	ldi	r22, 0x04	; 4
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 310:	05 c0       	rjmp	.+10     	; 0x31c <writeHalfPort+0x1e>
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	64 e0       	ldi	r22, 0x04	; 4
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 31c:	c1 ff       	sbrs	r28, 1
 31e:	06 c0       	rjmp	.+12     	; 0x32c <writeHalfPort+0x2e>
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	65 e0       	ldi	r22, 0x05	; 5
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 32a:	05 c0       	rjmp	.+10     	; 0x336 <writeHalfPort+0x38>
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	65 e0       	ldi	r22, 0x05	; 5
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 336:	c2 ff       	sbrs	r28, 2
 338:	06 c0       	rjmp	.+12     	; 0x346 <writeHalfPort+0x48>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	66 e0       	ldi	r22, 0x06	; 6
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 344:	05 c0       	rjmp	.+10     	; 0x350 <writeHalfPort+0x52>
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	66 e0       	ldi	r22, 0x06	; 6
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 350:	c3 ff       	sbrs	r28, 3
 352:	06 c0       	rjmp	.+12     	; 0x360 <writeHalfPort+0x62>
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	67 e0       	ldi	r22, 0x07	; 7
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 35e:	05 c0       	rjmp	.+10     	; 0x36a <writeHalfPort+0x6c>
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	67 e0       	ldi	r22, 0x07	; 7
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <LCD_sendCmnd>:
 36e:	cf 93       	push	r28
 370:	c8 2f       	mov	r28, r24
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	62 e0       	ldi	r22, 0x02	; 2
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 386:	8c 2f       	mov	r24, r28
 388:	82 95       	swap	r24
 38a:	8f 70       	andi	r24, 0x0F	; 15
 38c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <writeHalfPort>
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	63 e0       	ldi	r22, 0x03	; 3
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 39a:	8f e9       	ldi	r24, 0x9F	; 159
 39c:	9f e0       	ldi	r25, 0x0F	; 15
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <LCD_sendCmnd+0x30>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_sendCmnd+0x36>
 3a4:	00 00       	nop
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	63 e0       	ldi	r22, 0x03	; 3
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3b0:	8c 2f       	mov	r24, r28
 3b2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <writeHalfPort>
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	63 e0       	ldi	r22, 0x03	; 3
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3c0:	8f e9       	ldi	r24, 0x9F	; 159
 3c2:	9f e0       	ldi	r25, 0x0F	; 15
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_sendCmnd+0x56>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_sendCmnd+0x5c>
 3ca:	00 00       	nop
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	63 e0       	ldi	r22, 0x03	; 3
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <LCD_init>:
 3da:	2f e7       	ldi	r18, 0x7F	; 127
 3dc:	85 eb       	ldi	r24, 0xB5	; 181
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <LCD_init+0x6>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <LCD_init+0x10>
 3ea:	00 00       	nop
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	62 e0       	ldi	r22, 0x02	; 2
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	0e 94 7f 01 	call	0x2fe	; 0x2fe <writeHalfPort>
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	63 e0       	ldi	r22, 0x03	; 3
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 410:	8f e9       	ldi	r24, 0x9F	; 159
 412:	9f e0       	ldi	r25, 0x0F	; 15
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	40 e0       	ldi	r20, 0x00	; 0
 41e:	63 e0       	ldi	r22, 0x03	; 3
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 426:	88 e2       	ldi	r24, 0x28	; 40
 428:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCmnd>
 42c:	90 ef       	ldi	r25, 0xF0	; 240
 42e:	9a 95       	dec	r25
 430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 432:	8d e0       	ldi	r24, 0x0D	; 13
 434:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCmnd>
 438:	20 ef       	ldi	r18, 0xF0	; 240
 43a:	2a 95       	dec	r18
 43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCmnd>
 444:	8f e3       	ldi	r24, 0x3F	; 63
 446:	9f e1       	ldi	r25, 0x1F	; 31
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
 450:	86 e0       	ldi	r24, 0x06	; 6
 452:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCmnd>
 456:	08 95       	ret

00000458 <LCD_sendChar>:
 458:	cf 93       	push	r28
 45a:	c8 2f       	mov	r28, r24
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 470:	8c 2f       	mov	r24, r28
 472:	82 95       	swap	r24
 474:	8f 70       	andi	r24, 0x0F	; 15
 476:	0e 94 7f 01 	call	0x2fe	; 0x2fe <writeHalfPort>
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	63 e0       	ldi	r22, 0x03	; 3
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 484:	8f e9       	ldi	r24, 0x9F	; 159
 486:	9f e0       	ldi	r25, 0x0F	; 15
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <LCD_sendChar+0x30>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <LCD_sendChar+0x36>
 48e:	00 00       	nop
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	63 e0       	ldi	r22, 0x03	; 3
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 49a:	8c 2f       	mov	r24, r28
 49c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <writeHalfPort>
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	63 e0       	ldi	r22, 0x03	; 3
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4aa:	8f e9       	ldi	r24, 0x9F	; 159
 4ac:	9f e0       	ldi	r25, 0x0F	; 15
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <LCD_sendChar+0x56>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <LCD_sendChar+0x5c>
 4b4:	00 00       	nop
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	63 e0       	ldi	r22, 0x03	; 3
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <LCD_sendString>:
 4c4:	0f 93       	push	r16
 4c6:	1f 93       	push	r17
 4c8:	cf 93       	push	r28
 4ca:	00 97       	sbiw	r24, 0x00	; 0
 4cc:	29 f4       	brne	.+10     	; 0x4d8 <LCD_sendString+0x14>
 4ce:	0c c0       	rjmp	.+24     	; 0x4e8 <LCD_sendString+0x24>
 4d0:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_sendChar>
 4d4:	cf 5f       	subi	r28, 0xFF	; 255
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <LCD_sendString+0x18>
 4d8:	8c 01       	movw	r16, r24
 4da:	c0 e0       	ldi	r28, 0x00	; 0
 4dc:	f8 01       	movw	r30, r16
 4de:	ec 0f       	add	r30, r28
 4e0:	f1 1d       	adc	r31, r1
 4e2:	80 81       	ld	r24, Z
 4e4:	81 11       	cpse	r24, r1
 4e6:	f4 cf       	rjmp	.-24     	; 0x4d0 <LCD_sendString+0xc>
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	08 95       	ret

000004f0 <LCD_clear>:
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCmnd>
 4f6:	8f e3       	ldi	r24, 0x3F	; 63
 4f8:	9f e1       	ldi	r25, 0x1F	; 31
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_clear+0xa>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCD_clear+0x10>
 500:	00 00       	nop
 502:	08 95       	ret

00000504 <LCD_goToSpecificPosition>:
	}
}

void LCD_goToSpecificPosition(u8 LineNumber, u8 Position)
{
	if (LineNumber == LCD_LINE_ONE)
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	39 f4       	brne	.+14     	; 0x516 <LCD_goToSpecificPosition+0x12>
	{
		if(Position<=15)
 508:	60 31       	cpi	r22, 0x10	; 16
 50a:	68 f4       	brcc	.+26     	; 0x526 <LCD_goToSpecificPosition+0x22>
		{
			LCD_sendCmnd(0x80 + Position);
 50c:	80 e8       	ldi	r24, 0x80	; 128
 50e:	86 0f       	add	r24, r22
 510:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCmnd>
 514:	08 95       	ret
		}
	}
	
	else if (LineNumber==LCD_LINE_TWO)
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	31 f4       	brne	.+12     	; 0x526 <LCD_goToSpecificPosition+0x22>
	{
		if(Position<=15)
 51a:	60 31       	cpi	r22, 0x10	; 16
 51c:	20 f4       	brcc	.+8      	; 0x526 <LCD_goToSpecificPosition+0x22>
		{
			LCD_sendCmnd(0xc0 + Position);
 51e:	80 ec       	ldi	r24, 0xC0	; 192
 520:	86 0f       	add	r24, r22
 522:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCmnd>
 526:	08 95       	ret

00000528 <main>:
	LCD_sendChar(0x00);              // Write the Data to LCD stored on address 0x00
}


int main(void)
{
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	00 d0       	rcall	.+0      	; 0x52e <main+0x6>
 52e:	cd b7       	in	r28, 0x3d	; 61
 530:	de b7       	in	r29, 0x3e	; 62
	
	
	
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	64 e0       	ldi	r22, 0x04	; 4
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	65 e0       	ldi	r22, 0x05	; 5
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	66 e0       	ldi	r22, 0x06	; 6
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	67 e0       	ldi	r22, 0x07	; 7
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 564:	41 e0       	ldi	r20, 0x01	; 1
 566:	62 e0       	ldi	r22, 0x02	; 2
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 56e:	41 e0       	ldi	r20, 0x01	; 1
 570:	63 e0       	ldi	r22, 0x03	; 3
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
		
	
	DIO_setPinDirection(DIO_PORTB,DIO_PIN0,DIO_PIN_INPUT);
 578:	40 e0       	ldi	r20, 0x00	; 0
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN6,DIO_PIN_INPUT);
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	66 e0       	ldi	r22, 0x06	; 6
 586:	83 e0       	ldi	r24, 0x03	; 3
 588:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
 58c:	40 e0       	ldi	r20, 0x00	; 0
 58e:	62 e0       	ldi	r22, 0x02	; 2
 590:	83 e0       	ldi	r24, 0x03	; 3
 592:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUTPUT);
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	63 e0       	ldi	r22, 0x03	; 3
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	62 e0       	ldi	r22, 0x02	; 2
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	67 e0       	ldi	r22, 0x07	; 7
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_OUTPUT);
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	63 e0       	ldi	r22, 0x03	; 3
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	
	LCD_init();
 5be:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_init>
	LCD_sendString("Hi!  Press B0");
 5c2:	80 e6       	ldi	r24, 0x60	; 96
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_sendString>
	
    u8 SWITCH_STATE0 , SWITCH_STATE1 ;
    while (1) 
    {
		
		SWITCH_getState(DIO_PORTB,DIO_PIN0,forward,&SWITCH_STATE0);
 5ca:	9e 01       	movw	r18, r28
 5cc:	2f 5f       	subi	r18, 0xFF	; 255
 5ce:	3f 4f       	sbci	r19, 0xFF	; 255
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SWITCH_getState>
		
		if(SWITCH_STATE0 == SWITCH_PRESSED)
 5da:	89 81       	ldd	r24, Y+1	; 0x01
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	51 f5       	brne	.+84     	; 0x634 <main+0x10c>
		{
			
			LCD_clear();
 5e0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_clear>
			
			DIO_setPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_HIGH);
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	63 e0       	ldi	r22, 0x03	; 3
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 5ee:	2f ef       	ldi	r18, 0xFF	; 255
 5f0:	83 ec       	ldi	r24, 0xC3	; 195
 5f2:	99 e0       	ldi	r25, 0x09	; 9
 5f4:	21 50       	subi	r18, 0x01	; 1
 5f6:	80 40       	sbci	r24, 0x00	; 0
 5f8:	90 40       	sbci	r25, 0x00	; 0
 5fa:	e1 f7       	brne	.-8      	; 0x5f4 <main+0xcc>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <main+0xd6>
 5fe:	00 00       	nop
			_delay_ms(200);
			DIO_setPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_LOW);
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	63 e0       	ldi	r22, 0x03	; 3
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
			
			LCD_sendString("Learn in depth !");
 60a:	8e e6       	ldi	r24, 0x6E	; 110
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_sendString>
 612:	2f ef       	ldi	r18, 0xFF	; 255
 614:	83 ec       	ldi	r24, 0xC3	; 195
 616:	99 e0       	ldi	r25, 0x09	; 9
 618:	21 50       	subi	r18, 0x01	; 1
 61a:	80 40       	sbci	r24, 0x00	; 0
 61c:	90 40       	sbci	r25, 0x00	; 0
 61e:	e1 f7       	brne	.-8      	; 0x618 <main+0xf0>
 620:	00 c0       	rjmp	.+0      	; 0x622 <main+0xfa>
 622:	00 00       	nop
			_delay_ms(200);
			
			LCD_goToSpecificPosition(2,1);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	82 e0       	ldi	r24, 0x02	; 2
 628:	0e 94 82 02 	call	0x504	; 0x504 <LCD_goToSpecificPosition>
			
			LCD_sendString("Press B1");
 62c:	8f e7       	ldi	r24, 0x7F	; 127
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_sendString>
			
		}
		
		SWITCH_getState(DIO_PORTD,DIO_PIN6,forward,&SWITCH_STATE1);
 634:	9e 01       	movw	r18, r28
 636:	2e 5f       	subi	r18, 0xFE	; 254
 638:	3f 4f       	sbci	r19, 0xFF	; 255
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	66 e0       	ldi	r22, 0x06	; 6
 63e:	83 e0       	ldi	r24, 0x03	; 3
 640:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SWITCH_getState>
		
		if(SWITCH_STATE1 == SWITCH_PRESSED)
 644:	8a 81       	ldd	r24, Y+2	; 0x02
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	51 f5       	brne	.+84     	; 0x69e <main+0x176>
		{
			LCD_clear();
 64a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_clear>
			
			DIO_setPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_HIGH);
 64e:	41 e0       	ldi	r20, 0x01	; 1
 650:	63 e0       	ldi	r22, 0x03	; 3
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 658:	2f ef       	ldi	r18, 0xFF	; 255
 65a:	83 ec       	ldi	r24, 0xC3	; 195
 65c:	99 e0       	ldi	r25, 0x09	; 9
 65e:	21 50       	subi	r18, 0x01	; 1
 660:	80 40       	sbci	r24, 0x00	; 0
 662:	90 40       	sbci	r25, 0x00	; 0
 664:	e1 f7       	brne	.-8      	; 0x65e <main+0x136>
 666:	00 c0       	rjmp	.+0      	; 0x668 <main+0x140>
 668:	00 00       	nop
			_delay_ms(200);
			DIO_setPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_LOW);
 66a:	40 e0       	ldi	r20, 0x00	; 0
 66c:	63 e0       	ldi	r22, 0x03	; 3
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
			
			LCD_sendString("Ahmedalaalotfy");
 674:	88 e8       	ldi	r24, 0x88	; 136
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_sendString>
 67c:	2f ef       	ldi	r18, 0xFF	; 255
 67e:	83 ec       	ldi	r24, 0xC3	; 195
 680:	99 e0       	ldi	r25, 0x09	; 9
 682:	21 50       	subi	r18, 0x01	; 1
 684:	80 40       	sbci	r24, 0x00	; 0
 686:	90 40       	sbci	r25, 0x00	; 0
 688:	e1 f7       	brne	.-8      	; 0x682 <main+0x15a>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <main+0x164>
 68c:	00 00       	nop
			_delay_ms(200);
			
			LCD_goToSpecificPosition(2,1);
 68e:	61 e0       	ldi	r22, 0x01	; 1
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	0e 94 82 02 	call	0x504	; 0x504 <LCD_goToSpecificPosition>
			
			LCD_sendString("Thanks !");
 696:	87 e9       	ldi	r24, 0x97	; 151
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_sendString>
 69e:	2f ef       	ldi	r18, 0xFF	; 255
 6a0:	89 e6       	ldi	r24, 0x69	; 105
 6a2:	98 e1       	ldi	r25, 0x18	; 24
 6a4:	21 50       	subi	r18, 0x01	; 1
 6a6:	80 40       	sbci	r24, 0x00	; 0
 6a8:	90 40       	sbci	r25, 0x00	; 0
 6aa:	e1 f7       	brne	.-8      	; 0x6a4 <main+0x17c>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <main+0x186>
 6ae:	00 00       	nop
 6b0:	8c cf       	rjmp	.-232    	; 0x5ca <main+0xa2>

000006b2 <SWITCH_getState>:
/* HAL */
#include "SWITCH_interface.h"

void SWITCH_getState(u8 PortId, u8 PinId ,u8 connectionType ,u8* StateValue)

{
 6b2:	ef 92       	push	r14
 6b4:	ff 92       	push	r15
 6b6:	1f 93       	push	r17
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	1f 92       	push	r1
 6be:	cd b7       	in	r28, 0x3d	; 61
 6c0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_switchState ; 
    if ( (PortId<=3) && (PinId<=7) && (StateValue != NULL ) && (connectionType == forward || connectionType == reverse) ) 
 6c2:	84 30       	cpi	r24, 0x04	; 4
 6c4:	40 f5       	brcc	.+80     	; 0x716 <SWITCH_getState+0x64>
 6c6:	68 30       	cpi	r22, 0x08	; 8
 6c8:	30 f5       	brcc	.+76     	; 0x716 <SWITCH_getState+0x64>
 6ca:	21 15       	cp	r18, r1
 6cc:	31 05       	cpc	r19, r1
 6ce:	19 f1       	breq	.+70     	; 0x716 <SWITCH_getState+0x64>
 6d0:	42 30       	cpi	r20, 0x02	; 2
 6d2:	08 f5       	brcc	.+66     	; 0x716 <SWITCH_getState+0x64>
 6d4:	79 01       	movw	r14, r18
 6d6:	14 2f       	mov	r17, r20
	{
		DIO_getPinValue(PortId,PinId,&Local_switchState) ;
 6d8:	ae 01       	movw	r20, r28
 6da:	4f 5f       	subi	r20, 0xFF	; 255
 6dc:	5f 4f       	sbci	r21, 0xFF	; 255
 6de:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
		
		if (connectionType == forward )
 6e2:	11 30       	cpi	r17, 0x01	; 1
 6e4:	59 f4       	brne	.+22     	; 0x6fc <SWITCH_getState+0x4a>
		{
			if (Local_switchState == 1)
 6e6:	89 81       	ldd	r24, Y+1	; 0x01
 6e8:	81 30       	cpi	r24, 0x01	; 1
 6ea:	19 f4       	brne	.+6      	; 0x6f2 <SWITCH_getState+0x40>
			{
				*StateValue = SWITCH_PRESSED ;
 6ec:	f7 01       	movw	r30, r14
 6ee:	80 83       	st	Z, r24
 6f0:	12 c0       	rjmp	.+36     	; 0x716 <SWITCH_getState+0x64>
			}
			else if (Local_switchState == 0)
 6f2:	81 11       	cpse	r24, r1
 6f4:	10 c0       	rjmp	.+32     	; 0x716 <SWITCH_getState+0x64>
			{
				*StateValue = SWITCH_NOT_PRESSED ;
 6f6:	f7 01       	movw	r30, r14
 6f8:	10 82       	st	Z, r1
 6fa:	0d c0       	rjmp	.+26     	; 0x716 <SWITCH_getState+0x64>
			}	
		}
		
		else if (connectionType == reverse)
 6fc:	11 11       	cpse	r17, r1
 6fe:	0b c0       	rjmp	.+22     	; 0x716 <SWITCH_getState+0x64>
		{
			if (Local_switchState == 1)
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	19 f4       	brne	.+6      	; 0x70c <SWITCH_getState+0x5a>
			{
				*StateValue = SWITCH_NOT_PRESSED ;
 706:	f7 01       	movw	r30, r14
 708:	10 82       	st	Z, r1
 70a:	05 c0       	rjmp	.+10     	; 0x716 <SWITCH_getState+0x64>
			}
			else if (Local_switchState == 0)
 70c:	81 11       	cpse	r24, r1
 70e:	03 c0       	rjmp	.+6      	; 0x716 <SWITCH_getState+0x64>
			{
				*StateValue = SWITCH_PRESSED ;
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	f7 01       	movw	r30, r14
 714:	80 83       	st	Z, r24
			}
		}
		
	}
 716:	0f 90       	pop	r0
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	ff 90       	pop	r15
 720:	ef 90       	pop	r14
 722:	08 95       	ret

00000724 <_exit>:
 724:	f8 94       	cli

00000726 <__stop_program>:
 726:	ff cf       	rjmp	.-2      	; 0x726 <__stop_program>
