
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000be0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000d10  08000d10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d1c  08000d1c  00010d24  2**0
                  CONTENTS
  4 .ARM          00000000  08000d1c  08000d1c  00010d24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d1c  08000d24  00010d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d1c  08000d1c  00010d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d20  08000d20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000000  08000d24  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08000d24  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d24  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000574e  00000000  00000000  00010d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d33  00000000  00000000  0001649b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001298  00000000  00000000  000171ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002a0  00000000  00000000  00018468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000238  00000000  00000000  00018708  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002c5f  00000000  00000000  00018940  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002da7  00000000  00000000  0001b59f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c192  00000000  00000000  0001e346  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002a4d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000930  00000000  00000000  0002a554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cf8 	.word	0x08000cf8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000cf8 	.word	0x08000cf8

08000170 <clock_init>:


unsigned int IRQ_Flag = 0 ;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	//Enable clock GPIOB
	RCC_GPIOB_CLK_EN() ;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0308 	orr.w	r3, r3, #8
 800017e:	6193      	str	r3, [r2, #24]

	//Enable clock AFIO
	AFIO_GPIOE_CLK_EN() ;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6193      	str	r3, [r2, #24]




}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <EXTI9_CallBack>:
	for (i= 0 ; i<x ; i++)
		for (j= 0 ; j<255 ; j++);
}

void EXTI9_CallBack(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	IRQ_Flag = 1 ;
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <EXTI9_CallBack+0x14>)
 800019e:	2201      	movs	r2, #1
 80001a0:	601a      	str	r2, [r3, #0]

}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000001c 	.word	0x2000001c

080001b0 <main>:

int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0
	clock_init();
 80001b6:	f7ff ffdb 	bl	8000170 <clock_init>

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9 ;
 80001ba:	4a0d      	ldr	r2, [pc, #52]	; (80001f0 <main+0x40>)
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	ca07      	ldmia	r2, {r0, r1, r2}
 80001c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING ;
 80001c4:	2300      	movs	r3, #0
 80001c6:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_CallBack ;
 80001c8:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <main+0x44>)
 80001ca:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable ;
 80001cc:	2300      	movs	r3, #0
 80001ce:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fa00 	bl	80005d8 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1 ;
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <main+0x48>)
 80001da:	2201      	movs	r2, #1
 80001dc:	601a      	str	r2, [r3, #0]

	while (1)
	{

      if (IRQ_Flag)
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <main+0x48>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0fb      	beq.n	80001de <main+0x2e>
      {
    	  IRQ_Flag = 0 ;
 80001e6:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <main+0x48>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
      if (IRQ_Flag)
 80001ec:	e7f7      	b.n	80001de <main+0x2e>
 80001ee:	bf00      	nop
 80001f0:	08000d10 	.word	0x08000d10
 80001f4:	08000199 	.word	0x08000199
 80001f8:	2000001c 	.word	0x2000001c

080001fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000200:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000204:	480c      	ldr	r0, [pc, #48]	; (8000238 <LoopForever+0x6>)
  ldr r1, =_edata
 8000206:	490d      	ldr	r1, [pc, #52]	; (800023c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000208:	4a0d      	ldr	r2, [pc, #52]	; (8000240 <LoopForever+0xe>)
  movs r3, #0
 800020a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800020c:	e002      	b.n	8000214 <LoopCopyDataInit>

0800020e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000212:	3304      	adds	r3, #4

08000214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000218:	d3f9      	bcc.n	800020e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021a:	4a0a      	ldr	r2, [pc, #40]	; (8000244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800021c:	4c0a      	ldr	r4, [pc, #40]	; (8000248 <LoopForever+0x16>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000220:	e001      	b.n	8000226 <LoopFillZerobss>

08000222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000224:	3204      	adds	r2, #4

08000226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000228:	d3fb      	bcc.n	8000222 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022a:	f000 fd41 	bl	8000cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022e:	f7ff ffbf 	bl	80001b0 <main>

08000232 <LoopForever>:

LoopForever:
    b LoopForever
 8000232:	e7fe      	b.n	8000232 <LoopForever>
  ldr   r0, =_estack
 8000234:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800023c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000240:	08000d24 	.word	0x08000d24
  ldr r2, =_sbss
 8000244:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000248:	200000b0 	.word	0x200000b0

0800024c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800024c:	e7fe      	b.n	800024c <ADC1_2_IRQHandler>
	...

08000250 <Enable_NVIC>:
 * 							Generic Functions
 * =====================================================================================
 */

   static void Enable_NVIC(uint16_t IRQ)
   {
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
   	switch(IRQ)
 800025a:	88fb      	ldrh	r3, [r7, #6]
 800025c:	2b0f      	cmp	r3, #15
 800025e:	d854      	bhi.n	800030a <Enable_NVIC+0xba>
 8000260:	a201      	add	r2, pc, #4	; (adr r2, 8000268 <Enable_NVIC+0x18>)
 8000262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000266:	bf00      	nop
 8000268:	080002a9 	.word	0x080002a9
 800026c:	080002b7 	.word	0x080002b7
 8000270:	080002c5 	.word	0x080002c5
 8000274:	080002d3 	.word	0x080002d3
 8000278:	080002e1 	.word	0x080002e1
 800027c:	080002ef 	.word	0x080002ef
 8000280:	080002ef 	.word	0x080002ef
 8000284:	080002ef 	.word	0x080002ef
 8000288:	080002ef 	.word	0x080002ef
 800028c:	080002ef 	.word	0x080002ef
 8000290:	080002fd 	.word	0x080002fd
 8000294:	080002fd 	.word	0x080002fd
 8000298:	080002fd 	.word	0x080002fd
 800029c:	080002fd 	.word	0x080002fd
 80002a0:	080002fd 	.word	0x080002fd
 80002a4:	080002fd 	.word	0x080002fd
   	{
   	case EXTI0:
   		NVIC_IRQ6_EXTI0_Enable();
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <Enable_NVIC+0xc4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a19      	ldr	r2, [pc, #100]	; (8000314 <Enable_NVIC+0xc4>)
 80002ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002b2:	6013      	str	r3, [r2, #0]
   		break;
 80002b4:	e029      	b.n	800030a <Enable_NVIC+0xba>

   	case EXTI1:
   		NVIC_IRQ7_EXTI1_Enable();
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <Enable_NVIC+0xc4>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a16      	ldr	r2, [pc, #88]	; (8000314 <Enable_NVIC+0xc4>)
 80002bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c0:	6013      	str	r3, [r2, #0]
   		break;
 80002c2:	e022      	b.n	800030a <Enable_NVIC+0xba>

   	case EXTI2:
   		NVIC_IRQ8_EXTI2_Enable();
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <Enable_NVIC+0xc4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <Enable_NVIC+0xc4>)
 80002ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ce:	6013      	str	r3, [r2, #0]
   		break;
 80002d0:	e01b      	b.n	800030a <Enable_NVIC+0xba>

   	case EXTI3:
   		NVIC_IRQ9_EXTI3_Enable();
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <Enable_NVIC+0xc4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <Enable_NVIC+0xc4>)
 80002d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002dc:	6013      	str	r3, [r2, #0]
   		break;
 80002de:	e014      	b.n	800030a <Enable_NVIC+0xba>

   	case EXTI4:
   		NVIC_IRQ10_EXTI4_Enable();
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <Enable_NVIC+0xc4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <Enable_NVIC+0xc4>)
 80002e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ea:	6013      	str	r3, [r2, #0]
   		break;
 80002ec:	e00d      	b.n	800030a <Enable_NVIC+0xba>
   	case EXTI5:
   	case EXTI6:
   	case EXTI7:
   	case EXTI8:
   	case EXTI9:
   		NVIC_IRQ23_EXTI5_9_Enable();
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <Enable_NVIC+0xc4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <Enable_NVIC+0xc4>)
 80002f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002f8:	6013      	str	r3, [r2, #0]
   		break;
 80002fa:	e006      	b.n	800030a <Enable_NVIC+0xba>
   	case EXTI11:
   	case EXTI12:
   	case EXTI13:
   	case EXTI14:
   	case EXTI15:
   		NVIC_IRQ40_EXTI10_15_Enable();
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <Enable_NVIC+0xc8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <Enable_NVIC+0xc8>)
 8000302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000306:	6013      	str	r3, [r2, #0]
   		break;
 8000308:	bf00      	nop
   	}
   }
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000e104 	.word	0xe000e104

0800031c <Disable_NVIC>:


   static void Disable_NVIC(uint16_t IRQ)
   {
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	80fb      	strh	r3, [r7, #6]
   	switch(IRQ)
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	2b0f      	cmp	r3, #15
 800032a:	d854      	bhi.n	80003d6 <Disable_NVIC+0xba>
 800032c:	a201      	add	r2, pc, #4	; (adr r2, 8000334 <Disable_NVIC+0x18>)
 800032e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000332:	bf00      	nop
 8000334:	08000375 	.word	0x08000375
 8000338:	08000383 	.word	0x08000383
 800033c:	08000391 	.word	0x08000391
 8000340:	0800039f 	.word	0x0800039f
 8000344:	080003ad 	.word	0x080003ad
 8000348:	080003bb 	.word	0x080003bb
 800034c:	080003bb 	.word	0x080003bb
 8000350:	080003bb 	.word	0x080003bb
 8000354:	080003bb 	.word	0x080003bb
 8000358:	080003bb 	.word	0x080003bb
 800035c:	080003c9 	.word	0x080003c9
 8000360:	080003c9 	.word	0x080003c9
 8000364:	080003c9 	.word	0x080003c9
 8000368:	080003c9 	.word	0x080003c9
 800036c:	080003c9 	.word	0x080003c9
 8000370:	080003c9 	.word	0x080003c9
   	{
   	case EXTI0:
   		NVIC_IRQ6_EXTI0_Disable();
 8000374:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <Disable_NVIC+0xc4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a19      	ldr	r2, [pc, #100]	; (80003e0 <Disable_NVIC+0xc4>)
 800037a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800037e:	6013      	str	r3, [r2, #0]
   		break;
 8000380:	e029      	b.n	80003d6 <Disable_NVIC+0xba>

   	case EXTI1:
   		NVIC_IRQ7_EXTI1_Disable();
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <Disable_NVIC+0xc4>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a16      	ldr	r2, [pc, #88]	; (80003e0 <Disable_NVIC+0xc4>)
 8000388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800038c:	6013      	str	r3, [r2, #0]
   		break;
 800038e:	e022      	b.n	80003d6 <Disable_NVIC+0xba>

   	case EXTI2:
   		NVIC_IRQ8_EXTI2_Disable();
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <Disable_NVIC+0xc4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a12      	ldr	r2, [pc, #72]	; (80003e0 <Disable_NVIC+0xc4>)
 8000396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800039a:	6013      	str	r3, [r2, #0]
   		break;
 800039c:	e01b      	b.n	80003d6 <Disable_NVIC+0xba>

   	case EXTI3:
   		NVIC_IRQ9_EXTI3_Disable();
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <Disable_NVIC+0xc4>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <Disable_NVIC+0xc4>)
 80003a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003a8:	6013      	str	r3, [r2, #0]
   		break;
 80003aa:	e014      	b.n	80003d6 <Disable_NVIC+0xba>

   	case EXTI4:
   		NVIC_IRQ10_EXTI4_Disable();
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <Disable_NVIC+0xc4>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a0b      	ldr	r2, [pc, #44]	; (80003e0 <Disable_NVIC+0xc4>)
 80003b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003b6:	6013      	str	r3, [r2, #0]
   		break;
 80003b8:	e00d      	b.n	80003d6 <Disable_NVIC+0xba>
   	case EXTI5:
   	case EXTI6:
   	case EXTI7:
   	case EXTI8:
   	case EXTI9:
   		NVIC_IRQ23_EXTI5_9_Disable();
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <Disable_NVIC+0xc4>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a08      	ldr	r2, [pc, #32]	; (80003e0 <Disable_NVIC+0xc4>)
 80003c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003c4:	6013      	str	r3, [r2, #0]
   		break;
 80003c6:	e006      	b.n	80003d6 <Disable_NVIC+0xba>
   	case EXTI11:
   	case EXTI12:
   	case EXTI13:
   	case EXTI14:
   	case EXTI15:
   		NVIC_IRQ40_EXTI10_15_Disable();
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <Disable_NVIC+0xc8>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <Disable_NVIC+0xc8>)
 80003ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d2:	6013      	str	r3, [r2, #0]
   		break;
 80003d4:	bf00      	nop
   	}
   }
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	e000e180 	.word	0xe000e180
 80003e4:	e000e184 	.word	0xe000e184

080003e8 <Update_EXTI>:

void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

	// 1- Configure GPIO to be AF input -> Floating input
	GPIO_PinConfig_t PinCfg;

	//update the GPIO Pin Floating input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN ;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	891b      	ldrh	r3, [r3, #8]
 80003f4:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 80003f6:	2301      	movs	r3, #1
 80003f8:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg) ;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	f107 0208 	add.w	r2, r7, #8
 8000402:	4611      	mov	r1, r2
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fa66 	bl	80008d6 <MCAL_GPIO_Init>


	// 2- Update AFIO to route between EXTI Line with GPIO A,B,C,D

	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4 ;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	089b      	lsrs	r3, r3, #2
 8000410:	b29b      	uxth	r3, r3
 8000412:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = ( EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4 ) * 4 ;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	b2db      	uxtb	r3, r3
 800041a:	f003 0303 	and.w	r3, r3, #3
 800041e:	b2db      	uxtb	r3, r3
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	73bb      	strb	r3, [r7, #14]

	// clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position ) ;
 8000424:	4a64      	ldr	r2, [pc, #400]	; (80005b8 <Update_EXTI+0x1d0>)
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	3302      	adds	r3, #2
 800042a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800042e:	7bbb      	ldrb	r3, [r7, #14]
 8000430:	210f      	movs	r1, #15
 8000432:	fa01 f303 	lsl.w	r3, r1, r3
 8000436:	43db      	mvns	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	495f      	ldr	r1, [pc, #380]	; (80005b8 <Update_EXTI+0x1d0>)
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	4002      	ands	r2, r0
 8000440:	3302      	adds	r3, #2
 8000442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF ) << AFIO_EXTICR_Position )  ;
 8000446:	4a5c      	ldr	r2, [pc, #368]	; (80005b8 <Update_EXTI+0x1d0>)
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	3302      	adds	r3, #2
 800044c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	4959      	ldr	r1, [pc, #356]	; (80005bc <Update_EXTI+0x1d4>)
 8000456:	428b      	cmp	r3, r1
 8000458:	d016      	beq.n	8000488 <Update_EXTI+0xa0>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	4958      	ldr	r1, [pc, #352]	; (80005c0 <Update_EXTI+0x1d8>)
 8000460:	428b      	cmp	r3, r1
 8000462:	d00f      	beq.n	8000484 <Update_EXTI+0x9c>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	4956      	ldr	r1, [pc, #344]	; (80005c4 <Update_EXTI+0x1dc>)
 800046a:	428b      	cmp	r3, r1
 800046c:	d008      	beq.n	8000480 <Update_EXTI+0x98>
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	4955      	ldr	r1, [pc, #340]	; (80005c8 <Update_EXTI+0x1e0>)
 8000474:	428b      	cmp	r3, r1
 8000476:	d101      	bne.n	800047c <Update_EXTI+0x94>
 8000478:	2303      	movs	r3, #3
 800047a:	e006      	b.n	800048a <Update_EXTI+0xa2>
 800047c:	2300      	movs	r3, #0
 800047e:	e004      	b.n	800048a <Update_EXTI+0xa2>
 8000480:	2302      	movs	r3, #2
 8000482:	e002      	b.n	800048a <Update_EXTI+0xa2>
 8000484:	2301      	movs	r3, #1
 8000486:	e000      	b.n	800048a <Update_EXTI+0xa2>
 8000488:	2300      	movs	r3, #0
 800048a:	7bb9      	ldrb	r1, [r7, #14]
 800048c:	408b      	lsls	r3, r1
 800048e:	4618      	mov	r0, r3
 8000490:	4949      	ldr	r1, [pc, #292]	; (80005b8 <Update_EXTI+0x1d0>)
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	4302      	orrs	r2, r0
 8000496:	3302      	adds	r3, #2
 8000498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// 3- Update Rising, Falling edge
	// we must clear the bits of trigger before writing on it
	EXTI->RTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 800049c:	4b4b      	ldr	r3, [pc, #300]	; (80005cc <Update_EXTI+0x1e4>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	8812      	ldrh	r2, [r2, #0]
 80004a4:	4611      	mov	r1, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	408a      	lsls	r2, r1
 80004aa:	43d2      	mvns	r2, r2
 80004ac:	4611      	mov	r1, r2
 80004ae:	4a47      	ldr	r2, [pc, #284]	; (80005cc <Update_EXTI+0x1e4>)
 80004b0:	400b      	ands	r3, r1
 80004b2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 80004b4:	4b45      	ldr	r3, [pc, #276]	; (80005cc <Update_EXTI+0x1e4>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	8812      	ldrh	r2, [r2, #0]
 80004bc:	4611      	mov	r1, r2
 80004be:	2201      	movs	r2, #1
 80004c0:	408a      	lsls	r2, r1
 80004c2:	43d2      	mvns	r2, r2
 80004c4:	4611      	mov	r1, r2
 80004c6:	4a41      	ldr	r2, [pc, #260]	; (80005cc <Update_EXTI+0x1e4>)
 80004c8:	400b      	ands	r3, r1
 80004ca:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	7b1b      	ldrb	r3, [r3, #12]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d10b      	bne.n	80004ec <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 80004d4:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <Update_EXTI+0x1e4>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	8812      	ldrh	r2, [r2, #0]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a39      	ldr	r2, [pc, #228]	; (80005cc <Update_EXTI+0x1e4>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	6093      	str	r3, [r2, #8]
 80004ea:	e029      	b.n	8000540 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	7b1b      	ldrb	r3, [r3, #12]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d10b      	bne.n	800050c <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 80004f4:	4b35      	ldr	r3, [pc, #212]	; (80005cc <Update_EXTI+0x1e4>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	8812      	ldrh	r2, [r2, #0]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	4611      	mov	r1, r2
 8000504:	4a31      	ldr	r2, [pc, #196]	; (80005cc <Update_EXTI+0x1e4>)
 8000506:	430b      	orrs	r3, r1
 8000508:	60d3      	str	r3, [r2, #12]
 800050a:	e019      	b.n	8000540 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	7b1b      	ldrb	r3, [r3, #12]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d115      	bne.n	8000540 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 8000514:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <Update_EXTI+0x1e4>)
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	8812      	ldrh	r2, [r2, #0]
 800051c:	4611      	mov	r1, r2
 800051e:	2201      	movs	r2, #1
 8000520:	408a      	lsls	r2, r1
 8000522:	4611      	mov	r1, r2
 8000524:	4a29      	ldr	r2, [pc, #164]	; (80005cc <Update_EXTI+0x1e4>)
 8000526:	430b      	orrs	r3, r1
 8000528:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 800052a:	4b28      	ldr	r3, [pc, #160]	; (80005cc <Update_EXTI+0x1e4>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	8812      	ldrh	r2, [r2, #0]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	4611      	mov	r1, r2
 800053a:	4a24      	ldr	r2, [pc, #144]	; (80005cc <Update_EXTI+0x1e4>)
 800053c:	430b      	orrs	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]
	}


	// 4- Update IRQ Handling CallBack
    GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack ;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <Update_EXTI+0x1e8>)
 800054c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]



    // 5- Enable\Disable IRQ EXTI & NVIC
    if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	7b5b      	ldrb	r3, [r3, #13]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d116      	bne.n	8000586 <Update_EXTI+0x19e>
    {
    	EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <Update_EXTI+0x1e4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	8812      	ldrh	r2, [r2, #0]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	4611      	mov	r1, r2
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <Update_EXTI+0x1e4>)
 800056a:	430b      	orrs	r3, r1
 800056c:	6013      	str	r3, [r2, #0]
    	Enable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fe6c 	bl	8000250 <Enable_NVIC>
    	(NVIC_ISER0 |= 1<<23) ;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <Update_EXTI+0x1ec>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <Update_EXTI+0x1ec>)
 800057e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000582:	6013      	str	r3, [r2, #0]
    {
    	EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
    	Disable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
    }

}
 8000584:	e014      	b.n	80005b0 <Update_EXTI+0x1c8>
    else if (EXTI_Config->IRQ_EN == EXTI_IRQ_Disable)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	7b5b      	ldrb	r3, [r3, #13]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d110      	bne.n	80005b0 <Update_EXTI+0x1c8>
    	EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <Update_EXTI+0x1e4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	8812      	ldrh	r2, [r2, #0]
 8000596:	4611      	mov	r1, r2
 8000598:	2201      	movs	r2, #1
 800059a:	408a      	lsls	r2, r1
 800059c:	43d2      	mvns	r2, r2
 800059e:	4611      	mov	r1, r2
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <Update_EXTI+0x1e4>)
 80005a2:	400b      	ands	r3, r1
 80005a4:	6013      	str	r3, [r2, #0]
    	Disable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff feb6 	bl	800031c <Disable_NVIC>
}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40010000 	.word	0x40010000
 80005bc:	40010800 	.word	0x40010800
 80005c0:	40010c00 	.word	0x40010c00
 80005c4:	40011000 	.word	0x40011000
 80005c8:	40011400 	.word	0x40011400
 80005cc:	40010400 	.word	0x40010400
 80005d0:	20000020 	.word	0x20000020
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <MCAL_EXTI_GPIO_Init>:
 * 					- but LQFP48 package has only GPIO A,B,Part of C/D exported as external PINS from the MCU
 * 					- Also Mandatory to enable RCC clock for AFIO and corresponding GPIO
 */

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ff01 	bl	80003e8 <Update_EXTI>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <EXTI0_IRQHandler>:
 * =====================================================================================
 */


void EXTI0_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <EXTI0_IRQHandler+0x1c>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <EXTI0_IRQHandler+0x1c>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <EXTI0_IRQHandler+0x20>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4798      	blx	r3
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40010400 	.word	0x40010400
 8000610:	20000020 	.word	0x20000020

08000614 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <EXTI1_IRQHandler+0x1c>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <EXTI1_IRQHandler+0x1c>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <EXTI1_IRQHandler+0x20>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	4798      	blx	r3
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40010400 	.word	0x40010400
 8000634:	20000020 	.word	0x20000020

08000638 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <EXTI2_IRQHandler+0x1c>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <EXTI2_IRQHandler+0x1c>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <EXTI2_IRQHandler+0x20>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	4798      	blx	r3
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010400 	.word	0x40010400
 8000658:	20000020 	.word	0x20000020

0800065c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <EXTI3_IRQHandler+0x1c>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <EXTI3_IRQHandler+0x1c>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <EXTI3_IRQHandler+0x20>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4798      	blx	r3
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40010400 	.word	0x40010400
 800067c:	20000020 	.word	0x20000020

08000680 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <EXTI4_IRQHandler+0x1c>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <EXTI4_IRQHandler+0x1c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <EXTI4_IRQHandler+0x20>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4798      	blx	r3
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40010400 	.word	0x40010400
 80006a0:	20000020 	.word	0x20000020

080006a4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	f003 0320 	and.w	r3, r3, #32
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <EXTI9_5_IRQHandler+0x22>
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a22      	ldr	r2, [pc, #136]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	6153      	str	r3, [r2, #20]
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <EXTI9_5_IRQHandler+0xa4>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d008      	beq.n	80006e4 <EXTI9_5_IRQHandler+0x40>
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 80006d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <EXTI9_5_IRQHandler+0xa4>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d008      	beq.n	8000702 <EXTI9_5_IRQHandler+0x5e>
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	4a13      	ldr	r2, [pc, #76]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 80006f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fa:	6153      	str	r3, [r2, #20]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <EXTI9_5_IRQHandler+0xa4>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800070a:	2b00      	cmp	r3, #0
 800070c:	d008      	beq.n	8000720 <EXTI9_5_IRQHandler+0x7c>
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 8000714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <EXTI9_5_IRQHandler+0xa4>)
 800071c:	6a1b      	ldr	r3, [r3, #32]
 800071e:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000728:	2b00      	cmp	r3, #0
 800072a:	d008      	beq.n	800073e <EXTI9_5_IRQHandler+0x9a>
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <EXTI9_5_IRQHandler+0xa0>)
 8000732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000736:	6153      	str	r3, [r2, #20]
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <EXTI9_5_IRQHandler+0xa4>)
 800073a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073c:	4798      	blx	r3
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010400 	.word	0x40010400
 8000748:	20000020 	.word	0x20000020

0800074c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000758:	2b00      	cmp	r3, #0
 800075a:	d008      	beq.n	800076e <EXTI15_10_IRQHandler+0x22>
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 8000762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000766:	6153      	str	r3, [r2, #20]
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <EXTI15_10_IRQHandler+0xc0>)
 800076a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800076c:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000776:	2b00      	cmp	r3, #0
 8000778:	d008      	beq.n	800078c <EXTI15_10_IRQHandler+0x40>
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a22      	ldr	r2, [pc, #136]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 8000780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <EXTI15_10_IRQHandler+0xc0>)
 8000788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078a:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000794:	2b00      	cmp	r3, #0
 8000796:	d008      	beq.n	80007aa <EXTI15_10_IRQHandler+0x5e>
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	4a1a      	ldr	r2, [pc, #104]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 800079e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007a2:	6153      	str	r3, [r2, #20]
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <EXTI15_10_IRQHandler+0xc0>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d008      	beq.n	80007c8 <EXTI15_10_IRQHandler+0x7c>
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 80007bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <EXTI15_10_IRQHandler+0xc0>)
 80007c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c6:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d008      	beq.n	80007e6 <EXTI15_10_IRQHandler+0x9a>
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6153      	str	r3, [r2, #20]
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <EXTI15_10_IRQHandler+0xc0>)
 80007e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e4:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d008      	beq.n	8000804 <EXTI15_10_IRQHandler+0xb8>
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <EXTI15_10_IRQHandler+0xbc>)
 80007f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b03      	ldr	r3, [pc, #12]	; (800080c <EXTI15_10_IRQHandler+0xc0>)
 8000800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000802:	4798      	blx	r3
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40010400 	.word	0x40010400
 800080c:	20000020 	.word	0x20000020

08000810 <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	2b80      	cmp	r3, #128	; 0x80
 800081e:	d042      	beq.n	80008a6 <Get_CRLH_Position+0x96>
 8000820:	2b80      	cmp	r3, #128	; 0x80
 8000822:	dc11      	bgt.n	8000848 <Get_CRLH_Position+0x38>
 8000824:	2b08      	cmp	r3, #8
 8000826:	d036      	beq.n	8000896 <Get_CRLH_Position+0x86>
 8000828:	2b08      	cmp	r3, #8
 800082a:	dc06      	bgt.n	800083a <Get_CRLH_Position+0x2a>
 800082c:	2b02      	cmp	r3, #2
 800082e:	d02e      	beq.n	800088e <Get_CRLH_Position+0x7e>
 8000830:	2b04      	cmp	r3, #4
 8000832:	d02e      	beq.n	8000892 <Get_CRLH_Position+0x82>
 8000834:	2b01      	cmp	r3, #1
 8000836:	d028      	beq.n	800088a <Get_CRLH_Position+0x7a>
 8000838:	e047      	b.n	80008ca <Get_CRLH_Position+0xba>
 800083a:	2b20      	cmp	r3, #32
 800083c:	d02f      	beq.n	800089e <Get_CRLH_Position+0x8e>
 800083e:	2b40      	cmp	r3, #64	; 0x40
 8000840:	d02f      	beq.n	80008a2 <Get_CRLH_Position+0x92>
 8000842:	2b10      	cmp	r3, #16
 8000844:	d029      	beq.n	800089a <Get_CRLH_Position+0x8a>
 8000846:	e040      	b.n	80008ca <Get_CRLH_Position+0xba>
 8000848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800084c:	d033      	beq.n	80008b6 <Get_CRLH_Position+0xa6>
 800084e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000852:	dc09      	bgt.n	8000868 <Get_CRLH_Position+0x58>
 8000854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000858:	d029      	beq.n	80008ae <Get_CRLH_Position+0x9e>
 800085a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800085e:	d028      	beq.n	80008b2 <Get_CRLH_Position+0xa2>
 8000860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000864:	d021      	beq.n	80008aa <Get_CRLH_Position+0x9a>
 8000866:	e030      	b.n	80008ca <Get_CRLH_Position+0xba>
 8000868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086c:	d027      	beq.n	80008be <Get_CRLH_Position+0xae>
 800086e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000872:	dc03      	bgt.n	800087c <Get_CRLH_Position+0x6c>
 8000874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000878:	d01f      	beq.n	80008ba <Get_CRLH_Position+0xaa>
 800087a:	e026      	b.n	80008ca <Get_CRLH_Position+0xba>
 800087c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000880:	d01f      	beq.n	80008c2 <Get_CRLH_Position+0xb2>
 8000882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000886:	d01e      	beq.n	80008c6 <Get_CRLH_Position+0xb6>
 8000888:	e01f      	b.n	80008ca <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800088a:	2300      	movs	r3, #0
 800088c:	e01e      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 800088e:	2304      	movs	r3, #4
 8000890:	e01c      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000892:	2308      	movs	r3, #8
 8000894:	e01a      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000896:	230c      	movs	r3, #12
 8000898:	e018      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 800089a:	2310      	movs	r3, #16
 800089c:	e016      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 800089e:	2314      	movs	r3, #20
 80008a0:	e014      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 80008a2:	2318      	movs	r3, #24
 80008a4:	e012      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 80008a6:	231c      	movs	r3, #28
 80008a8:	e010      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e00e      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	e00c      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 80008b2:	2308      	movs	r3, #8
 80008b4:	e00a      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 80008b6:	230c      	movs	r3, #12
 80008b8:	e008      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 80008ba:	2310      	movs	r3, #16
 80008bc:	e006      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 80008be:	2314      	movs	r3, #20
 80008c0:	e004      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 80008c2:	2318      	movs	r3, #24
 80008c4:	e002      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 80008c6:	231c      	movs	r3, #28
 80008c8:	e000      	b.n	80008cc <Get_CRLH_Position+0xbc>
		break;

	default:
		return 0;
 80008ca:	2300      	movs	r3, #0
		break;
	}
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <MCAL_GPIO_Init>:
 * @retval			- none
 * Note				- stm32F103c6 MCU has GPIO A,B,C,D,E Modules
 * 					  But LQFP48 package has only GPIO A,B,Part of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 80008d6:	b590      	push	{r4, r7, lr}
 80008d8:	b085      	sub	sp, #20
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
	// Port configuration register low  (GPIOx_CRL) configure PINS from 0 ==> 7
	// Port configuration register high (GPIOx_CRH) configure PINS from 8 ==> 15

	volatile uint32_t* configregister = NULL ;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG = 0 ;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOx->CRL : &GPIOx->CRH ;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	2bff      	cmp	r3, #255	; 0xff
 80008ee:	d801      	bhi.n	80008f4 <MCAL_GPIO_Init+0x1e>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	e001      	b.n	80008f8 <MCAL_GPIO_Init+0x22>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3304      	adds	r3, #4
 80008f8:	60bb      	str	r3, [r7, #8]

	//clear CNF MODE
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff86 	bl	8000810 <Get_CRLH_Position>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	230f      	movs	r3, #15
 800090a:	4093      	lsls	r3, r2
 800090c:	43da      	mvns	r2, r3
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	401a      	ands	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	601a      	str	r2, [r3, #0]

	//if PIN is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)|| (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	789b      	ldrb	r3, [r3, #2]
 800091c:	2b07      	cmp	r3, #7
 800091e:	d00b      	beq.n	8000938 <MCAL_GPIO_Init+0x62>
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	789b      	ldrb	r3, [r3, #2]
 8000924:	2b06      	cmp	r3, #6
 8000926:	d007      	beq.n	8000938 <MCAL_GPIO_Init+0x62>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	2b05      	cmp	r3, #5
 800092e:	d003      	beq.n	8000938 <MCAL_GPIO_Init+0x62>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	789b      	ldrb	r3, [r3, #2]
 8000934:	2b04      	cmp	r3, #4
 8000936:	d10e      	bne.n	8000956 <MCAL_GPIO_Init+0x80>
	{
		//Set CNF MODE
		PIN_CONFIG = ( (((PinConfig->GPIO_MODE -4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f) ;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	789b      	ldrb	r3, [r3, #2]
 800093c:	3b04      	subs	r3, #4
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	b25a      	sxtb	r2, r3
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	78db      	ldrb	r3, [r3, #3]
 8000946:	b25b      	sxtb	r3, r3
 8000948:	4313      	orrs	r3, r2
 800094a:	b25b      	sxtb	r3, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e02c      	b.n	80009b0 <MCAL_GPIO_Init+0xda>
	}

	else
	{
		if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog) )
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	789b      	ldrb	r3, [r3, #2]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d003      	beq.n	8000966 <MCAL_GPIO_Init+0x90>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	789b      	ldrb	r3, [r3, #2]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d107      	bne.n	8000976 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF
			PIN_CONFIG = ( (((PinConfig->GPIO_MODE ) << 2) | (0x00)) & 0x0f) ;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	789b      	ldrb	r3, [r3, #2]
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	e01c      	b.n	80009b0 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF ) //Consider it as input floating
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	2b08      	cmp	r3, #8
 800097c:	d102      	bne.n	8000984 <MCAL_GPIO_Init+0xae>
		{
			PIN_CONFIG = ( (((GPIO_MODE_INPUT_FLO) << 2) | (0x00)) & 0x0f) ;
 800097e:	2304      	movs	r3, #4
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	e015      	b.n	80009b0 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD
		{
			PIN_CONFIG = ( (((GPIO_MODE_INPUT_PU) << 2) | (0x00)) & 0x0f) ;
 8000984:	2308      	movs	r3, #8
 8000986:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	789b      	ldrb	r3, [r3, #2]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d107      	bne.n	80009a0 <MCAL_GPIO_Init+0xca>
			{
				// PXODR = 1 Input pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	8812      	ldrh	r2, [r2, #0]
 8000998:	431a      	orrs	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	e007      	b.n	80009b0 <MCAL_GPIO_Init+0xda>
			}

			else
			{
				// PXODR = 0 Input pull down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	8812      	ldrh	r2, [r2, #0]
 80009a8:	43d2      	mvns	r2, r2
 80009aa:	401a      	ands	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*configregister) |= ( (PIN_CONFIG) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 80009b0:	7bfc      	ldrb	r4, [r7, #15]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff2a 	bl	8000810 <Get_CRLH_Position>
 80009bc:	4603      	mov	r3, r0
 80009be:	fa04 f203 	lsl.w	r2, r4, r3
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	431a      	orrs	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	601a      	str	r2, [r3, #0]


}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd90      	pop	{r4, r7, pc}

080009d4 <Slave_States>:
	/*Send The Address*/
	I2Cx->DR = Address ;
}

void Slave_States(I2C_TypeDef *I2Cx,Slave_State State)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a32      	ldr	r2, [pc, #200]	; (8000aac <Slave_States+0xd8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	bf14      	ite	ne
 80009e8:	2301      	movne	r3, #1
 80009ea:	2300      	moveq	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	73fb      	strb	r3, [r7, #15]

	switch(State)
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d856      	bhi.n	8000aa4 <Slave_States+0xd0>
 80009f6:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <Slave_States+0x28>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000a17 	.word	0x08000a17
 8000a00:	08000a11 	.word	0x08000a11
 8000a04:	08000a3b 	.word	0x08000a3b
 8000a08:	08000a53 	.word	0x08000a53
 8000a0c:	08000a77 	.word	0x08000a77
	{
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 8000a14:	e046      	b.n	8000aa4 <Slave_States+0xd0>

	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d03b      	beq.n	8000a9a <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8000a22:	7bfa      	ldrb	r2, [r7, #15]
 8000a24:	4922      	ldr	r1, [pc, #136]	; (8000ab0 <Slave_States+0xdc>)
 8000a26:	4613      	mov	r3, r2
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	440b      	add	r3, r1
 8000a30:	3320      	adds	r3, #32
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2000      	movs	r0, #0
 8000a36:	4798      	blx	r3
		}
		break;
 8000a38:	e02f      	b.n	8000a9a <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 8000a3a:	7bfa      	ldrb	r2, [r7, #15]
 8000a3c:	491c      	ldr	r1, [pc, #112]	; (8000ab0 <Slave_States+0xdc>)
 8000a3e:	4613      	mov	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	4413      	add	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	3320      	adds	r3, #32
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	4798      	blx	r3
		break;
 8000a50:	e028      	b.n	8000aa4 <Slave_States+0xd0>

	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d01f      	beq.n	8000a9e <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_SlaveSendData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 8000a5e:	7bfa      	ldrb	r2, [r7, #15]
 8000a60:	4913      	ldr	r1, [pc, #76]	; (8000ab0 <Slave_States+0xdc>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	4413      	add	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3320      	adds	r3, #32
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2003      	movs	r0, #3
 8000a72:	4798      	blx	r3
		}

		break;
 8000a74:	e013      	b.n	8000a9e <Slave_States+0xca>

	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10f      	bne.n	8000aa2 <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_SlaveReceiveData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 8000a82:	7bfa      	ldrb	r2, [r7, #15]
 8000a84:	490a      	ldr	r1, [pc, #40]	; (8000ab0 <Slave_States+0xdc>)
 8000a86:	4613      	mov	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	4413      	add	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	440b      	add	r3, r1
 8000a90:	3320      	adds	r3, #32
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2004      	movs	r0, #4
 8000a96:	4798      	blx	r3
		}

		break;
 8000a98:	e003      	b.n	8000aa2 <Slave_States+0xce>
		break;
 8000a9a:	bf00      	nop
 8000a9c:	e002      	b.n	8000aa4 <Slave_States+0xd0>
		break;
 8000a9e:	bf00      	nop
 8000aa0:	e000      	b.n	8000aa4 <Slave_States+0xd0>
		break;
 8000aa2:	bf00      	nop
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	2000005c 	.word	0x2000005c

08000ab4 <I2C1_EV_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void I2C1_EV_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx =I2C1 ;
 8000abe:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <I2C1_EV_IRQHandler+0xe0>)
 8000ac0:	617b      	str	r3, [r7, #20]
	//Interrupt Handler for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aca:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad4:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00c      	beq.n	8000b00 <I2C1_EV_IRQHandler+0x4c>
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d009      	beq.n	8000b00 <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummyRead = I2Cx->SR1;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000af8:	2100      	movs	r1, #0
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff6a 	bl	80009d4 <Slave_States>
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d012      	beq.n	8000b36 <I2C1_EV_IRQHandler+0x82>
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00f      	beq.n	8000b36 <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d109      	bne.n	8000b36 <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummyRead = I2Cx->SR1;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000b2e:	2102      	movs	r1, #2
 8000b30:	6978      	ldr	r0, [r7, #20]
 8000b32:	f7ff ff4f 	bl	80009d4 <Slave_States>
		}
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00c      	beq.n	8000b60 <I2C1_EV_IRQHandler+0xac>
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d009      	beq.n	8000b60 <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d103      	bne.n	8000b60 <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000b58:	2103      	movs	r1, #3
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff3a 	bl	80009d4 <Slave_States>
		}
	}
	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b68:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00c      	beq.n	8000b8a <I2C1_EV_IRQHandler+0xd6>
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d009      	beq.n	8000b8a <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d103      	bne.n	8000b8a <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000b82:	2104      	movs	r1, #4
 8000b84:	6978      	ldr	r0, [r7, #20]
 8000b86:	f7ff ff25 	bl	80009d4 <Slave_States>
		}
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40005400 	.word	0x40005400

08000b98 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
//			//Slave mode
//			Slave_States(I2Cx,I2C_EV_DATA_RCV);
//		}
//	}

}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <SPI1_IRQHandler+0x54>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	793b      	ldrb	r3, [r7, #4]
 8000bd0:	f362 0300 	bfi	r3, r2, #0, #1
 8000bd4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <SPI1_IRQHandler+0x54>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	793b      	ldrb	r3, [r7, #4]
 8000be2:	f362 0341 	bfi	r3, r2, #1, #1
 8000be6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <SPI1_IRQHandler+0x54>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	091b      	lsrs	r3, r3, #4
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	793b      	ldrb	r3, [r7, #4]
 8000bf6:	f362 0382 	bfi	r3, r2, #2, #1
 8000bfa:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SPI1_IRQHandler+0x58>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	7938      	ldrb	r0, [r7, #4]
 8000c04:	4798      	blx	r3
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40013000 	.word	0x40013000
 8000c14:	200000a4 	.word	0x200000a4

08000c18 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <SPI2_IRQHandler+0x54>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	793b      	ldrb	r3, [r7, #4]
 8000c2c:	f362 0300 	bfi	r3, r2, #0, #1
 8000c30:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <SPI2_IRQHandler+0x54>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	793b      	ldrb	r3, [r7, #4]
 8000c3e:	f362 0341 	bfi	r3, r2, #1, #1
 8000c42:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <SPI2_IRQHandler+0x54>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	793b      	ldrb	r3, [r7, #4]
 8000c52:	f362 0382 	bfi	r3, r2, #2, #1
 8000c56:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SPI2_IRQHandler+0x58>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	7938      	ldrb	r0, [r7, #4]
 8000c60:	4798      	blx	r3
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40013000 	.word	0x40013000
 8000c70:	200000a4 	.word	0x200000a4

08000c74 <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler (void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <USART1_IRQHandler+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	4798      	blx	r3
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200000ac 	.word	0x200000ac

08000c88 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <USART2_IRQHandler+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	4798      	blx	r3
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000ac 	.word	0x200000ac

08000c9c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <USART3_IRQHandler+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	4798      	blx	r3
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200000ac 	.word	0x200000ac

08000cb0 <__libc_init_array>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	4e0c      	ldr	r6, [pc, #48]	; (8000ce8 <__libc_init_array+0x38>)
 8000cb6:	4c0d      	ldr	r4, [pc, #52]	; (8000cec <__libc_init_array+0x3c>)
 8000cb8:	1ba4      	subs	r4, r4, r6
 8000cba:	10a4      	asrs	r4, r4, #2
 8000cbc:	42a5      	cmp	r5, r4
 8000cbe:	d109      	bne.n	8000cd4 <__libc_init_array+0x24>
 8000cc0:	f000 f81a 	bl	8000cf8 <_init>
 8000cc4:	2500      	movs	r5, #0
 8000cc6:	4e0a      	ldr	r6, [pc, #40]	; (8000cf0 <__libc_init_array+0x40>)
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	; (8000cf4 <__libc_init_array+0x44>)
 8000cca:	1ba4      	subs	r4, r4, r6
 8000ccc:	10a4      	asrs	r4, r4, #2
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d105      	bne.n	8000cde <__libc_init_array+0x2e>
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cd8:	4798      	blx	r3
 8000cda:	3501      	adds	r5, #1
 8000cdc:	e7ee      	b.n	8000cbc <__libc_init_array+0xc>
 8000cde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ce2:	4798      	blx	r3
 8000ce4:	3501      	adds	r5, #1
 8000ce6:	e7f2      	b.n	8000cce <__libc_init_array+0x1e>
 8000ce8:	08000d1c 	.word	0x08000d1c
 8000cec:	08000d1c 	.word	0x08000d1c
 8000cf0:	08000d1c 	.word	0x08000d1c
 8000cf4:	08000d20 	.word	0x08000d20

08000cf8 <_init>:
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	bf00      	nop
 8000cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfe:	bc08      	pop	{r3}
 8000d00:	469e      	mov	lr, r3
 8000d02:	4770      	bx	lr

08000d04 <_fini>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	bf00      	nop
 8000d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0a:	bc08      	pop	{r3}
 8000d0c:	469e      	mov	lr, r3
 8000d0e:	4770      	bx	lr
